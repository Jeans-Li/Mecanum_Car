
Mecanum_Car.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb10  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000464  0800bca0  0800bca0  0001bca0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c104  0800c104  0002020c  2**0
                  CONTENTS
  4 .ARM          00000008  0800c104  0800c104  0001c104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c10c  0800c10c  0002020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c10c  0800c10c  0001c10c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c110  0800c110  0001c110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  0800c114  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bc0  2000020c  0800c320  0002020c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000dcc  0800c320  00020dcc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00064483  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004967  00000000  00000000  000846bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001698  00000000  00000000  00089028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001510  00000000  00000000  0008a6c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000278b7  00000000  00000000  0008bbd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f1df  00000000  00000000  000b3487  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e0822  00000000  00000000  000d2666  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001b2e88  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ce4  00000000  00000000  001b2edc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000020c 	.word	0x2000020c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bc88 	.word	0x0800bc88

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000210 	.word	0x20000210
 80001cc:	0800bc88 	.word	0x0800bc88

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96e 	b.w	8000f3c <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468c      	mov	ip, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f040 8083 	bne.w	8000d8e <__udivmoddi4+0x116>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d947      	bls.n	8000d1e <__udivmoddi4+0xa6>
 8000c8e:	fab2 f282 	clz	r2, r2
 8000c92:	b142      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	f1c2 0020 	rsb	r0, r2, #32
 8000c98:	fa24 f000 	lsr.w	r0, r4, r0
 8000c9c:	4091      	lsls	r1, r2
 8000c9e:	4097      	lsls	r7, r2
 8000ca0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbbc f6f8 	udiv	r6, ip, r8
 8000cb0:	fa1f fe87 	uxth.w	lr, r7
 8000cb4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cb8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18fb      	adds	r3, r7, r3
 8000cc6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cca:	f080 8119 	bcs.w	8000f00 <__udivmoddi4+0x288>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8116 	bls.w	8000f00 <__udivmoddi4+0x288>
 8000cd4:	3e02      	subs	r6, #2
 8000cd6:	443b      	add	r3, r7
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cec:	45a6      	cmp	lr, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	193c      	adds	r4, r7, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8105 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cfa:	45a6      	cmp	lr, r4
 8000cfc:	f240 8102 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000d00:	3802      	subs	r0, #2
 8000d02:	443c      	add	r4, r7
 8000d04:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d08:	eba4 040e 	sub.w	r4, r4, lr
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	b11d      	cbz	r5, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c5 4300 	strd	r4, r3, [r5]
 8000d18:	4631      	mov	r1, r6
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	b902      	cbnz	r2, 8000d22 <__udivmoddi4+0xaa>
 8000d20:	deff      	udf	#255	; 0xff
 8000d22:	fab2 f282 	clz	r2, r2
 8000d26:	2a00      	cmp	r2, #0
 8000d28:	d150      	bne.n	8000dcc <__udivmoddi4+0x154>
 8000d2a:	1bcb      	subs	r3, r1, r7
 8000d2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d30:	fa1f f887 	uxth.w	r8, r7
 8000d34:	2601      	movs	r6, #1
 8000d36:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d3a:	0c21      	lsrs	r1, r4, #16
 8000d3c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d44:	fb08 f30c 	mul.w	r3, r8, ip
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000d4c:	1879      	adds	r1, r7, r1
 8000d4e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0xe2>
 8000d54:	428b      	cmp	r3, r1
 8000d56:	f200 80e9 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d5a:	4684      	mov	ip, r0
 8000d5c:	1ac9      	subs	r1, r1, r3
 8000d5e:	b2a3      	uxth	r3, r4
 8000d60:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d64:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d68:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d6c:	fb08 f800 	mul.w	r8, r8, r0
 8000d70:	45a0      	cmp	r8, r4
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x10c>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x10a>
 8000d7c:	45a0      	cmp	r8, r4
 8000d7e:	f200 80d9 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d82:	4618      	mov	r0, r3
 8000d84:	eba4 0408 	sub.w	r4, r4, r8
 8000d88:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d8c:	e7bf      	b.n	8000d0e <__udivmoddi4+0x96>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x12e>
 8000d92:	2d00      	cmp	r5, #0
 8000d94:	f000 80b1 	beq.w	8000efa <__udivmoddi4+0x282>
 8000d98:	2600      	movs	r6, #0
 8000d9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9e:	4630      	mov	r0, r6
 8000da0:	4631      	mov	r1, r6
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f683 	clz	r6, r3
 8000daa:	2e00      	cmp	r6, #0
 8000dac:	d14a      	bne.n	8000e44 <__udivmoddi4+0x1cc>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0x140>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80b8 	bhi.w	8000f28 <__udivmoddi4+0x2b0>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0103 	sbc.w	r1, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	468c      	mov	ip, r1
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	d0a8      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000dc6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dca:	e7a5      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000dcc:	f1c2 0320 	rsb	r3, r2, #32
 8000dd0:	fa20 f603 	lsr.w	r6, r0, r3
 8000dd4:	4097      	lsls	r7, r2
 8000dd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dda:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dde:	40d9      	lsrs	r1, r3
 8000de0:	4330      	orrs	r0, r6
 8000de2:	0c03      	lsrs	r3, r0, #16
 8000de4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000de8:	fa1f f887 	uxth.w	r8, r7
 8000dec:	fb0e 1116 	mls	r1, lr, r6, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb06 f108 	mul.w	r1, r6, r8
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dfe:	d909      	bls.n	8000e14 <__udivmoddi4+0x19c>
 8000e00:	18fb      	adds	r3, r7, r3
 8000e02:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e06:	f080 808d 	bcs.w	8000f24 <__udivmoddi4+0x2ac>
 8000e0a:	4299      	cmp	r1, r3
 8000e0c:	f240 808a 	bls.w	8000f24 <__udivmoddi4+0x2ac>
 8000e10:	3e02      	subs	r6, #2
 8000e12:	443b      	add	r3, r7
 8000e14:	1a5b      	subs	r3, r3, r1
 8000e16:	b281      	uxth	r1, r0
 8000e18:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e1c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e24:	fb00 f308 	mul.w	r3, r0, r8
 8000e28:	428b      	cmp	r3, r1
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x1c4>
 8000e2c:	1879      	adds	r1, r7, r1
 8000e2e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e32:	d273      	bcs.n	8000f1c <__udivmoddi4+0x2a4>
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d971      	bls.n	8000f1c <__udivmoddi4+0x2a4>
 8000e38:	3802      	subs	r0, #2
 8000e3a:	4439      	add	r1, r7
 8000e3c:	1acb      	subs	r3, r1, r3
 8000e3e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e42:	e778      	b.n	8000d36 <__udivmoddi4+0xbe>
 8000e44:	f1c6 0c20 	rsb	ip, r6, #32
 8000e48:	fa03 f406 	lsl.w	r4, r3, r6
 8000e4c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e50:	431c      	orrs	r4, r3
 8000e52:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e56:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e5e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e62:	431f      	orrs	r7, r3
 8000e64:	0c3b      	lsrs	r3, r7, #16
 8000e66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e6a:	fa1f f884 	uxth.w	r8, r4
 8000e6e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e72:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e76:	fb09 fa08 	mul.w	sl, r9, r8
 8000e7a:	458a      	cmp	sl, r1
 8000e7c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e80:	fa00 f306 	lsl.w	r3, r0, r6
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x220>
 8000e86:	1861      	adds	r1, r4, r1
 8000e88:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e8c:	d248      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000e8e:	458a      	cmp	sl, r1
 8000e90:	d946      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4421      	add	r1, r4
 8000e98:	eba1 010a 	sub.w	r1, r1, sl
 8000e9c:	b2bf      	uxth	r7, r7
 8000e9e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ea2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ea6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eaa:	fb00 f808 	mul.w	r8, r0, r8
 8000eae:	45b8      	cmp	r8, r7
 8000eb0:	d907      	bls.n	8000ec2 <__udivmoddi4+0x24a>
 8000eb2:	19e7      	adds	r7, r4, r7
 8000eb4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb8:	d22e      	bcs.n	8000f18 <__udivmoddi4+0x2a0>
 8000eba:	45b8      	cmp	r8, r7
 8000ebc:	d92c      	bls.n	8000f18 <__udivmoddi4+0x2a0>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4427      	add	r7, r4
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	eba7 0708 	sub.w	r7, r7, r8
 8000eca:	fba0 8902 	umull	r8, r9, r0, r2
 8000ece:	454f      	cmp	r7, r9
 8000ed0:	46c6      	mov	lr, r8
 8000ed2:	4649      	mov	r1, r9
 8000ed4:	d31a      	bcc.n	8000f0c <__udivmoddi4+0x294>
 8000ed6:	d017      	beq.n	8000f08 <__udivmoddi4+0x290>
 8000ed8:	b15d      	cbz	r5, 8000ef2 <__udivmoddi4+0x27a>
 8000eda:	ebb3 020e 	subs.w	r2, r3, lr
 8000ede:	eb67 0701 	sbc.w	r7, r7, r1
 8000ee2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ee6:	40f2      	lsrs	r2, r6
 8000ee8:	ea4c 0202 	orr.w	r2, ip, r2
 8000eec:	40f7      	lsrs	r7, r6
 8000eee:	e9c5 2700 	strd	r2, r7, [r5]
 8000ef2:	2600      	movs	r6, #0
 8000ef4:	4631      	mov	r1, r6
 8000ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000efa:	462e      	mov	r6, r5
 8000efc:	4628      	mov	r0, r5
 8000efe:	e70b      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f00:	4606      	mov	r6, r0
 8000f02:	e6e9      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f04:	4618      	mov	r0, r3
 8000f06:	e6fd      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f08:	4543      	cmp	r3, r8
 8000f0a:	d2e5      	bcs.n	8000ed8 <__udivmoddi4+0x260>
 8000f0c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f10:	eb69 0104 	sbc.w	r1, r9, r4
 8000f14:	3801      	subs	r0, #1
 8000f16:	e7df      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	e7d2      	b.n	8000ec2 <__udivmoddi4+0x24a>
 8000f1c:	4660      	mov	r0, ip
 8000f1e:	e78d      	b.n	8000e3c <__udivmoddi4+0x1c4>
 8000f20:	4681      	mov	r9, r0
 8000f22:	e7b9      	b.n	8000e98 <__udivmoddi4+0x220>
 8000f24:	4666      	mov	r6, ip
 8000f26:	e775      	b.n	8000e14 <__udivmoddi4+0x19c>
 8000f28:	4630      	mov	r0, r6
 8000f2a:	e74a      	b.n	8000dc2 <__udivmoddi4+0x14a>
 8000f2c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f30:	4439      	add	r1, r7
 8000f32:	e713      	b.n	8000d5c <__udivmoddi4+0xe4>
 8000f34:	3802      	subs	r0, #2
 8000f36:	443c      	add	r4, r7
 8000f38:	e724      	b.n	8000d84 <__udivmoddi4+0x10c>
 8000f3a:	bf00      	nop

08000f3c <__aeabi_idiv0>:
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop

08000f40 <BeepOn>:


#include "BEEP.h"

void BeepOn(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BEEP_GPIO_Port, BEEP_Pin, SET);
 8000f44:	2201      	movs	r2, #1
 8000f46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f4a:	4802      	ldr	r0, [pc, #8]	; (8000f54 <BeepOn+0x14>)
 8000f4c:	f004 fdf2 	bl	8005b34 <HAL_GPIO_WritePin>
}
 8000f50:	bf00      	nop
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	40021400 	.word	0x40021400

08000f58 <BeepOff>:

void BeepOff(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BEEP_GPIO_Port, BEEP_Pin, RESET);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f62:	4802      	ldr	r0, [pc, #8]	; (8000f6c <BeepOff+0x14>)
 8000f64:	f004 fde6 	bl	8005b34 <HAL_GPIO_WritePin>
}
 8000f68:	bf00      	nop
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	40021400 	.word	0x40021400

08000f70 <User_USART_Init>:
struct SPress stcPress;
struct SLonLat stcLonLat;
struct SQ stcQ;

//接收结构体初始化
void User_USART_Init(User_USART *Data) {
 8000f70:	b480      	push	{r7}
 8000f72:	b085      	sub	sp, #20
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
	for (uint16_t i = 0; i < RXBUFFER_LEN; i++)
 8000f78:	2300      	movs	r3, #0
 8000f7a:	81fb      	strh	r3, [r7, #14]
 8000f7c:	e007      	b.n	8000f8e <User_USART_Init+0x1e>
		Data->RxBuffer[i] = 0;
 8000f7e:	89fb      	ldrh	r3, [r7, #14]
 8000f80:	687a      	ldr	r2, [r7, #4]
 8000f82:	4413      	add	r3, r2
 8000f84:	2200      	movs	r2, #0
 8000f86:	70da      	strb	r2, [r3, #3]
	for (uint16_t i = 0; i < RXBUFFER_LEN; i++)
 8000f88:	89fb      	ldrh	r3, [r7, #14]
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	81fb      	strh	r3, [r7, #14]
 8000f8e:	89fb      	ldrh	r3, [r7, #14]
 8000f90:	2b62      	cmp	r3, #98	; 0x62
 8000f92:	d9f4      	bls.n	8000f7e <User_USART_Init+0xe>
	Data->frame_head = 0x55;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2255      	movs	r2, #85	; 0x55
 8000f98:	709a      	strb	r2, [r3, #2]
	Data->Rx_flag = 0;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	701a      	strb	r2, [r3, #0]
	Data->Rx_len = 0;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	705a      	strb	r2, [r3, #1]
}
 8000fa6:	bf00      	nop
 8000fa8:	3714      	adds	r7, #20
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	0000      	movs	r0, r0
 8000fb4:	0000      	movs	r0, r0
	...

08000fb8 <JY901_Process>:

void JY901_Process() {
 8000fb8:	b5b0      	push	{r4, r5, r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
	if (JY901_data.Rx_len < 44)
 8000fbe:	4bca      	ldr	r3, [pc, #808]	; (80012e8 <JY901_Process+0x330>)
 8000fc0:	785b      	ldrb	r3, [r3, #1]
 8000fc2:	2b2b      	cmp	r3, #43	; 0x2b
 8000fc4:	f240 81e2 	bls.w	800138c <JY901_Process+0x3d4>
		return;   	//如果位数不对
	for (uint8_t i = 0; i < 9; i++) {
 8000fc8:	2300      	movs	r3, #0
 8000fca:	71fb      	strb	r3, [r7, #7]
 8000fcc:	e1d9      	b.n	8001382 <JY901_Process+0x3ca>
		if (JY901_data.RxBuffer[i * 11] != JY901_data.frame_head)
 8000fce:	79fa      	ldrb	r2, [r7, #7]
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	4413      	add	r3, r2
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	4413      	add	r3, r2
 8000fda:	4ac3      	ldr	r2, [pc, #780]	; (80012e8 <JY901_Process+0x330>)
 8000fdc:	4413      	add	r3, r2
 8000fde:	78da      	ldrb	r2, [r3, #3]
 8000fe0:	4bc1      	ldr	r3, [pc, #772]	; (80012e8 <JY901_Process+0x330>)
 8000fe2:	789b      	ldrb	r3, [r3, #2]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	f040 81d3 	bne.w	8001390 <JY901_Process+0x3d8>
			return;	//如果帧头不对
		switch (JY901_data.RxBuffer[i * 11 + 1]) {
 8000fea:	79fa      	ldrb	r2, [r7, #7]
 8000fec:	4613      	mov	r3, r2
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	4413      	add	r3, r2
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	4413      	add	r3, r2
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	4abb      	ldr	r2, [pc, #748]	; (80012e8 <JY901_Process+0x330>)
 8000ffa:	4413      	add	r3, r2
 8000ffc:	78db      	ldrb	r3, [r3, #3]
 8000ffe:	3b51      	subs	r3, #81	; 0x51
 8001000:	2b08      	cmp	r3, #8
 8001002:	f200 81bb 	bhi.w	800137c <JY901_Process+0x3c4>
 8001006:	a201      	add	r2, pc, #4	; (adr r2, 800100c <JY901_Process+0x54>)
 8001008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800100c:	08001031 	.word	0x08001031
 8001010:	08001093 	.word	0x08001093
 8001014:	080010f3 	.word	0x080010f3
 8001018:	08001153 	.word	0x08001153
 800101c:	0800137d 	.word	0x0800137d
 8001020:	080011a5 	.word	0x080011a5
 8001024:	080011f1 	.word	0x080011f1
 8001028:	0800137d 	.word	0x0800137d
 800102c:	08001325 	.word	0x08001325
		case 0x51:
			memcpy(&stcAcc, &JY901_data.RxBuffer[2 + i * 11], 8);
 8001030:	79fa      	ldrb	r2, [r7, #7]
 8001032:	4613      	mov	r3, r2
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	4413      	add	r3, r2
 8001038:	005b      	lsls	r3, r3, #1
 800103a:	4413      	add	r3, r2
 800103c:	3302      	adds	r3, #2
 800103e:	4aaa      	ldr	r2, [pc, #680]	; (80012e8 <JY901_Process+0x330>)
 8001040:	4413      	add	r3, r2
 8001042:	3303      	adds	r3, #3
 8001044:	2208      	movs	r2, #8
 8001046:	4619      	mov	r1, r3
 8001048:	48a8      	ldr	r0, [pc, #672]	; (80012ec <JY901_Process+0x334>)
 800104a:	f008 f8b5 	bl	80091b8 <memcpy>
			for (uint8_t j = 0; j < 3; j++)
 800104e:	2300      	movs	r3, #0
 8001050:	71bb      	strb	r3, [r7, #6]
 8001052:	e01a      	b.n	800108a <JY901_Process+0xd2>
				JY901_data.acc.a[j] = (float) stcAcc.a[j] / 32768 * 16;
 8001054:	79bb      	ldrb	r3, [r7, #6]
 8001056:	4aa5      	ldr	r2, [pc, #660]	; (80012ec <JY901_Process+0x334>)
 8001058:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800105c:	ee07 3a90 	vmov	s15, r3
 8001060:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001064:	eddf 6aa2 	vldr	s13, [pc, #648]	; 80012f0 <JY901_Process+0x338>
 8001068:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800106c:	79bb      	ldrb	r3, [r7, #6]
 800106e:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8001072:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001076:	4a9c      	ldr	r2, [pc, #624]	; (80012e8 <JY901_Process+0x330>)
 8001078:	331c      	adds	r3, #28
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	4413      	add	r3, r2
 800107e:	3304      	adds	r3, #4
 8001080:	edc3 7a00 	vstr	s15, [r3]
			for (uint8_t j = 0; j < 3; j++)
 8001084:	79bb      	ldrb	r3, [r7, #6]
 8001086:	3301      	adds	r3, #1
 8001088:	71bb      	strb	r3, [r7, #6]
 800108a:	79bb      	ldrb	r3, [r7, #6]
 800108c:	2b02      	cmp	r3, #2
 800108e:	d9e1      	bls.n	8001054 <JY901_Process+0x9c>
			break;
 8001090:	e174      	b.n	800137c <JY901_Process+0x3c4>

		case 0x52:
			memcpy(&stcGyro, &JY901_data.RxBuffer[2 + i * 11], 8);
 8001092:	79fa      	ldrb	r2, [r7, #7]
 8001094:	4613      	mov	r3, r2
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	4413      	add	r3, r2
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	4413      	add	r3, r2
 800109e:	3302      	adds	r3, #2
 80010a0:	4a91      	ldr	r2, [pc, #580]	; (80012e8 <JY901_Process+0x330>)
 80010a2:	4413      	add	r3, r2
 80010a4:	3303      	adds	r3, #3
 80010a6:	2208      	movs	r2, #8
 80010a8:	4619      	mov	r1, r3
 80010aa:	4892      	ldr	r0, [pc, #584]	; (80012f4 <JY901_Process+0x33c>)
 80010ac:	f008 f884 	bl	80091b8 <memcpy>
			for (uint8_t j = 0; j < 3; j++)
 80010b0:	2300      	movs	r3, #0
 80010b2:	717b      	strb	r3, [r7, #5]
 80010b4:	e019      	b.n	80010ea <JY901_Process+0x132>
				JY901_data.w.w[j] = (float) stcGyro.w[j] / 32768 * 2000;
 80010b6:	797b      	ldrb	r3, [r7, #5]
 80010b8:	4a8e      	ldr	r2, [pc, #568]	; (80012f4 <JY901_Process+0x33c>)
 80010ba:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80010be:	ee07 3a90 	vmov	s15, r3
 80010c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010c6:	eddf 6a8a 	vldr	s13, [pc, #552]	; 80012f0 <JY901_Process+0x338>
 80010ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010ce:	797b      	ldrb	r3, [r7, #5]
 80010d0:	ed9f 7a89 	vldr	s14, [pc, #548]	; 80012f8 <JY901_Process+0x340>
 80010d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010d8:	4a83      	ldr	r2, [pc, #524]	; (80012e8 <JY901_Process+0x330>)
 80010da:	3320      	adds	r3, #32
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	4413      	add	r3, r2
 80010e0:	edc3 7a00 	vstr	s15, [r3]
			for (uint8_t j = 0; j < 3; j++)
 80010e4:	797b      	ldrb	r3, [r7, #5]
 80010e6:	3301      	adds	r3, #1
 80010e8:	717b      	strb	r3, [r7, #5]
 80010ea:	797b      	ldrb	r3, [r7, #5]
 80010ec:	2b02      	cmp	r3, #2
 80010ee:	d9e2      	bls.n	80010b6 <JY901_Process+0xfe>
			break;
 80010f0:	e144      	b.n	800137c <JY901_Process+0x3c4>

		case 0x53:
			memcpy(&stcAngle, &JY901_data.RxBuffer[2 + i * 11], 8);
 80010f2:	79fa      	ldrb	r2, [r7, #7]
 80010f4:	4613      	mov	r3, r2
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	4413      	add	r3, r2
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	4413      	add	r3, r2
 80010fe:	3302      	adds	r3, #2
 8001100:	4a79      	ldr	r2, [pc, #484]	; (80012e8 <JY901_Process+0x330>)
 8001102:	4413      	add	r3, r2
 8001104:	3303      	adds	r3, #3
 8001106:	2208      	movs	r2, #8
 8001108:	4619      	mov	r1, r3
 800110a:	487c      	ldr	r0, [pc, #496]	; (80012fc <JY901_Process+0x344>)
 800110c:	f008 f854 	bl	80091b8 <memcpy>
			for (uint8_t j = 0; j < 3; j++)
 8001110:	2300      	movs	r3, #0
 8001112:	713b      	strb	r3, [r7, #4]
 8001114:	e019      	b.n	800114a <JY901_Process+0x192>
				JY901_data.angle.angle[j] = (float) stcAngle.Angle[j] / 32768
 8001116:	793b      	ldrb	r3, [r7, #4]
 8001118:	4a78      	ldr	r2, [pc, #480]	; (80012fc <JY901_Process+0x344>)
 800111a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800111e:	ee07 3a90 	vmov	s15, r3
 8001122:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001126:	eddf 6a72 	vldr	s13, [pc, #456]	; 80012f0 <JY901_Process+0x338>
 800112a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800112e:	793b      	ldrb	r3, [r7, #4]
						* 180;
 8001130:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8001300 <JY901_Process+0x348>
 8001134:	ee67 7a87 	vmul.f32	s15, s15, s14
				JY901_data.angle.angle[j] = (float) stcAngle.Angle[j] / 32768
 8001138:	4a6b      	ldr	r2, [pc, #428]	; (80012e8 <JY901_Process+0x330>)
 800113a:	331a      	adds	r3, #26
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	4413      	add	r3, r2
 8001140:	edc3 7a00 	vstr	s15, [r3]
			for (uint8_t j = 0; j < 3; j++)
 8001144:	793b      	ldrb	r3, [r7, #4]
 8001146:	3301      	adds	r3, #1
 8001148:	713b      	strb	r3, [r7, #4]
 800114a:	793b      	ldrb	r3, [r7, #4]
 800114c:	2b02      	cmp	r3, #2
 800114e:	d9e2      	bls.n	8001116 <JY901_Process+0x15e>
			break;
 8001150:	e114      	b.n	800137c <JY901_Process+0x3c4>

		case 0x54:	//磁场解算
			memcpy(&stcMag, &JY901_data.RxBuffer[2 + i * 11], 8);
 8001152:	79fa      	ldrb	r2, [r7, #7]
 8001154:	4613      	mov	r3, r2
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	4413      	add	r3, r2
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	4413      	add	r3, r2
 800115e:	3302      	adds	r3, #2
 8001160:	4a61      	ldr	r2, [pc, #388]	; (80012e8 <JY901_Process+0x330>)
 8001162:	4413      	add	r3, r2
 8001164:	3303      	adds	r3, #3
 8001166:	2208      	movs	r2, #8
 8001168:	4619      	mov	r1, r3
 800116a:	4866      	ldr	r0, [pc, #408]	; (8001304 <JY901_Process+0x34c>)
 800116c:	f008 f824 	bl	80091b8 <memcpy>
			for (uint8_t j = 0; j < 3; j++)
 8001170:	2300      	movs	r3, #0
 8001172:	70fb      	strb	r3, [r7, #3]
 8001174:	e012      	b.n	800119c <JY901_Process+0x1e4>
				JY901_data.h.h[j] = (float) stcMag.h[j];
 8001176:	78fb      	ldrb	r3, [r7, #3]
 8001178:	4a62      	ldr	r2, [pc, #392]	; (8001304 <JY901_Process+0x34c>)
 800117a:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 800117e:	78fb      	ldrb	r3, [r7, #3]
 8001180:	ee07 2a90 	vmov	s15, r2
 8001184:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001188:	4a57      	ldr	r2, [pc, #348]	; (80012e8 <JY901_Process+0x330>)
 800118a:	3322      	adds	r3, #34	; 0x22
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	4413      	add	r3, r2
 8001190:	3304      	adds	r3, #4
 8001192:	edc3 7a00 	vstr	s15, [r3]
			for (uint8_t j = 0; j < 3; j++)
 8001196:	78fb      	ldrb	r3, [r7, #3]
 8001198:	3301      	adds	r3, #1
 800119a:	70fb      	strb	r3, [r7, #3]
 800119c:	78fb      	ldrb	r3, [r7, #3]
 800119e:	2b02      	cmp	r3, #2
 80011a0:	d9e9      	bls.n	8001176 <JY901_Process+0x1be>
			break;
 80011a2:	e0eb      	b.n	800137c <JY901_Process+0x3c4>

		case 0x55:	//D0-D3端口状态
			break;

		case 0x56:	//气压高度
			memcpy(&stcPress, &JY901_data.RxBuffer[2 + i * 11], 8);
 80011a4:	79fa      	ldrb	r2, [r7, #7]
 80011a6:	4613      	mov	r3, r2
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	4413      	add	r3, r2
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	4413      	add	r3, r2
 80011b0:	3302      	adds	r3, #2
 80011b2:	4a4d      	ldr	r2, [pc, #308]	; (80012e8 <JY901_Process+0x330>)
 80011b4:	4413      	add	r3, r2
 80011b6:	3303      	adds	r3, #3
 80011b8:	2208      	movs	r2, #8
 80011ba:	4619      	mov	r1, r3
 80011bc:	4852      	ldr	r0, [pc, #328]	; (8001308 <JY901_Process+0x350>)
 80011be:	f007 fffb 	bl	80091b8 <memcpy>
			JY901_data.lPressure.lPressure = (float) stcPress.lPressure;
 80011c2:	4b51      	ldr	r3, [pc, #324]	; (8001308 <JY901_Process+0x350>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	ee07 3a90 	vmov	s15, r3
 80011ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011ce:	4b46      	ldr	r3, [pc, #280]	; (80012e8 <JY901_Process+0x330>)
 80011d0:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98
			JY901_data.lPressure.lAltitude = (float) stcPress.lAltitude / 100;
 80011d4:	4b4c      	ldr	r3, [pc, #304]	; (8001308 <JY901_Process+0x350>)
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	ee07 3a90 	vmov	s15, r3
 80011dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011e0:	eddf 6a4a 	vldr	s13, [pc, #296]	; 800130c <JY901_Process+0x354>
 80011e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011e8:	4b3f      	ldr	r3, [pc, #252]	; (80012e8 <JY901_Process+0x330>)
 80011ea:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c
			break;
 80011ee:	e0c5      	b.n	800137c <JY901_Process+0x3c4>

		case 0x57:	//经纬度
			memcpy(&stcLonLat.lLat, &JY901_data.RxBuffer[2 + i * 11], 8);
 80011f0:	79fa      	ldrb	r2, [r7, #7]
 80011f2:	4613      	mov	r3, r2
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	4413      	add	r3, r2
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	4413      	add	r3, r2
 80011fc:	3302      	adds	r3, #2
 80011fe:	4a3a      	ldr	r2, [pc, #232]	; (80012e8 <JY901_Process+0x330>)
 8001200:	4413      	add	r3, r2
 8001202:	3303      	adds	r3, #3
 8001204:	2208      	movs	r2, #8
 8001206:	4619      	mov	r1, r3
 8001208:	4841      	ldr	r0, [pc, #260]	; (8001310 <JY901_Process+0x358>)
 800120a:	f007 ffd5 	bl	80091b8 <memcpy>
			JY901_data.lLon.lLat = (float) stcLonLat.lLat / 10000000
 800120e:	4b41      	ldr	r3, [pc, #260]	; (8001314 <JY901_Process+0x35c>)
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	ee07 3a90 	vmov	s15, r3
 8001216:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800121a:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8001318 <JY901_Process+0x360>
 800121e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001222:	ee16 0a90 	vmov	r0, s13
 8001226:	f7ff f98f 	bl	8000548 <__aeabi_f2d>
 800122a:	4604      	mov	r4, r0
 800122c:	460d      	mov	r5, r1
					+ (double) (stcLonLat.lLat % 10000000) / 1e5;
 800122e:	4b39      	ldr	r3, [pc, #228]	; (8001314 <JY901_Process+0x35c>)
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	4a3a      	ldr	r2, [pc, #232]	; (800131c <JY901_Process+0x364>)
 8001234:	fb82 1203 	smull	r1, r2, r2, r3
 8001238:	1591      	asrs	r1, r2, #22
 800123a:	17da      	asrs	r2, r3, #31
 800123c:	1a8a      	subs	r2, r1, r2
 800123e:	4938      	ldr	r1, [pc, #224]	; (8001320 <JY901_Process+0x368>)
 8001240:	fb01 f202 	mul.w	r2, r1, r2
 8001244:	1a9a      	subs	r2, r3, r2
 8001246:	4610      	mov	r0, r2
 8001248:	f7ff f96c 	bl	8000524 <__aeabi_i2d>
 800124c:	a324      	add	r3, pc, #144	; (adr r3, 80012e0 <JY901_Process+0x328>)
 800124e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001252:	f7ff fafb 	bl	800084c <__aeabi_ddiv>
 8001256:	4602      	mov	r2, r0
 8001258:	460b      	mov	r3, r1
 800125a:	4620      	mov	r0, r4
 800125c:	4629      	mov	r1, r5
 800125e:	f7ff f815 	bl	800028c <__adddf3>
 8001262:	4602      	mov	r2, r0
 8001264:	460b      	mov	r3, r1
 8001266:	4610      	mov	r0, r2
 8001268:	4619      	mov	r1, r3
 800126a:	f7ff fc9d 	bl	8000ba8 <__aeabi_d2f>
 800126e:	4603      	mov	r3, r0
			JY901_data.lLon.lLat = (float) stcLonLat.lLat / 10000000
 8001270:	4a1d      	ldr	r2, [pc, #116]	; (80012e8 <JY901_Process+0x330>)
 8001272:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
			JY901_data.lLon.lLat = (float) stcLonLat.lLon / 10000000
 8001276:	4b27      	ldr	r3, [pc, #156]	; (8001314 <JY901_Process+0x35c>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	ee07 3a90 	vmov	s15, r3
 800127e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001282:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8001318 <JY901_Process+0x360>
 8001286:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800128a:	ee16 0a90 	vmov	r0, s13
 800128e:	f7ff f95b 	bl	8000548 <__aeabi_f2d>
 8001292:	4604      	mov	r4, r0
 8001294:	460d      	mov	r5, r1
					+ (double) (stcLonLat.lLon % 10000000) / 1e5;
 8001296:	4b1f      	ldr	r3, [pc, #124]	; (8001314 <JY901_Process+0x35c>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a20      	ldr	r2, [pc, #128]	; (800131c <JY901_Process+0x364>)
 800129c:	fb82 1203 	smull	r1, r2, r2, r3
 80012a0:	1591      	asrs	r1, r2, #22
 80012a2:	17da      	asrs	r2, r3, #31
 80012a4:	1a8a      	subs	r2, r1, r2
 80012a6:	491e      	ldr	r1, [pc, #120]	; (8001320 <JY901_Process+0x368>)
 80012a8:	fb01 f202 	mul.w	r2, r1, r2
 80012ac:	1a9a      	subs	r2, r3, r2
 80012ae:	4610      	mov	r0, r2
 80012b0:	f7ff f938 	bl	8000524 <__aeabi_i2d>
 80012b4:	a30a      	add	r3, pc, #40	; (adr r3, 80012e0 <JY901_Process+0x328>)
 80012b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ba:	f7ff fac7 	bl	800084c <__aeabi_ddiv>
 80012be:	4602      	mov	r2, r0
 80012c0:	460b      	mov	r3, r1
 80012c2:	4620      	mov	r0, r4
 80012c4:	4629      	mov	r1, r5
 80012c6:	f7fe ffe1 	bl	800028c <__adddf3>
 80012ca:	4602      	mov	r2, r0
 80012cc:	460b      	mov	r3, r1
 80012ce:	4610      	mov	r0, r2
 80012d0:	4619      	mov	r1, r3
 80012d2:	f7ff fc69 	bl	8000ba8 <__aeabi_d2f>
 80012d6:	4603      	mov	r3, r0
			JY901_data.lLon.lLat = (float) stcLonLat.lLon / 10000000
 80012d8:	4a03      	ldr	r2, [pc, #12]	; (80012e8 <JY901_Process+0x330>)
 80012da:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
			break;
 80012de:	e04d      	b.n	800137c <JY901_Process+0x3c4>
 80012e0:	00000000 	.word	0x00000000
 80012e4:	40f86a00 	.word	0x40f86a00
 80012e8:	20000740 	.word	0x20000740
 80012ec:	20000690 	.word	0x20000690
 80012f0:	47000000 	.word	0x47000000
 80012f4:	20000688 	.word	0x20000688
 80012f8:	44fa0000 	.word	0x44fa0000
 80012fc:	20000670 	.word	0x20000670
 8001300:	43340000 	.word	0x43340000
 8001304:	20000668 	.word	0x20000668
 8001308:	20000698 	.word	0x20000698
 800130c:	42c80000 	.word	0x42c80000
 8001310:	2000067c 	.word	0x2000067c
 8001314:	20000678 	.word	0x20000678
 8001318:	4b189680 	.word	0x4b189680
 800131c:	6b5fca6b 	.word	0x6b5fca6b
 8001320:	00989680 	.word	0x00989680

		case 0x58:	//GPS
			break;

		case 0x59:	//四元数
			memcpy(&stcQ, &JY901_data.RxBuffer[2 + i * 11], 8);
 8001324:	79fa      	ldrb	r2, [r7, #7]
 8001326:	4613      	mov	r3, r2
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	4413      	add	r3, r2
 800132c:	005b      	lsls	r3, r3, #1
 800132e:	4413      	add	r3, r2
 8001330:	3302      	adds	r3, #2
 8001332:	4a19      	ldr	r2, [pc, #100]	; (8001398 <JY901_Process+0x3e0>)
 8001334:	4413      	add	r3, r2
 8001336:	3303      	adds	r3, #3
 8001338:	2208      	movs	r2, #8
 800133a:	4619      	mov	r1, r3
 800133c:	4817      	ldr	r0, [pc, #92]	; (800139c <JY901_Process+0x3e4>)
 800133e:	f007 ff3b 	bl	80091b8 <memcpy>
			for (uint8_t j = 0; j < 4; j++)
 8001342:	2300      	movs	r3, #0
 8001344:	70bb      	strb	r3, [r7, #2]
 8001346:	e015      	b.n	8001374 <JY901_Process+0x3bc>
				JY901_data.q.q[j] = (float) stcQ.q[j] / 32768;
 8001348:	78bb      	ldrb	r3, [r7, #2]
 800134a:	4a14      	ldr	r2, [pc, #80]	; (800139c <JY901_Process+0x3e4>)
 800134c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001350:	ee07 3a90 	vmov	s15, r3
 8001354:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001358:	78bb      	ldrb	r3, [r7, #2]
 800135a:	eddf 6a11 	vldr	s13, [pc, #68]	; 80013a0 <JY901_Process+0x3e8>
 800135e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001362:	4a0d      	ldr	r2, [pc, #52]	; (8001398 <JY901_Process+0x3e0>)
 8001364:	332e      	adds	r3, #46	; 0x2e
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	4413      	add	r3, r2
 800136a:	edc3 7a00 	vstr	s15, [r3]
			for (uint8_t j = 0; j < 4; j++)
 800136e:	78bb      	ldrb	r3, [r7, #2]
 8001370:	3301      	adds	r3, #1
 8001372:	70bb      	strb	r3, [r7, #2]
 8001374:	78bb      	ldrb	r3, [r7, #2]
 8001376:	2b03      	cmp	r3, #3
 8001378:	d9e6      	bls.n	8001348 <JY901_Process+0x390>
			break;
 800137a:	bf00      	nop
	for (uint8_t i = 0; i < 9; i++) {
 800137c:	79fb      	ldrb	r3, [r7, #7]
 800137e:	3301      	adds	r3, #1
 8001380:	71fb      	strb	r3, [r7, #7]
 8001382:	79fb      	ldrb	r3, [r7, #7]
 8001384:	2b08      	cmp	r3, #8
 8001386:	f67f ae22 	bls.w	8000fce <JY901_Process+0x16>
 800138a:	e002      	b.n	8001392 <JY901_Process+0x3da>
		return;   	//如果位数不对
 800138c:	bf00      	nop
 800138e:	e000      	b.n	8001392 <JY901_Process+0x3da>
			return;	//如果帧头不对
 8001390:	bf00      	nop
		}
	}
}
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bdb0      	pop	{r4, r5, r7, pc}
 8001398:	20000740 	.word	0x20000740
 800139c:	20000680 	.word	0x20000680
 80013a0:	47000000 	.word	0x47000000

080013a4 <PidInit>:
PID_TypeDef A, B, C, D;


//初始化PID各项参数
static void PidInit(PID_TypeDef *Wheel)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
	Wheel->Target_value = 0.0;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	f04f 0200 	mov.w	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
	Wheel->Current_value = 0.0;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	f04f 0200 	mov.w	r2, #0
 80013ba:	605a      	str	r2, [r3, #4]
	Wheel->PWM = _IniPWM;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	4a11      	ldr	r2, [pc, #68]	; (8001404 <PidInit+0x60>)
 80013c0:	609a      	str	r2, [r3, #8]
	Wheel->Err = 0.0;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	f04f 0200 	mov.w	r2, #0
 80013c8:	60da      	str	r2, [r3, #12]
	Wheel->Last_Err = 0.0;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	f04f 0200 	mov.w	r2, #0
 80013d0:	611a      	str	r2, [r3, #16]
	Wheel->output = 0.0;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	f04f 0200 	mov.w	r2, #0
 80013d8:	621a      	str	r2, [r3, #32]
	Wheel->integral = 0.0;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	f04f 0200 	mov.w	r2, #0
 80013e0:	625a      	str	r2, [r3, #36]	; 0x24
	Wheel->Kp = _KP;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a08      	ldr	r2, [pc, #32]	; (8001408 <PidInit+0x64>)
 80013e6:	615a      	str	r2, [r3, #20]
	Wheel->Ki = _KI;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	f04f 0200 	mov.w	r2, #0
 80013ee:	619a      	str	r2, [r3, #24]
	Wheel->Kd = _KD;     //比例常数，积分常数，微分常数的调整非常重要，这里的参数是经过几次试验得出的经验参数
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	4a06      	ldr	r2, [pc, #24]	; (800140c <PidInit+0x68>)
 80013f4:	61da      	str	r2, [r3, #28]
}
 80013f6:	bf00      	nop
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	447a0000 	.word	0x447a0000
 8001408:	41f00000 	.word	0x41f00000
 800140c:	40400000 	.word	0x40400000

08001410 <PidWheels_Init>:

//初始化各轮子
void PidWheels_Init(void)//初始化各轮子Pid参数
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
	PidInit(&A);
 8001414:	4806      	ldr	r0, [pc, #24]	; (8001430 <PidWheels_Init+0x20>)
 8001416:	f7ff ffc5 	bl	80013a4 <PidInit>
	PidInit(&B);
 800141a:	4806      	ldr	r0, [pc, #24]	; (8001434 <PidWheels_Init+0x24>)
 800141c:	f7ff ffc2 	bl	80013a4 <PidInit>
	PidInit(&C);
 8001420:	4805      	ldr	r0, [pc, #20]	; (8001438 <PidWheels_Init+0x28>)
 8001422:	f7ff ffbf 	bl	80013a4 <PidInit>
	PidInit(&D);
 8001426:	4805      	ldr	r0, [pc, #20]	; (800143c <PidWheels_Init+0x2c>)
 8001428:	f7ff ffbc 	bl	80013a4 <PidInit>
}
 800142c:	bf00      	nop
 800142e:	bd80      	pop	{r7, pc}
 8001430:	200006f0 	.word	0x200006f0
 8001434:	20000718 	.word	0x20000718
 8001438:	200006a0 	.word	0x200006a0
 800143c:	200006c8 	.word	0x200006c8

08001440 <GetCurrent>:

//获取不同轮子的当前值
static void GetCurrent(PID_TypeDef *wheel)//根据不同的车轮获取相同的速度
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
	if(wheel == &A) wheel->Current_value = Motor_Speed.A;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	4a12      	ldr	r2, [pc, #72]	; (8001494 <GetCurrent+0x54>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d103      	bne.n	8001458 <GetCurrent+0x18>
 8001450:	4b11      	ldr	r3, [pc, #68]	; (8001498 <GetCurrent+0x58>)
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	605a      	str	r2, [r3, #4]
	if(wheel == &B) wheel->Current_value = Motor_Speed.B;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	4a10      	ldr	r2, [pc, #64]	; (800149c <GetCurrent+0x5c>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d103      	bne.n	8001468 <GetCurrent+0x28>
 8001460:	4b0d      	ldr	r3, [pc, #52]	; (8001498 <GetCurrent+0x58>)
 8001462:	685a      	ldr	r2, [r3, #4]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	605a      	str	r2, [r3, #4]
	if(wheel == &C) wheel->Current_value = Motor_Speed.C;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	4a0d      	ldr	r2, [pc, #52]	; (80014a0 <GetCurrent+0x60>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d103      	bne.n	8001478 <GetCurrent+0x38>
 8001470:	4b09      	ldr	r3, [pc, #36]	; (8001498 <GetCurrent+0x58>)
 8001472:	689a      	ldr	r2, [r3, #8]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	605a      	str	r2, [r3, #4]
	if(wheel == &D) wheel->Current_value = Motor_Speed.D;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	4a0a      	ldr	r2, [pc, #40]	; (80014a4 <GetCurrent+0x64>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d103      	bne.n	8001488 <GetCurrent+0x48>
 8001480:	4b05      	ldr	r3, [pc, #20]	; (8001498 <GetCurrent+0x58>)
 8001482:	68da      	ldr	r2, [r3, #12]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	605a      	str	r2, [r3, #4]
}
 8001488:	bf00      	nop
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr
 8001494:	200006f0 	.word	0x200006f0
 8001498:	20000630 	.word	0x20000630
 800149c:	20000718 	.word	0x20000718
 80014a0:	200006a0 	.word	0x200006a0
 80014a4:	200006c8 	.word	0x200006c8

080014a8 <limit>:



//限幅
static float limit(float val, int lim)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b085      	sub	sp, #20
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	ed87 0a01 	vstr	s0, [r7, #4]
 80014b2:	6038      	str	r0, [r7, #0]
	float limitout;
	if(val > lim) limitout = lim;
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	ee07 3a90 	vmov	s15, r3
 80014ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014be:	ed97 7a01 	vldr	s14, [r7, #4]
 80014c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ca:	dd07      	ble.n	80014dc <limit+0x34>
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	ee07 3a90 	vmov	s15, r3
 80014d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014d6:	edc7 7a03 	vstr	s15, [r7, #12]
 80014da:	e001      	b.n	80014e0 <limit+0x38>
	else limitout = val;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	60fb      	str	r3, [r7, #12]
	return limitout;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	ee07 3a90 	vmov	s15, r3
}
 80014e6:	eeb0 0a67 	vmov.f32	s0, s15
 80014ea:	3714      	adds	r7, #20
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <Pid_Operate>:


static void Pid_Operate(PID_TypeDef *Wheel, float target)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	ed87 0a00 	vstr	s0, [r7]

	Wheel->Target_value = target;  //确定目标值
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	683a      	ldr	r2, [r7, #0]
 8001504:	601a      	str	r2, [r3, #0]
	GetCurrent(Wheel);
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f7ff ff9a 	bl	8001440 <GetCurrent>
	Wheel->Err = Wheel->Target_value - Wheel->Current_value;  //计算偏差量
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	ed93 7a00 	vldr	s14, [r3]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	edd3 7a01 	vldr	s15, [r3, #4]
 8001518:	ee77 7a67 	vsub.f32	s15, s14, s15
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	edc3 7a03 	vstr	s15, [r3, #12]
	Wheel->integral += Wheel->Err;  //计算和 但是对四轮调速用不到积分项，取消其不断累加防止溢出
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	edd3 7a03 	vldr	s15, [r3, #12]
 800152e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	Wheel->output = Wheel->Kp*Wheel->Err + Wheel->Ki*Wheel->integral + Wheel->Kd* (Wheel->Err-Wheel->Last_Err);  //PID运算
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	ed93 7a05 	vldr	s14, [r3, #20]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	edd3 7a03 	vldr	s15, [r3, #12]
 8001544:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	edd3 6a06 	vldr	s13, [r3, #24]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001554:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001558:	ee37 7a27 	vadd.f32	s14, s14, s15
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	edd3 6a07 	vldr	s13, [r3, #28]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	ed93 6a03 	vldr	s12, [r3, #12]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	edd3 7a04 	vldr	s15, [r3, #16]
 800156e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001572:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001576:	ee77 7a27 	vadd.f32	s15, s14, s15
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	edc3 7a08 	vstr	s15, [r3, #32]
	Wheel->Last_Err = Wheel->Err;  //将当前误差值存入上一误差值
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	68da      	ldr	r2, [r3, #12]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	611a      	str	r2, [r3, #16]
	Wheel->PWM = limit(Wheel->output,800) + Wheel->PWM;  //将当前值更新为PID的输出值//输出限幅
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	edd3 7a08 	vldr	s15, [r3, #32]
 800158e:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001592:	eeb0 0a67 	vmov.f32	s0, s15
 8001596:	f7ff ff87 	bl	80014a8 <limit>
 800159a:	eeb0 7a40 	vmov.f32	s14, s0
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	edd3 7a02 	vldr	s15, [r3, #8]
 80015a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	edc3 7a02 	vstr	s15, [r3, #8]
	Wheel->PWM = limit(Wheel->PWM, _MaxPWM);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	edd3 7a02 	vldr	s15, [r3, #8]
 80015b4:	f241 7070 	movw	r0, #6000	; 0x1770
 80015b8:	eeb0 0a67 	vmov.f32	s0, s15
 80015bc:	f7ff ff74 	bl	80014a8 <limit>
 80015c0:	eef0 7a40 	vmov.f32	s15, s0
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80015ca:	bf00      	nop
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
	...

080015d4 <pid_speed>:



void pid_speed(float targetA, float targetB, float targetC, float targetD)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0
 80015da:	ed87 0a03 	vstr	s0, [r7, #12]
 80015de:	edc7 0a02 	vstr	s1, [r7, #8]
 80015e2:	ed87 1a01 	vstr	s2, [r7, #4]
 80015e6:	edc7 1a00 	vstr	s3, [r7]
		Pid_Operate(&A, targetA);MOTOR_PWM_OUTA(A.PWM);//进行Pid运算后调整PWM
 80015ea:	ed97 0a03 	vldr	s0, [r7, #12]
 80015ee:	481e      	ldr	r0, [pc, #120]	; (8001668 <pid_speed+0x94>)
 80015f0:	f7ff ff80 	bl	80014f4 <Pid_Operate>
 80015f4:	4b1c      	ldr	r3, [pc, #112]	; (8001668 <pid_speed+0x94>)
 80015f6:	edd3 7a02 	vldr	s15, [r3, #8]
 80015fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015fe:	ee17 0a90 	vmov	r0, s15
 8001602:	f000 fa71 	bl	8001ae8 <MOTOR_PWM_OUTA>
		Pid_Operate(&B, targetB);MOTOR_PWM_OUTB(B.PWM);
 8001606:	ed97 0a02 	vldr	s0, [r7, #8]
 800160a:	4818      	ldr	r0, [pc, #96]	; (800166c <pid_speed+0x98>)
 800160c:	f7ff ff72 	bl	80014f4 <Pid_Operate>
 8001610:	4b16      	ldr	r3, [pc, #88]	; (800166c <pid_speed+0x98>)
 8001612:	edd3 7a02 	vldr	s15, [r3, #8]
 8001616:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800161a:	ee17 0a90 	vmov	r0, s15
 800161e:	f000 fa73 	bl	8001b08 <MOTOR_PWM_OUTB>
		Pid_Operate(&C, targetC);MOTOR_PWM_OUTC(C.PWM);
 8001622:	ed97 0a01 	vldr	s0, [r7, #4]
 8001626:	4812      	ldr	r0, [pc, #72]	; (8001670 <pid_speed+0x9c>)
 8001628:	f7ff ff64 	bl	80014f4 <Pid_Operate>
 800162c:	4b10      	ldr	r3, [pc, #64]	; (8001670 <pid_speed+0x9c>)
 800162e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001632:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001636:	ee17 0a90 	vmov	r0, s15
 800163a:	f000 fa75 	bl	8001b28 <MOTOR_PWM_OUTC>
		Pid_Operate(&D, targetD);MOTOR_PWM_OUTD(D.PWM);
 800163e:	ed97 0a00 	vldr	s0, [r7]
 8001642:	480c      	ldr	r0, [pc, #48]	; (8001674 <pid_speed+0xa0>)
 8001644:	f7ff ff56 	bl	80014f4 <Pid_Operate>
 8001648:	4b0a      	ldr	r3, [pc, #40]	; (8001674 <pid_speed+0xa0>)
 800164a:	edd3 7a02 	vldr	s15, [r3, #8]
 800164e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001652:	ee17 0a90 	vmov	r0, s15
 8001656:	f000 fa77 	bl	8001b48 <MOTOR_PWM_OUTD>
		HAL_Delay(100);
 800165a:	2064      	movs	r0, #100	; 0x64
 800165c:	f003 fb7e 	bl	8004d5c <HAL_Delay>
}
 8001660:	bf00      	nop
 8001662:	3710      	adds	r7, #16
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	200006f0 	.word	0x200006f0
 800166c:	20000718 	.word	0x20000718
 8001670:	200006a0 	.word	0x200006a0
 8001674:	200006c8 	.word	0x200006c8

08001678 <ssd1306_Reset>:
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
}

#elif defined(SSD1306_USE_SPI)

void ssd1306_Reset(void) {
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
    // CS = High (not selected)
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET);
 800167c:	2201      	movs	r2, #1
 800167e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001682:	480b      	ldr	r0, [pc, #44]	; (80016b0 <ssd1306_Reset+0x38>)
 8001684:	f004 fa56 	bl	8005b34 <HAL_GPIO_WritePin>

    // Reset the OLED
    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_RESET);
 8001688:	2200      	movs	r2, #0
 800168a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800168e:	4809      	ldr	r0, [pc, #36]	; (80016b4 <ssd1306_Reset+0x3c>)
 8001690:	f004 fa50 	bl	8005b34 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8001694:	200a      	movs	r0, #10
 8001696:	f003 fb61 	bl	8004d5c <HAL_Delay>
    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_SET);
 800169a:	2201      	movs	r2, #1
 800169c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016a0:	4804      	ldr	r0, [pc, #16]	; (80016b4 <ssd1306_Reset+0x3c>)
 80016a2:	f004 fa47 	bl	8005b34 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80016a6:	200a      	movs	r0, #10
 80016a8:	f003 fb58 	bl	8004d5c <HAL_Delay>
}
 80016ac:	bf00      	nop
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	40021400 	.word	0x40021400
 80016b4:	40020000 	.word	0x40020000

080016b8 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4603      	mov	r3, r0
 80016c0:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 80016c2:	2200      	movs	r2, #0
 80016c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016c8:	480c      	ldr	r0, [pc, #48]	; (80016fc <ssd1306_WriteCommand+0x44>)
 80016ca:	f004 fa33 	bl	8005b34 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_RESET); // command
 80016ce:	2200      	movs	r2, #0
 80016d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016d4:	480a      	ldr	r0, [pc, #40]	; (8001700 <ssd1306_WriteCommand+0x48>)
 80016d6:	f004 fa2d 	bl	8005b34 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, (uint8_t *) &byte, 1, HAL_MAX_DELAY);
 80016da:	1df9      	adds	r1, r7, #7
 80016dc:	f04f 33ff 	mov.w	r3, #4294967295
 80016e0:	2201      	movs	r2, #1
 80016e2:	4808      	ldr	r0, [pc, #32]	; (8001704 <ssd1306_WriteCommand+0x4c>)
 80016e4:	f005 f881 	bl	80067ea <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 80016e8:	2201      	movs	r2, #1
 80016ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016ee:	4803      	ldr	r0, [pc, #12]	; (80016fc <ssd1306_WriteCommand+0x44>)
 80016f0:	f004 fa20 	bl	8005b34 <HAL_GPIO_WritePin>
}
 80016f4:	bf00      	nop
 80016f6:	3708      	adds	r7, #8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	40021400 	.word	0x40021400
 8001700:	40020400 	.word	0x40020400
 8001704:	200008c4 	.word	0x200008c4

08001708 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 8001712:	2200      	movs	r2, #0
 8001714:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001718:	480d      	ldr	r0, [pc, #52]	; (8001750 <ssd1306_WriteData+0x48>)
 800171a:	f004 fa0b 	bl	8005b34 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_SET); // data
 800171e:	2201      	movs	r2, #1
 8001720:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001724:	480b      	ldr	r0, [pc, #44]	; (8001754 <ssd1306_WriteData+0x4c>)
 8001726:	f004 fa05 	bl	8005b34 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, buffer, buff_size, HAL_MAX_DELAY);
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	b29a      	uxth	r2, r3
 800172e:	f04f 33ff 	mov.w	r3, #4294967295
 8001732:	6879      	ldr	r1, [r7, #4]
 8001734:	4808      	ldr	r0, [pc, #32]	; (8001758 <ssd1306_WriteData+0x50>)
 8001736:	f005 f858 	bl	80067ea <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 800173a:	2201      	movs	r2, #1
 800173c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001740:	4803      	ldr	r0, [pc, #12]	; (8001750 <ssd1306_WriteData+0x48>)
 8001742:	f004 f9f7 	bl	8005b34 <HAL_GPIO_WritePin>
}
 8001746:	bf00      	nop
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	40021400 	.word	0x40021400
 8001754:	40020400 	.word	0x40020400
 8001758:	200008c4 	.word	0x200008c4

0800175c <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001760:	f7ff ff8a 	bl	8001678 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001764:	2064      	movs	r0, #100	; 0x64
 8001766:	f003 faf9 	bl	8004d5c <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800176a:	2000      	movs	r0, #0
 800176c:	f000 f8c0 	bl	80018f0 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001770:	2020      	movs	r0, #32
 8001772:	f7ff ffa1 	bl	80016b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001776:	2000      	movs	r0, #0
 8001778:	f7ff ff9e 	bl	80016b8 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800177c:	20b0      	movs	r0, #176	; 0xb0
 800177e:	f7ff ff9b 	bl	80016b8 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001782:	20c8      	movs	r0, #200	; 0xc8
 8001784:	f7ff ff98 	bl	80016b8 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001788:	2000      	movs	r0, #0
 800178a:	f7ff ff95 	bl	80016b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800178e:	2010      	movs	r0, #16
 8001790:	f7ff ff92 	bl	80016b8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001794:	2040      	movs	r0, #64	; 0x40
 8001796:	f7ff ff8f 	bl	80016b8 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800179a:	20ff      	movs	r0, #255	; 0xff
 800179c:	f000 f894 	bl	80018c8 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80017a0:	20a1      	movs	r0, #161	; 0xa1
 80017a2:	f7ff ff89 	bl	80016b8 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80017a6:	20a6      	movs	r0, #166	; 0xa6
 80017a8:	f7ff ff86 	bl	80016b8 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80017ac:	20a8      	movs	r0, #168	; 0xa8
 80017ae:	f7ff ff83 	bl	80016b8 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80017b2:	203f      	movs	r0, #63	; 0x3f
 80017b4:	f7ff ff80 	bl	80016b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80017b8:	20a4      	movs	r0, #164	; 0xa4
 80017ba:	f7ff ff7d 	bl	80016b8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80017be:	20d3      	movs	r0, #211	; 0xd3
 80017c0:	f7ff ff7a 	bl	80016b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80017c4:	2000      	movs	r0, #0
 80017c6:	f7ff ff77 	bl	80016b8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80017ca:	20d5      	movs	r0, #213	; 0xd5
 80017cc:	f7ff ff74 	bl	80016b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80017d0:	20f0      	movs	r0, #240	; 0xf0
 80017d2:	f7ff ff71 	bl	80016b8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80017d6:	20d9      	movs	r0, #217	; 0xd9
 80017d8:	f7ff ff6e 	bl	80016b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80017dc:	2022      	movs	r0, #34	; 0x22
 80017de:	f7ff ff6b 	bl	80016b8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80017e2:	20da      	movs	r0, #218	; 0xda
 80017e4:	f7ff ff68 	bl	80016b8 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80017e8:	2012      	movs	r0, #18
 80017ea:	f7ff ff65 	bl	80016b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80017ee:	20db      	movs	r0, #219	; 0xdb
 80017f0:	f7ff ff62 	bl	80016b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80017f4:	2020      	movs	r0, #32
 80017f6:	f7ff ff5f 	bl	80016b8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80017fa:	208d      	movs	r0, #141	; 0x8d
 80017fc:	f7ff ff5c 	bl	80016b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001800:	2014      	movs	r0, #20
 8001802:	f7ff ff59 	bl	80016b8 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001806:	2001      	movs	r0, #1
 8001808:	f000 f872 	bl	80018f0 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 800180c:	2000      	movs	r0, #0
 800180e:	f000 f80f 	bl	8001830 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001812:	f000 f831 	bl	8001878 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001816:	4b05      	ldr	r3, [pc, #20]	; (800182c <ssd1306_Init+0xd0>)
 8001818:	2200      	movs	r2, #0
 800181a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800181c:	4b03      	ldr	r3, [pc, #12]	; (800182c <ssd1306_Init+0xd0>)
 800181e:	2200      	movs	r2, #0
 8001820:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001822:	4b02      	ldr	r3, [pc, #8]	; (800182c <ssd1306_Init+0xd0>)
 8001824:	2201      	movs	r2, #1
 8001826:	715a      	strb	r2, [r3, #5]
}
 8001828:	bf00      	nop
 800182a:	bd80      	pop	{r7, pc}
 800182c:	20000628 	.word	0x20000628

08001830 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8001830:	b480      	push	{r7}
 8001832:	b085      	sub	sp, #20
 8001834:	af00      	add	r7, sp, #0
 8001836:	4603      	mov	r3, r0
 8001838:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800183a:	2300      	movs	r3, #0
 800183c:	60fb      	str	r3, [r7, #12]
 800183e:	e00d      	b.n	800185c <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001840:	79fb      	ldrb	r3, [r7, #7]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d101      	bne.n	800184a <ssd1306_Fill+0x1a>
 8001846:	2100      	movs	r1, #0
 8001848:	e000      	b.n	800184c <ssd1306_Fill+0x1c>
 800184a:	21ff      	movs	r1, #255	; 0xff
 800184c:	4a09      	ldr	r2, [pc, #36]	; (8001874 <ssd1306_Fill+0x44>)
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	4413      	add	r3, r2
 8001852:	460a      	mov	r2, r1
 8001854:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	3301      	adds	r3, #1
 800185a:	60fb      	str	r3, [r7, #12]
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001862:	d3ed      	bcc.n	8001840 <ssd1306_Fill+0x10>
    }
}
 8001864:	bf00      	nop
 8001866:	bf00      	nop
 8001868:	3714      	adds	r7, #20
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	20000228 	.word	0x20000228

08001878 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800187e:	2300      	movs	r3, #0
 8001880:	71fb      	strb	r3, [r7, #7]
 8001882:	e016      	b.n	80018b2 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001884:	79fb      	ldrb	r3, [r7, #7]
 8001886:	3b50      	subs	r3, #80	; 0x50
 8001888:	b2db      	uxtb	r3, r3
 800188a:	4618      	mov	r0, r3
 800188c:	f7ff ff14 	bl	80016b8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8001890:	2000      	movs	r0, #0
 8001892:	f7ff ff11 	bl	80016b8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8001896:	2010      	movs	r0, #16
 8001898:	f7ff ff0e 	bl	80016b8 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 800189c:	79fb      	ldrb	r3, [r7, #7]
 800189e:	01db      	lsls	r3, r3, #7
 80018a0:	4a08      	ldr	r2, [pc, #32]	; (80018c4 <ssd1306_UpdateScreen+0x4c>)
 80018a2:	4413      	add	r3, r2
 80018a4:	2180      	movs	r1, #128	; 0x80
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7ff ff2e 	bl	8001708 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80018ac:	79fb      	ldrb	r3, [r7, #7]
 80018ae:	3301      	adds	r3, #1
 80018b0:	71fb      	strb	r3, [r7, #7]
 80018b2:	79fb      	ldrb	r3, [r7, #7]
 80018b4:	2b07      	cmp	r3, #7
 80018b6:	d9e5      	bls.n	8001884 <ssd1306_UpdateScreen+0xc>
    }
}
 80018b8:	bf00      	nop
 80018ba:	bf00      	nop
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	20000228 	.word	0x20000228

080018c8 <ssd1306_SetContrast>:
  ssd1306_Line(x1,y2,x1,y1,color);

  return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	4603      	mov	r3, r0
 80018d0:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80018d2:	2381      	movs	r3, #129	; 0x81
 80018d4:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80018d6:	7bfb      	ldrb	r3, [r7, #15]
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff feed 	bl	80016b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80018de:	79fb      	ldrb	r3, [r7, #7]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff fee9 	bl	80016b8 <ssd1306_WriteCommand>
}
 80018e6:	bf00      	nop
 80018e8:	3710      	adds	r7, #16
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
	...

080018f0 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80018fa:	79fb      	ldrb	r3, [r7, #7]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d005      	beq.n	800190c <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001900:	23af      	movs	r3, #175	; 0xaf
 8001902:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001904:	4b08      	ldr	r3, [pc, #32]	; (8001928 <ssd1306_SetDisplayOn+0x38>)
 8001906:	2201      	movs	r2, #1
 8001908:	719a      	strb	r2, [r3, #6]
 800190a:	e004      	b.n	8001916 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 800190c:	23ae      	movs	r3, #174	; 0xae
 800190e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001910:	4b05      	ldr	r3, [pc, #20]	; (8001928 <ssd1306_SetDisplayOn+0x38>)
 8001912:	2200      	movs	r2, #0
 8001914:	719a      	strb	r2, [r3, #6]
    }
    ssd1306_WriteCommand(value);
 8001916:	7bfb      	ldrb	r3, [r7, #15]
 8001918:	4618      	mov	r0, r3
 800191a:	f7ff fecd 	bl	80016b8 <ssd1306_WriteCommand>
}
 800191e:	bf00      	nop
 8001920:	3710      	adds	r7, #16
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	20000628 	.word	0x20000628

0800192c <ToRound>:
int ToRoundFlag = 1;
float TargetVal;


void ToRound(int direction ,float r, float A,float B ,float C ,float D)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b086      	sub	sp, #24
 8001930:	af00      	add	r7, sp, #0
 8001932:	6178      	str	r0, [r7, #20]
 8001934:	ed87 0a04 	vstr	s0, [r7, #16]
 8001938:	edc7 0a03 	vstr	s1, [r7, #12]
 800193c:	ed87 1a02 	vstr	s2, [r7, #8]
 8001940:	edc7 1a01 	vstr	s3, [r7, #4]
 8001944:	ed87 2a00 	vstr	s4, [r7]
	MotorRevCon.A = 0; MotorRevCon.B = 0; MotorRevCon.C = 0; MotorRevCon.D = 0;
 8001948:	4b26      	ldr	r3, [pc, #152]	; (80019e4 <ToRound+0xb8>)
 800194a:	f04f 0200 	mov.w	r2, #0
 800194e:	601a      	str	r2, [r3, #0]
 8001950:	4b24      	ldr	r3, [pc, #144]	; (80019e4 <ToRound+0xb8>)
 8001952:	f04f 0200 	mov.w	r2, #0
 8001956:	605a      	str	r2, [r3, #4]
 8001958:	4b22      	ldr	r3, [pc, #136]	; (80019e4 <ToRound+0xb8>)
 800195a:	f04f 0200 	mov.w	r2, #0
 800195e:	609a      	str	r2, [r3, #8]
 8001960:	4b20      	ldr	r3, [pc, #128]	; (80019e4 <ToRound+0xb8>)
 8001962:	f04f 0200 	mov.w	r2, #0
 8001966:	60da      	str	r2, [r3, #12]

	if(direction){
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d002      	beq.n	8001974 <ToRound+0x48>
		Car_Back();
 800196e:	f000 f9f1 	bl	8001d54 <Car_Back>
 8001972:	e001      	b.n	8001978 <ToRound+0x4c>
	}
	else
	{
		Car_Go();
 8001974:	f000 f9de 	bl	8001d34 <Car_Go>
	}
	PidWheels_Init();
 8001978:	f7ff fd4a 	bl	8001410 <PidWheels_Init>
	while(fabs( (MotorRevCon.A + MotorRevCon.B +MotorRevCon.C+MotorRevCon.D)/4 - r)>1)
 800197c:	e009      	b.n	8001992 <ToRound+0x66>
	{
		pid_speed(A, B, C, D);
 800197e:	edd7 1a00 	vldr	s3, [r7]
 8001982:	ed97 1a01 	vldr	s2, [r7, #4]
 8001986:	edd7 0a02 	vldr	s1, [r7, #8]
 800198a:	ed97 0a03 	vldr	s0, [r7, #12]
 800198e:	f7ff fe21 	bl	80015d4 <pid_speed>
	while(fabs( (MotorRevCon.A + MotorRevCon.B +MotorRevCon.C+MotorRevCon.D)/4 - r)>1)
 8001992:	4b14      	ldr	r3, [pc, #80]	; (80019e4 <ToRound+0xb8>)
 8001994:	ed93 7a00 	vldr	s14, [r3]
 8001998:	4b12      	ldr	r3, [pc, #72]	; (80019e4 <ToRound+0xb8>)
 800199a:	edd3 7a01 	vldr	s15, [r3, #4]
 800199e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019a2:	4b10      	ldr	r3, [pc, #64]	; (80019e4 <ToRound+0xb8>)
 80019a4:	edd3 7a02 	vldr	s15, [r3, #8]
 80019a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019ac:	4b0d      	ldr	r3, [pc, #52]	; (80019e4 <ToRound+0xb8>)
 80019ae:	edd3 7a03 	vldr	s15, [r3, #12]
 80019b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019b6:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80019ba:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80019be:	edd7 7a04 	vldr	s15, [r7, #16]
 80019c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019c6:	eef0 7ae7 	vabs.f32	s15, s15
 80019ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80019ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019d6:	dcd2      	bgt.n	800197e <ToRound+0x52>
	}
	Car_Stop();
 80019d8:	f000 f9cc 	bl	8001d74 <Car_Stop>
}
 80019dc:	bf00      	nop
 80019de:	3718      	adds	r7, #24
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	20000640 	.word	0x20000640

080019e8 <InitRev>:


void InitRev(void)//归零计数
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
	MotorRevCon.A = 0; MotorRevCon.B = 0; MotorRevCon.C = 0; MotorRevCon.D = 0;
 80019ec:	4b0a      	ldr	r3, [pc, #40]	; (8001a18 <InitRev+0x30>)
 80019ee:	f04f 0200 	mov.w	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	4b08      	ldr	r3, [pc, #32]	; (8001a18 <InitRev+0x30>)
 80019f6:	f04f 0200 	mov.w	r2, #0
 80019fa:	605a      	str	r2, [r3, #4]
 80019fc:	4b06      	ldr	r3, [pc, #24]	; (8001a18 <InitRev+0x30>)
 80019fe:	f04f 0200 	mov.w	r2, #0
 8001a02:	609a      	str	r2, [r3, #8]
 8001a04:	4b04      	ldr	r3, [pc, #16]	; (8001a18 <InitRev+0x30>)
 8001a06:	f04f 0200 	mov.w	r2, #0
 8001a0a:	60da      	str	r2, [r3, #12]
}
 8001a0c:	bf00      	nop
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	20000640 	.word	0x20000640

08001a1c <zkb_init>:
int car_counterclockwise = car_counterclockwise_init;
int car_differential_turn_high = car_differential_turn_high_init;
int car_differential_turn_low = car_differential_turn_low_init;

void zkb_init(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
	car_forward = car_forward_init;
 8001a20:	4b1a      	ldr	r3, [pc, #104]	; (8001a8c <zkb_init+0x70>)
 8001a22:	f242 7210 	movw	r2, #10000	; 0x2710
 8001a26:	601a      	str	r2, [r3, #0]
	car_backward = car_backward_init;
 8001a28:	4b19      	ldr	r3, [pc, #100]	; (8001a90 <zkb_init+0x74>)
 8001a2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a2e:	601a      	str	r2, [r3, #0]
	car_leftward = car_leftward_init;
 8001a30:	4b18      	ldr	r3, [pc, #96]	; (8001a94 <zkb_init+0x78>)
 8001a32:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a36:	601a      	str	r2, [r3, #0]
	car_rightward = car_rightward_init;
 8001a38:	4b17      	ldr	r3, [pc, #92]	; (8001a98 <zkb_init+0x7c>)
 8001a3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a3e:	601a      	str	r2, [r3, #0]
	car_leftforward = car_leftforward_init;
 8001a40:	4b16      	ldr	r3, [pc, #88]	; (8001a9c <zkb_init+0x80>)
 8001a42:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a46:	601a      	str	r2, [r3, #0]
	car_rightforward = car_rightforward_init;
 8001a48:	4b15      	ldr	r3, [pc, #84]	; (8001aa0 <zkb_init+0x84>)
 8001a4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a4e:	601a      	str	r2, [r3, #0]
	car_leftbackward = car_leftbackward_init;
 8001a50:	4b14      	ldr	r3, [pc, #80]	; (8001aa4 <zkb_init+0x88>)
 8001a52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a56:	601a      	str	r2, [r3, #0]
	car_rightbackward = car_rightbackward_init;
 8001a58:	4b13      	ldr	r3, [pc, #76]	; (8001aa8 <zkb_init+0x8c>)
 8001a5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a5e:	601a      	str	r2, [r3, #0]
	car_clockwise = car_clockwise_init;
 8001a60:	4b12      	ldr	r3, [pc, #72]	; (8001aac <zkb_init+0x90>)
 8001a62:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001a66:	601a      	str	r2, [r3, #0]
	car_counterclockwise = car_counterclockwise_init;
 8001a68:	4b11      	ldr	r3, [pc, #68]	; (8001ab0 <zkb_init+0x94>)
 8001a6a:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001a6e:	601a      	str	r2, [r3, #0]
	car_differential_turn_high = car_differential_turn_high_init;
 8001a70:	4b10      	ldr	r3, [pc, #64]	; (8001ab4 <zkb_init+0x98>)
 8001a72:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001a76:	601a      	str	r2, [r3, #0]
	car_differential_turn_low = car_differential_turn_low_init;
 8001a78:	4b0f      	ldr	r3, [pc, #60]	; (8001ab8 <zkb_init+0x9c>)
 8001a7a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a7e:	601a      	str	r2, [r3, #0]
}
 8001a80:	bf00      	nop
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	20000000 	.word	0x20000000
 8001a90:	20000004 	.word	0x20000004
 8001a94:	20000008 	.word	0x20000008
 8001a98:	2000000c 	.word	0x2000000c
 8001a9c:	20000010 	.word	0x20000010
 8001aa0:	20000014 	.word	0x20000014
 8001aa4:	20000018 	.word	0x20000018
 8001aa8:	2000001c 	.word	0x2000001c
 8001aac:	20000020 	.word	0x20000020
 8001ab0:	20000024 	.word	0x20000024
 8001ab4:	20000028 	.word	0x20000028
 8001ab8:	2000002c 	.word	0x2000002c

08001abc <motor_pwm_init>:
//数值 0-8400  占空比=设置值/3600
//电机驱动L298N建议设置65%以上占空比
//***************************占空比调节***************************//

void motor_pwm_init()
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);    //�?启pwm输出
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	4808      	ldr	r0, [pc, #32]	; (8001ae4 <motor_pwm_init+0x28>)
 8001ac4:	f005 f9a8 	bl	8006e18 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);    //�?启pwm输出
 8001ac8:	2104      	movs	r1, #4
 8001aca:	4806      	ldr	r0, [pc, #24]	; (8001ae4 <motor_pwm_init+0x28>)
 8001acc:	f005 f9a4 	bl	8006e18 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);    //�?启pwm输出
 8001ad0:	2108      	movs	r1, #8
 8001ad2:	4804      	ldr	r0, [pc, #16]	; (8001ae4 <motor_pwm_init+0x28>)
 8001ad4:	f005 f9a0 	bl	8006e18 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);    //�?启pwm输出
 8001ad8:	210c      	movs	r1, #12
 8001ada:	4802      	ldr	r0, [pc, #8]	; (8001ae4 <motor_pwm_init+0x28>)
 8001adc:	f005 f99c 	bl	8006e18 <HAL_TIM_PWM_Start>

	//红外遥控定时�?
	//	HAL_TIM_Base_Start_IT(&htim1);     //定时器更新时、产生中�?
	//	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);    //启动输入捕获中断
}
 8001ae0:	bf00      	nop
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	20000a3c 	.word	0x20000a3c

08001ae8 <MOTOR_PWM_OUTA>:

void MOTOR_PWM_OUTA(int ZKB_A)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,ZKB_A);
 8001af0:	4b04      	ldr	r3, [pc, #16]	; (8001b04 <MOTOR_PWM_OUTA+0x1c>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001af8:	bf00      	nop
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr
 8001b04:	20000a3c 	.word	0x20000a3c

08001b08 <MOTOR_PWM_OUTB>:
void MOTOR_PWM_OUTB(int ZKB_B)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,ZKB_B);
 8001b10:	4b04      	ldr	r3, [pc, #16]	; (8001b24 <MOTOR_PWM_OUTB+0x1c>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001b18:	bf00      	nop
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr
 8001b24:	20000a3c 	.word	0x20000a3c

08001b28 <MOTOR_PWM_OUTC>:
void MOTOR_PWM_OUTC(int ZKB_C)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4,ZKB_C);
 8001b30:	4b04      	ldr	r3, [pc, #16]	; (8001b44 <MOTOR_PWM_OUTC+0x1c>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001b38:	bf00      	nop
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr
 8001b44:	20000a3c 	.word	0x20000a3c

08001b48 <MOTOR_PWM_OUTD>:
void MOTOR_PWM_OUTD(int ZKB_D)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,ZKB_D);
 8001b50:	4b04      	ldr	r3, [pc, #16]	; (8001b64 <MOTOR_PWM_OUTD+0x1c>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001b58:	bf00      	nop
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr
 8001b64:	20000a3c 	.word	0x20000a3c

08001b68 <MOTOR_PWM_Out>:

/*******************四个轮子占空比调节********************
 *
 */
void MOTOR_PWM_Out(int ZKB_A,int ZKB_B,int ZKB_C,int ZKB_D)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	60f8      	str	r0, [r7, #12]
 8001b70:	60b9      	str	r1, [r7, #8]
 8001b72:	607a      	str	r2, [r7, #4]
 8001b74:	603b      	str	r3, [r7, #0]
	//A轮：左前轮
	MOTOR_PWM_OUTA(ZKB_A);
 8001b76:	68f8      	ldr	r0, [r7, #12]
 8001b78:	f7ff ffb6 	bl	8001ae8 <MOTOR_PWM_OUTA>
	//B轮：右前轮
	MOTOR_PWM_OUTB(ZKB_B);
 8001b7c:	68b8      	ldr	r0, [r7, #8]
 8001b7e:	f7ff ffc3 	bl	8001b08 <MOTOR_PWM_OUTB>
	//C轮：右后轮
	MOTOR_PWM_OUTC(ZKB_C);
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f7ff ffd0 	bl	8001b28 <MOTOR_PWM_OUTC>
	//D轮：左后轮
	MOTOR_PWM_OUTD(ZKB_D);
 8001b88:	6838      	ldr	r0, [r7, #0]
 8001b8a:	f7ff ffdd 	bl	8001b48 <MOTOR_PWM_OUTD>
}
 8001b8e:	bf00      	nop
 8001b90:	3710      	adds	r7, #16
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
	...

08001b98 <MOTOR_A>:
}


//左前A电机
void MOTOR_A(char state)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	71fb      	strb	r3, [r7, #7]
	if(state == GO)//左前电机前进
 8001ba2:	79fb      	ldrb	r3, [r7, #7]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d109      	bne.n	8001bbc <MOTOR_A+0x24>
	{
		HAL_GPIO_WritePin(GPIOG,GPIO_PIN_3, SET);
 8001ba8:	2201      	movs	r2, #1
 8001baa:	2108      	movs	r1, #8
 8001bac:	4812      	ldr	r0, [pc, #72]	; (8001bf8 <MOTOR_A+0x60>)
 8001bae:	f003 ffc1 	bl	8005b34 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOG,GPIO_PIN_2,RESET);
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	2104      	movs	r1, #4
 8001bb6:	4810      	ldr	r0, [pc, #64]	; (8001bf8 <MOTOR_A+0x60>)
 8001bb8:	f003 ffbc 	bl	8005b34 <HAL_GPIO_WritePin>
	}
	if(state == BACK)//左前电机后退
 8001bbc:	79fb      	ldrb	r3, [r7, #7]
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d109      	bne.n	8001bd6 <MOTOR_A+0x3e>
	{
		HAL_GPIO_WritePin(GPIOG,GPIO_PIN_2, SET);
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	2104      	movs	r1, #4
 8001bc6:	480c      	ldr	r0, [pc, #48]	; (8001bf8 <MOTOR_A+0x60>)
 8001bc8:	f003 ffb4 	bl	8005b34 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOG,GPIO_PIN_3,RESET);
 8001bcc:	2200      	movs	r2, #0
 8001bce:	2108      	movs	r1, #8
 8001bd0:	4809      	ldr	r0, [pc, #36]	; (8001bf8 <MOTOR_A+0x60>)
 8001bd2:	f003 ffaf 	bl	8005b34 <HAL_GPIO_WritePin>
	}
	if(state == STOP)//停转
 8001bd6:	79fb      	ldrb	r3, [r7, #7]
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d109      	bne.n	8001bf0 <MOTOR_A+0x58>
	{
		HAL_GPIO_WritePin(GPIOG,GPIO_PIN_3,RESET);
 8001bdc:	2200      	movs	r2, #0
 8001bde:	2108      	movs	r1, #8
 8001be0:	4805      	ldr	r0, [pc, #20]	; (8001bf8 <MOTOR_A+0x60>)
 8001be2:	f003 ffa7 	bl	8005b34 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOG,GPIO_PIN_2,RESET);
 8001be6:	2200      	movs	r2, #0
 8001be8:	2104      	movs	r1, #4
 8001bea:	4803      	ldr	r0, [pc, #12]	; (8001bf8 <MOTOR_A+0x60>)
 8001bec:	f003 ffa2 	bl	8005b34 <HAL_GPIO_WritePin>
	}
}
 8001bf0:	bf00      	nop
 8001bf2:	3708      	adds	r7, #8
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	40021800 	.word	0x40021800

08001bfc <MOTOR_B>:

//右前B电机
void MOTOR_B(char state)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	4603      	mov	r3, r0
 8001c04:	71fb      	strb	r3, [r7, #7]
	if(state == GO)//右前电机前进
 8001c06:	79fb      	ldrb	r3, [r7, #7]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d109      	bne.n	8001c20 <MOTOR_B+0x24>
	{
		HAL_GPIO_WritePin(GPIOG,GPIO_PIN_4, SET);
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	2110      	movs	r1, #16
 8001c10:	4812      	ldr	r0, [pc, #72]	; (8001c5c <MOTOR_B+0x60>)
 8001c12:	f003 ff8f 	bl	8005b34 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOG,GPIO_PIN_5,RESET);
 8001c16:	2200      	movs	r2, #0
 8001c18:	2120      	movs	r1, #32
 8001c1a:	4810      	ldr	r0, [pc, #64]	; (8001c5c <MOTOR_B+0x60>)
 8001c1c:	f003 ff8a 	bl	8005b34 <HAL_GPIO_WritePin>
	}
	if(state == BACK)//右前电机后退
 8001c20:	79fb      	ldrb	r3, [r7, #7]
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d109      	bne.n	8001c3a <MOTOR_B+0x3e>
	{
		HAL_GPIO_WritePin(GPIOG,GPIO_PIN_5, SET);
 8001c26:	2201      	movs	r2, #1
 8001c28:	2120      	movs	r1, #32
 8001c2a:	480c      	ldr	r0, [pc, #48]	; (8001c5c <MOTOR_B+0x60>)
 8001c2c:	f003 ff82 	bl	8005b34 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOG,GPIO_PIN_4,RESET);
 8001c30:	2200      	movs	r2, #0
 8001c32:	2110      	movs	r1, #16
 8001c34:	4809      	ldr	r0, [pc, #36]	; (8001c5c <MOTOR_B+0x60>)
 8001c36:	f003 ff7d 	bl	8005b34 <HAL_GPIO_WritePin>

	}
	if(state == STOP)//停转
 8001c3a:	79fb      	ldrb	r3, [r7, #7]
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d109      	bne.n	8001c54 <MOTOR_B+0x58>
	{
		HAL_GPIO_WritePin(GPIOG,GPIO_PIN_5,RESET);
 8001c40:	2200      	movs	r2, #0
 8001c42:	2120      	movs	r1, #32
 8001c44:	4805      	ldr	r0, [pc, #20]	; (8001c5c <MOTOR_B+0x60>)
 8001c46:	f003 ff75 	bl	8005b34 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOG,GPIO_PIN_4,RESET);
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	2110      	movs	r1, #16
 8001c4e:	4803      	ldr	r0, [pc, #12]	; (8001c5c <MOTOR_B+0x60>)
 8001c50:	f003 ff70 	bl	8005b34 <HAL_GPIO_WritePin>
	}
}
 8001c54:	bf00      	nop
 8001c56:	3708      	adds	r7, #8
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	40021800 	.word	0x40021800

08001c60 <MOTOR_C>:

//左后C电机
void MOTOR_C(char state)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	4603      	mov	r3, r0
 8001c68:	71fb      	strb	r3, [r7, #7]
	if(state == GO)//右后电机前进
 8001c6a:	79fb      	ldrb	r3, [r7, #7]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d10a      	bne.n	8001c86 <MOTOR_C+0x26>
	{
		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_7, RESET);
 8001c70:	2200      	movs	r2, #0
 8001c72:	2180      	movs	r1, #128	; 0x80
 8001c74:	4814      	ldr	r0, [pc, #80]	; (8001cc8 <MOTOR_C+0x68>)
 8001c76:	f003 ff5d 	bl	8005b34 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOG,GPIO_PIN_8,SET);
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c80:	4812      	ldr	r0, [pc, #72]	; (8001ccc <MOTOR_C+0x6c>)
 8001c82:	f003 ff57 	bl	8005b34 <HAL_GPIO_WritePin>

	}
	if(state == BACK)//右后电机后退
 8001c86:	79fb      	ldrb	r3, [r7, #7]
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d10a      	bne.n	8001ca2 <MOTOR_C+0x42>
	{
		HAL_GPIO_WritePin(GPIOG,GPIO_PIN_8, RESET);
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c92:	480e      	ldr	r0, [pc, #56]	; (8001ccc <MOTOR_C+0x6c>)
 8001c94:	f003 ff4e 	bl	8005b34 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_7,SET);
 8001c98:	2201      	movs	r2, #1
 8001c9a:	2180      	movs	r1, #128	; 0x80
 8001c9c:	480a      	ldr	r0, [pc, #40]	; (8001cc8 <MOTOR_C+0x68>)
 8001c9e:	f003 ff49 	bl	8005b34 <HAL_GPIO_WritePin>
	}
	if(state == STOP)//停转
 8001ca2:	79fb      	ldrb	r3, [r7, #7]
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d10a      	bne.n	8001cbe <MOTOR_C+0x5e>
	{
		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_7,RESET);
 8001ca8:	2200      	movs	r2, #0
 8001caa:	2180      	movs	r1, #128	; 0x80
 8001cac:	4806      	ldr	r0, [pc, #24]	; (8001cc8 <MOTOR_C+0x68>)
 8001cae:	f003 ff41 	bl	8005b34 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOG,GPIO_PIN_8,RESET);
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cb8:	4804      	ldr	r0, [pc, #16]	; (8001ccc <MOTOR_C+0x6c>)
 8001cba:	f003 ff3b 	bl	8005b34 <HAL_GPIO_WritePin>
	}
}
 8001cbe:	bf00      	nop
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	40020c00 	.word	0x40020c00
 8001ccc:	40021800 	.word	0x40021800

08001cd0 <MOTOR_D>:

//右后D电机
void MOTOR_D(char state)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	71fb      	strb	r3, [r7, #7]
	if(state == GO)//左后电机前进
 8001cda:	79fb      	ldrb	r3, [r7, #7]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d109      	bne.n	8001cf4 <MOTOR_D+0x24>
	{
		HAL_GPIO_WritePin(GPIOG,GPIO_PIN_7, SET);
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	2180      	movs	r1, #128	; 0x80
 8001ce4:	4812      	ldr	r0, [pc, #72]	; (8001d30 <MOTOR_D+0x60>)
 8001ce6:	f003 ff25 	bl	8005b34 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOG,GPIO_PIN_6,RESET);
 8001cea:	2200      	movs	r2, #0
 8001cec:	2140      	movs	r1, #64	; 0x40
 8001cee:	4810      	ldr	r0, [pc, #64]	; (8001d30 <MOTOR_D+0x60>)
 8001cf0:	f003 ff20 	bl	8005b34 <HAL_GPIO_WritePin>
	}
	if(state == BACK)//左后电机后退
 8001cf4:	79fb      	ldrb	r3, [r7, #7]
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d109      	bne.n	8001d0e <MOTOR_D+0x3e>
	{
		HAL_GPIO_WritePin(GPIOG,GPIO_PIN_6, SET);
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	2140      	movs	r1, #64	; 0x40
 8001cfe:	480c      	ldr	r0, [pc, #48]	; (8001d30 <MOTOR_D+0x60>)
 8001d00:	f003 ff18 	bl	8005b34 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOG,GPIO_PIN_7,RESET);
 8001d04:	2200      	movs	r2, #0
 8001d06:	2180      	movs	r1, #128	; 0x80
 8001d08:	4809      	ldr	r0, [pc, #36]	; (8001d30 <MOTOR_D+0x60>)
 8001d0a:	f003 ff13 	bl	8005b34 <HAL_GPIO_WritePin>
	}
	if(state == STOP)//停转
 8001d0e:	79fb      	ldrb	r3, [r7, #7]
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d109      	bne.n	8001d28 <MOTOR_D+0x58>
	{
		HAL_GPIO_WritePin(GPIOG,GPIO_PIN_7,RESET);
 8001d14:	2200      	movs	r2, #0
 8001d16:	2180      	movs	r1, #128	; 0x80
 8001d18:	4805      	ldr	r0, [pc, #20]	; (8001d30 <MOTOR_D+0x60>)
 8001d1a:	f003 ff0b 	bl	8005b34 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOG,GPIO_PIN_6,RESET);
 8001d1e:	2200      	movs	r2, #0
 8001d20:	2140      	movs	r1, #64	; 0x40
 8001d22:	4803      	ldr	r0, [pc, #12]	; (8001d30 <MOTOR_D+0x60>)
 8001d24:	f003 ff06 	bl	8005b34 <HAL_GPIO_WritePin>
	}
}
 8001d28:	bf00      	nop
 8001d2a:	3708      	adds	r7, #8
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	40021800 	.word	0x40021800

08001d34 <Car_Go>:

//***************************前进***************************//
//只要配置INx()的状态就可以改变电机转动方向
void Car_Go(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
	//左前电机 前    //右前电机 前
	MOTOR_A(GO);       MOTOR_B(GO);
 8001d38:	2000      	movs	r0, #0
 8001d3a:	f7ff ff2d 	bl	8001b98 <MOTOR_A>
 8001d3e:	2000      	movs	r0, #0
 8001d40:	f7ff ff5c 	bl	8001bfc <MOTOR_B>
	//左后电机 前   //右后电机 前
	MOTOR_D(GO);       MOTOR_C(GO);
 8001d44:	2000      	movs	r0, #0
 8001d46:	f7ff ffc3 	bl	8001cd0 <MOTOR_D>
 8001d4a:	2000      	movs	r0, #0
 8001d4c:	f7ff ff88 	bl	8001c60 <MOTOR_C>
}
 8001d50:	bf00      	nop
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <Car_Back>:

void Car_Back(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
	//左前电机 后    //右前电机 后
	MOTOR_A(BACK);       MOTOR_B(BACK);
 8001d58:	2001      	movs	r0, #1
 8001d5a:	f7ff ff1d 	bl	8001b98 <MOTOR_A>
 8001d5e:	2001      	movs	r0, #1
 8001d60:	f7ff ff4c 	bl	8001bfc <MOTOR_B>
	//左后电机 后   //右后电机 后
	MOTOR_D(BACK);       MOTOR_C(BACK);
 8001d64:	2001      	movs	r0, #1
 8001d66:	f7ff ffb3 	bl	8001cd0 <MOTOR_D>
 8001d6a:	2001      	movs	r0, #1
 8001d6c:	f7ff ff78 	bl	8001c60 <MOTOR_C>
}
 8001d70:	bf00      	nop
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <Car_Stop>:
//	//左后电机    //右后电机
//	MOTOR_D(BACK);       MOTOR_C(STOP);
//}
//***************************停车***************************//
void Car_Stop(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
	//左前电机 停    //右前电机 停
	MOTOR_A(STOP);       MOTOR_B(STOP);
 8001d78:	2002      	movs	r0, #2
 8001d7a:	f7ff ff0d 	bl	8001b98 <MOTOR_A>
 8001d7e:	2002      	movs	r0, #2
 8001d80:	f7ff ff3c 	bl	8001bfc <MOTOR_B>
	//左后电机 停   //右后电机 停
	MOTOR_D(STOP);       MOTOR_C(STOP);
 8001d84:	2002      	movs	r0, #2
 8001d86:	f7ff ffa3 	bl	8001cd0 <MOTOR_D>
 8001d8a:	2002      	movs	r0, #2
 8001d8c:	f7ff ff68 	bl	8001c60 <MOTOR_C>
}
 8001d90:	bf00      	nop
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <Car_Turn_Right>:

//***************************前进右转***************************//
void Car_Turn_Right(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
	MOTOR_A(GO);       MOTOR_B(BACK);
 8001d98:	2000      	movs	r0, #0
 8001d9a:	f7ff fefd 	bl	8001b98 <MOTOR_A>
 8001d9e:	2001      	movs	r0, #1
 8001da0:	f7ff ff2c 	bl	8001bfc <MOTOR_B>
	MOTOR_D(GO);       MOTOR_C(BACK);
 8001da4:	2000      	movs	r0, #0
 8001da6:	f7ff ff93 	bl	8001cd0 <MOTOR_D>
 8001daa:	2001      	movs	r0, #1
 8001dac:	f7ff ff58 	bl	8001c60 <MOTOR_C>
}
 8001db0:	bf00      	nop
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <Car_Turn_Left>:
//***************************左转***************************//
void Car_Turn_Left(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
	MOTOR_A(BACK);       MOTOR_B(GO);
 8001db8:	2001      	movs	r0, #1
 8001dba:	f7ff feed 	bl	8001b98 <MOTOR_A>
 8001dbe:	2000      	movs	r0, #0
 8001dc0:	f7ff ff1c 	bl	8001bfc <MOTOR_B>
	MOTOR_D(BACK);       MOTOR_C(GO);
 8001dc4:	2001      	movs	r0, #1
 8001dc6:	f7ff ff83 	bl	8001cd0 <MOTOR_D>
 8001dca:	2000      	movs	r0, #0
 8001dcc:	f7ff ff48 	bl	8001c60 <MOTOR_C>
}
 8001dd0:	bf00      	nop
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <motor_encode_init>:

/*
 * 初始化函数
 */
void motor_encode_init(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim6);//开启计时器中断
 8001dd8:	4814      	ldr	r0, [pc, #80]	; (8001e2c <motor_encode_init+0x58>)
 8001dda:	f004 ff5d 	bl	8006c98 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);// A轮编码器
 8001dde:	213c      	movs	r1, #60	; 0x3c
 8001de0:	4813      	ldr	r0, [pc, #76]	; (8001e30 <motor_encode_init+0x5c>)
 8001de2:	f005 f9d6 	bl	8007192 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);// B轮编码器
 8001de6:	213c      	movs	r1, #60	; 0x3c
 8001de8:	4812      	ldr	r0, [pc, #72]	; (8001e34 <motor_encode_init+0x60>)
 8001dea:	f005 f9d2 	bl	8007192 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);// C轮编码器
 8001dee:	213c      	movs	r1, #60	; 0x3c
 8001df0:	4811      	ldr	r0, [pc, #68]	; (8001e38 <motor_encode_init+0x64>)
 8001df2:	f005 f9ce 	bl	8007192 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);// D轮编码器
 8001df6:	213c      	movs	r1, #60	; 0x3c
 8001df8:	4810      	ldr	r0, [pc, #64]	; (8001e3c <motor_encode_init+0x68>)
 8001dfa:	f005 f9ca 	bl	8007192 <HAL_TIM_Encoder_Start>
	__HAL_TIM_SET_COUNTER(&htim5,30000);  // 计数器还原
 8001dfe:	4b0f      	ldr	r3, [pc, #60]	; (8001e3c <motor_encode_init+0x68>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f247 5230 	movw	r2, #30000	; 0x7530
 8001e06:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim8,30000);
 8001e08:	4b0b      	ldr	r3, [pc, #44]	; (8001e38 <motor_encode_init+0x64>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f247 5230 	movw	r2, #30000	; 0x7530
 8001e10:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim4,30000);
 8001e12:	4b08      	ldr	r3, [pc, #32]	; (8001e34 <motor_encode_init+0x60>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f247 5230 	movw	r2, #30000	; 0x7530
 8001e1a:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim2,30000);
 8001e1c:	4b04      	ldr	r3, [pc, #16]	; (8001e30 <motor_encode_init+0x5c>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f247 5230 	movw	r2, #30000	; 0x7530
 8001e24:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001e26:	bf00      	nop
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	2000091c 	.word	0x2000091c
 8001e30:	200009f4 	.word	0x200009f4
 8001e34:	20000964 	.word	0x20000964
 8001e38:	20000acc 	.word	0x20000acc
 8001e3c:	200009ac 	.word	0x200009ac

08001e40 <limit>:

static float limit(float val, int lim, int last_val)//限幅
{
 8001e40:	b480      	push	{r7}
 8001e42:	b087      	sub	sp, #28
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	ed87 0a03 	vstr	s0, [r7, #12]
 8001e4a:	60b8      	str	r0, [r7, #8]
 8001e4c:	6079      	str	r1, [r7, #4]
	float limitout;
	if(val > lim) limitout = last_val;
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	ee07 3a90 	vmov	s15, r3
 8001e54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e58:	ed97 7a03 	vldr	s14, [r7, #12]
 8001e5c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e64:	dd07      	ble.n	8001e76 <limit+0x36>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	ee07 3a90 	vmov	s15, r3
 8001e6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e70:	edc7 7a05 	vstr	s15, [r7, #20]
 8001e74:	e001      	b.n	8001e7a <limit+0x3a>
	else limitout = val;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	617b      	str	r3, [r7, #20]
	return limitout;
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	ee07 3a90 	vmov	s15, r3
}
 8001e80:	eeb0 0a67 	vmov.f32	s0, s15
 8001e84:	371c      	adds	r7, #28
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
	...

08001e90 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
	if (htim == (&htim6))//读取其速度
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	4aa1      	ldr	r2, [pc, #644]	; (8002120 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	f040 8120 	bne.w	80020e2 <HAL_TIM_PeriodElapsedCallback+0x252>
//		Motor_Speed.A = limit((float)((65535-__HAL_TIM_GET_COUNTER(&htim2))/(1820/600)), 200, Motor_Speed.A);//计算速度并限幅
//		Motor_Speed.B = limit((float)((__HAL_TIM_GET_COUNTER(&htim4))/(1820/600)), 200, Motor_Speed.B);
//		Motor_Speed.C = limit((float)((__HAL_TIM_GET_COUNTER(&htim8))/(1820/600)), 200, Motor_Speed.C);
//		Motor_Speed.D = limit((float)((65535-__HAL_TIM_GET_COUNTER(&htim5))/(1820/600)), 200, Motor_Speed.D);

		Motor_Speed.A = limit(((float)abs(Tim2Cnt - 30000))/(1820/600), 200, Motor_Speed.A);//计算速度并限幅
 8001ea2:	4ba0      	ldr	r3, [pc, #640]	; (8002124 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea8:	f5a3 43ea 	sub.w	r3, r3, #29952	; 0x7500
 8001eac:	3b30      	subs	r3, #48	; 0x30
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	bfb8      	it	lt
 8001eb2:	425b      	neglt	r3, r3
 8001eb4:	ee07 3a90 	vmov	s15, r3
 8001eb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ebc:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8001ec0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001ec4:	4b98      	ldr	r3, [pc, #608]	; (8002128 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001ec6:	edd3 7a00 	vldr	s15, [r3]
 8001eca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ece:	ee17 1a90 	vmov	r1, s15
 8001ed2:	20c8      	movs	r0, #200	; 0xc8
 8001ed4:	eeb0 0a47 	vmov.f32	s0, s14
 8001ed8:	f7ff ffb2 	bl	8001e40 <limit>
 8001edc:	eef0 7a40 	vmov.f32	s15, s0
 8001ee0:	4b91      	ldr	r3, [pc, #580]	; (8002128 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001ee2:	edc3 7a00 	vstr	s15, [r3]
		Motor_Speed.B = limit(((float)abs(Tim4Cnt - 30000))/(1820/600), 200, Motor_Speed.B);
 8001ee6:	4b91      	ldr	r3, [pc, #580]	; (800212c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eec:	f5a3 43ea 	sub.w	r3, r3, #29952	; 0x7500
 8001ef0:	3b30      	subs	r3, #48	; 0x30
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	bfb8      	it	lt
 8001ef6:	425b      	neglt	r3, r3
 8001ef8:	ee07 3a90 	vmov	s15, r3
 8001efc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f00:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8001f04:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001f08:	4b87      	ldr	r3, [pc, #540]	; (8002128 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001f0a:	edd3 7a01 	vldr	s15, [r3, #4]
 8001f0e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f12:	ee17 1a90 	vmov	r1, s15
 8001f16:	20c8      	movs	r0, #200	; 0xc8
 8001f18:	eeb0 0a47 	vmov.f32	s0, s14
 8001f1c:	f7ff ff90 	bl	8001e40 <limit>
 8001f20:	eef0 7a40 	vmov.f32	s15, s0
 8001f24:	4b80      	ldr	r3, [pc, #512]	; (8002128 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001f26:	edc3 7a01 	vstr	s15, [r3, #4]
		Motor_Speed.C = limit(((float)abs(Tim8Cnt - 30000))/(1820/600), 200, Motor_Speed.C);
 8001f2a:	4b81      	ldr	r3, [pc, #516]	; (8002130 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f30:	f5a3 43ea 	sub.w	r3, r3, #29952	; 0x7500
 8001f34:	3b30      	subs	r3, #48	; 0x30
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	bfb8      	it	lt
 8001f3a:	425b      	neglt	r3, r3
 8001f3c:	ee07 3a90 	vmov	s15, r3
 8001f40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f44:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8001f48:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001f4c:	4b76      	ldr	r3, [pc, #472]	; (8002128 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001f4e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001f52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f56:	ee17 1a90 	vmov	r1, s15
 8001f5a:	20c8      	movs	r0, #200	; 0xc8
 8001f5c:	eeb0 0a47 	vmov.f32	s0, s14
 8001f60:	f7ff ff6e 	bl	8001e40 <limit>
 8001f64:	eef0 7a40 	vmov.f32	s15, s0
 8001f68:	4b6f      	ldr	r3, [pc, #444]	; (8002128 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001f6a:	edc3 7a02 	vstr	s15, [r3, #8]
		Motor_Speed.D = limit(((float)abs(Tim5Cnt - 30000))/(1820/600), 200, Motor_Speed.D);
 8001f6e:	4b71      	ldr	r3, [pc, #452]	; (8002134 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f74:	f5a3 43ea 	sub.w	r3, r3, #29952	; 0x7500
 8001f78:	3b30      	subs	r3, #48	; 0x30
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	bfb8      	it	lt
 8001f7e:	425b      	neglt	r3, r3
 8001f80:	ee07 3a90 	vmov	s15, r3
 8001f84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f88:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8001f8c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001f90:	4b65      	ldr	r3, [pc, #404]	; (8002128 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001f92:	edd3 7a03 	vldr	s15, [r3, #12]
 8001f96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f9a:	ee17 1a90 	vmov	r1, s15
 8001f9e:	20c8      	movs	r0, #200	; 0xc8
 8001fa0:	eeb0 0a47 	vmov.f32	s0, s14
 8001fa4:	f7ff ff4c 	bl	8001e40 <limit>
 8001fa8:	eef0 7a40 	vmov.f32	s15, s0
 8001fac:	4b5e      	ldr	r3, [pc, #376]	; (8002128 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001fae:	edc3 7a03 	vstr	s15, [r3, #12]
		//*********获取转数*********//
		//轮子没转一周计数器应改变4680
		/*限幅为每100ms最大转十圈，即防止静止时不断计数。因为，A、D轮子为反向脉冲
		 * 初始值为0，0xff - 0 = 0xff即计数错误。
		 */
		MotorRevCon.A += limit(((float)abs(Tim2Cnt - 30000)) /1820, 10, 0);
 8001fb2:	4b5c      	ldr	r3, [pc, #368]	; (8002124 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb8:	f5a3 43ea 	sub.w	r3, r3, #29952	; 0x7500
 8001fbc:	3b30      	subs	r3, #48	; 0x30
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	bfb8      	it	lt
 8001fc2:	425b      	neglt	r3, r3
 8001fc4:	ee07 3a90 	vmov	s15, r3
 8001fc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fcc:	eddf 6a5a 	vldr	s13, [pc, #360]	; 8002138 <HAL_TIM_PeriodElapsedCallback+0x2a8>
 8001fd0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001fd4:	2100      	movs	r1, #0
 8001fd6:	200a      	movs	r0, #10
 8001fd8:	eeb0 0a47 	vmov.f32	s0, s14
 8001fdc:	f7ff ff30 	bl	8001e40 <limit>
 8001fe0:	eeb0 7a40 	vmov.f32	s14, s0
 8001fe4:	4b55      	ldr	r3, [pc, #340]	; (800213c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001fe6:	edd3 7a00 	vldr	s15, [r3]
 8001fea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fee:	4b53      	ldr	r3, [pc, #332]	; (800213c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001ff0:	edc3 7a00 	vstr	s15, [r3]
		MotorRevCon.B += limit(((float)abs(Tim4Cnt - 30000)) /1820, 10, 0);
 8001ff4:	4b4d      	ldr	r3, [pc, #308]	; (800212c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffa:	f5a3 43ea 	sub.w	r3, r3, #29952	; 0x7500
 8001ffe:	3b30      	subs	r3, #48	; 0x30
 8002000:	2b00      	cmp	r3, #0
 8002002:	bfb8      	it	lt
 8002004:	425b      	neglt	r3, r3
 8002006:	ee07 3a90 	vmov	s15, r3
 800200a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800200e:	eddf 6a4a 	vldr	s13, [pc, #296]	; 8002138 <HAL_TIM_PeriodElapsedCallback+0x2a8>
 8002012:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002016:	2100      	movs	r1, #0
 8002018:	200a      	movs	r0, #10
 800201a:	eeb0 0a47 	vmov.f32	s0, s14
 800201e:	f7ff ff0f 	bl	8001e40 <limit>
 8002022:	eeb0 7a40 	vmov.f32	s14, s0
 8002026:	4b45      	ldr	r3, [pc, #276]	; (800213c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8002028:	edd3 7a01 	vldr	s15, [r3, #4]
 800202c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002030:	4b42      	ldr	r3, [pc, #264]	; (800213c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8002032:	edc3 7a01 	vstr	s15, [r3, #4]
		MotorRevCon.C += limit(((float)abs(Tim8Cnt - 30000)) /1820, 10, 0);
 8002036:	4b3e      	ldr	r3, [pc, #248]	; (8002130 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203c:	f5a3 43ea 	sub.w	r3, r3, #29952	; 0x7500
 8002040:	3b30      	subs	r3, #48	; 0x30
 8002042:	2b00      	cmp	r3, #0
 8002044:	bfb8      	it	lt
 8002046:	425b      	neglt	r3, r3
 8002048:	ee07 3a90 	vmov	s15, r3
 800204c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002050:	eddf 6a39 	vldr	s13, [pc, #228]	; 8002138 <HAL_TIM_PeriodElapsedCallback+0x2a8>
 8002054:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002058:	2100      	movs	r1, #0
 800205a:	200a      	movs	r0, #10
 800205c:	eeb0 0a47 	vmov.f32	s0, s14
 8002060:	f7ff feee 	bl	8001e40 <limit>
 8002064:	eeb0 7a40 	vmov.f32	s14, s0
 8002068:	4b34      	ldr	r3, [pc, #208]	; (800213c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 800206a:	edd3 7a02 	vldr	s15, [r3, #8]
 800206e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002072:	4b32      	ldr	r3, [pc, #200]	; (800213c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8002074:	edc3 7a02 	vstr	s15, [r3, #8]
		MotorRevCon.D += limit(((float)abs(Tim5Cnt - 30000)) /1820, 10, 0);
 8002078:	4b2e      	ldr	r3, [pc, #184]	; (8002134 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207e:	f5a3 43ea 	sub.w	r3, r3, #29952	; 0x7500
 8002082:	3b30      	subs	r3, #48	; 0x30
 8002084:	2b00      	cmp	r3, #0
 8002086:	bfb8      	it	lt
 8002088:	425b      	neglt	r3, r3
 800208a:	ee07 3a90 	vmov	s15, r3
 800208e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002092:	eddf 6a29 	vldr	s13, [pc, #164]	; 8002138 <HAL_TIM_PeriodElapsedCallback+0x2a8>
 8002096:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800209a:	2100      	movs	r1, #0
 800209c:	200a      	movs	r0, #10
 800209e:	eeb0 0a47 	vmov.f32	s0, s14
 80020a2:	f7ff fecd 	bl	8001e40 <limit>
 80020a6:	eeb0 7a40 	vmov.f32	s14, s0
 80020aa:	4b24      	ldr	r3, [pc, #144]	; (800213c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80020ac:	edd3 7a03 	vldr	s15, [r3, #12]
 80020b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020b4:	4b21      	ldr	r3, [pc, #132]	; (800213c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80020b6:	edc3 7a03 	vstr	s15, [r3, #12]
//
		__HAL_TIM_SET_COUNTER(&htim5,30000);  // 计数器还原
 80020ba:	4b1e      	ldr	r3, [pc, #120]	; (8002134 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f247 5230 	movw	r2, #30000	; 0x7530
 80020c2:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SET_COUNTER(&htim8,30000);
 80020c4:	4b1a      	ldr	r3, [pc, #104]	; (8002130 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f247 5230 	movw	r2, #30000	; 0x7530
 80020cc:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SET_COUNTER(&htim4,30000);
 80020ce:	4b17      	ldr	r3, [pc, #92]	; (800212c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f247 5230 	movw	r2, #30000	; 0x7530
 80020d6:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SET_COUNTER(&htim2,30000);
 80020d8:	4b12      	ldr	r3, [pc, #72]	; (8002124 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f247 5230 	movw	r2, #30000	; 0x7530
 80020e0:	625a      	str	r2, [r3, #36]	; 0x24
//			__HAL_TIM_SET_COUNTER(&htim4,0);
//			__HAL_TIM_SET_COUNTER(&htim2,0);
	}

	//计时部分
	if (tf) Time ++ ;//计时判断
 80020e2:	4b17      	ldr	r3, [pc, #92]	; (8002140 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d009      	beq.n	80020fe <HAL_TIM_PeriodElapsedCallback+0x26e>
 80020ea:	4b16      	ldr	r3, [pc, #88]	; (8002144 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80020ec:	edd3 7a00 	vldr	s15, [r3]
 80020f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80020f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80020f8:	4b12      	ldr	r3, [pc, #72]	; (8002144 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80020fa:	edc3 7a00 	vstr	s15, [r3]
	if(Time > 10000) TimeEnd();//溢出中止
 80020fe:	4b11      	ldr	r3, [pc, #68]	; (8002144 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8002100:	edd3 7a00 	vldr	s15, [r3]
 8002104:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002148 <HAL_TIM_PeriodElapsedCallback+0x2b8>
 8002108:	eef4 7ac7 	vcmpe.f32	s15, s14
 800210c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002110:	dc00      	bgt.n	8002114 <HAL_TIM_PeriodElapsedCallback+0x284>

}
 8002112:	e001      	b.n	8002118 <HAL_TIM_PeriodElapsedCallback+0x288>
	if(Time > 10000) TimeEnd();//溢出中止
 8002114:	f000 f81a 	bl	800214c <TimeEnd>
}
 8002118:	bf00      	nop
 800211a:	3708      	adds	r7, #8
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	2000091c 	.word	0x2000091c
 8002124:	200009f4 	.word	0x200009f4
 8002128:	20000630 	.word	0x20000630
 800212c:	20000964 	.word	0x20000964
 8002130:	20000acc 	.word	0x20000acc
 8002134:	200009ac 	.word	0x200009ac
 8002138:	44e38000 	.word	0x44e38000
 800213c:	20000640 	.word	0x20000640
 8002140:	20000654 	.word	0x20000654
 8002144:	20000650 	.word	0x20000650
 8002148:	461c4000 	.word	0x461c4000

0800214c <TimeEnd>:
void TimeStart(void)
{
	tf = 1;
}
void TimeEnd(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
	tf = 0;
 8002150:	4b03      	ldr	r3, [pc, #12]	; (8002160 <TimeEnd+0x14>)
 8002152:	2200      	movs	r2, #0
 8002154:	601a      	str	r2, [r3, #0]
}
 8002156:	bf00      	nop
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr
 8002160:	20000654 	.word	0x20000654
 8002164:	00000000 	.word	0x00000000

08002168 <FindCrossInfrontToRound>:
#define PWMTo 3000

extern MotorRevCon__ MotorRevCon;

void FindCrossInfrontToRound(int StopFlag, float R, int PWMGo)//循迹到指定距离
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	ed87 0a02 	vstr	s0, [r7, #8]
 8002174:	6079      	str	r1, [r7, #4]
	while(fabs( (MotorRevCon.A + MotorRevCon.B +MotorRevCon.C+MotorRevCon.D)/4 - R) > 0.1)
 8002176:	e04b      	b.n	8002210 <FindCrossInfrontToRound+0xa8>
	{
		MOTOR_PWM_Out(PWMGo, PWMGo, PWMGo, PWMGo);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	6879      	ldr	r1, [r7, #4]
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f7ff fcf2 	bl	8001b68 <MOTOR_PWM_Out>
		Car_Back();
 8002184:	f7ff fde6 	bl	8001d54 <Car_Back>
		if(GrayTrack5 == red && GrayTrack4 == white && GrayTrack3 == white)//右偏
 8002188:	f44f 7100 	mov.w	r1, #512	; 0x200
 800218c:	4840      	ldr	r0, [pc, #256]	; (8002290 <FindCrossInfrontToRound+0x128>)
 800218e:	f003 fcb9 	bl	8005b04 <HAL_GPIO_ReadPin>
 8002192:	4603      	mov	r3, r0
 8002194:	2b01      	cmp	r3, #1
 8002196:	d119      	bne.n	80021cc <FindCrossInfrontToRound+0x64>
 8002198:	f44f 7180 	mov.w	r1, #256	; 0x100
 800219c:	483c      	ldr	r0, [pc, #240]	; (8002290 <FindCrossInfrontToRound+0x128>)
 800219e:	f003 fcb1 	bl	8005b04 <HAL_GPIO_ReadPin>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d111      	bne.n	80021cc <FindCrossInfrontToRound+0x64>
 80021a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021ac:	4839      	ldr	r0, [pc, #228]	; (8002294 <FindCrossInfrontToRound+0x12c>)
 80021ae:	f003 fca9 	bl	8005b04 <HAL_GPIO_ReadPin>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d109      	bne.n	80021cc <FindCrossInfrontToRound+0x64>
		{
			MOTOR_PWM_Out(PWML, PWMH , PWMH ,PWML);
 80021b8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80021bc:	f242 3228 	movw	r2, #9000	; 0x2328
 80021c0:	f242 3128 	movw	r1, #9000	; 0x2328
 80021c4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80021c8:	f7ff fcce 	bl	8001b68 <MOTOR_PWM_Out>
		}
		if(GrayTrack5 == white && GrayTrack4 == white && GrayTrack3 == red)//左偏
 80021cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80021d0:	482f      	ldr	r0, [pc, #188]	; (8002290 <FindCrossInfrontToRound+0x128>)
 80021d2:	f003 fc97 	bl	8005b04 <HAL_GPIO_ReadPin>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d119      	bne.n	8002210 <FindCrossInfrontToRound+0xa8>
 80021dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021e0:	482b      	ldr	r0, [pc, #172]	; (8002290 <FindCrossInfrontToRound+0x128>)
 80021e2:	f003 fc8f 	bl	8005b04 <HAL_GPIO_ReadPin>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d111      	bne.n	8002210 <FindCrossInfrontToRound+0xa8>
 80021ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021f0:	4828      	ldr	r0, [pc, #160]	; (8002294 <FindCrossInfrontToRound+0x12c>)
 80021f2:	f003 fc87 	bl	8005b04 <HAL_GPIO_ReadPin>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d109      	bne.n	8002210 <FindCrossInfrontToRound+0xa8>
		{
			MOTOR_PWM_Out(PWMH, PWML, PWML, PWMH);
 80021fc:	f242 3328 	movw	r3, #9000	; 0x2328
 8002200:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002204:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8002208:	f242 3028 	movw	r0, #9000	; 0x2328
 800220c:	f7ff fcac 	bl	8001b68 <MOTOR_PWM_Out>
	while(fabs( (MotorRevCon.A + MotorRevCon.B +MotorRevCon.C+MotorRevCon.D)/4 - R) > 0.1)
 8002210:	4b21      	ldr	r3, [pc, #132]	; (8002298 <FindCrossInfrontToRound+0x130>)
 8002212:	ed93 7a00 	vldr	s14, [r3]
 8002216:	4b20      	ldr	r3, [pc, #128]	; (8002298 <FindCrossInfrontToRound+0x130>)
 8002218:	edd3 7a01 	vldr	s15, [r3, #4]
 800221c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002220:	4b1d      	ldr	r3, [pc, #116]	; (8002298 <FindCrossInfrontToRound+0x130>)
 8002222:	edd3 7a02 	vldr	s15, [r3, #8]
 8002226:	ee37 7a27 	vadd.f32	s14, s14, s15
 800222a:	4b1b      	ldr	r3, [pc, #108]	; (8002298 <FindCrossInfrontToRound+0x130>)
 800222c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002230:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002234:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8002238:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800223c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002240:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002244:	eef0 7ae7 	vabs.f32	s15, s15
 8002248:	ee17 0a90 	vmov	r0, s15
 800224c:	f7fe f97c 	bl	8000548 <__aeabi_f2d>
 8002250:	a30d      	add	r3, pc, #52	; (adr r3, 8002288 <FindCrossInfrontToRound+0x120>)
 8002252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002256:	f7fe fc5f 	bl	8000b18 <__aeabi_dcmpgt>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d18b      	bne.n	8002178 <FindCrossInfrontToRound+0x10>
	//		if(GrayTrack6 == red)//左大偏
	//		{
	//			Car_Turn_Right();
	//		}

	if(StopFlag)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d009      	beq.n	800227a <FindCrossInfrontToRound+0x112>
	{
		Car_Go();//反转一下以刹车
 8002266:	f7ff fd65 	bl	8001d34 <Car_Go>
		HAL_Delay(20);
 800226a:	2014      	movs	r0, #20
 800226c:	f002 fd76 	bl	8004d5c <HAL_Delay>
		Car_Stop();//停车
 8002270:	f7ff fd80 	bl	8001d74 <Car_Stop>
		HAL_Delay(150);
 8002274:	2096      	movs	r0, #150	; 0x96
 8002276:	f002 fd71 	bl	8004d5c <HAL_Delay>
	}

}
 800227a:	bf00      	nop
 800227c:	3710      	adds	r7, #16
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	f3af 8000 	nop.w
 8002288:	9999999a 	.word	0x9999999a
 800228c:	3fb99999 	.word	0x3fb99999
 8002290:	40020400 	.word	0x40020400
 8002294:	40021800 	.word	0x40021800
 8002298:	20000640 	.word	0x20000640

0800229c <FindCrossInfront>:

void FindCrossInfront(int StopFlag)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
	while(GrayTrack3 == white || GrayTrack4 == white || GrayTrack5 == white)
 80022a4:	e04f      	b.n	8002346 <FindCrossInfront+0xaa>
	{
		MOTOR_PWM_Out(PWMM, PWMM, PWMM, PWMM);
 80022a6:	f241 7370 	movw	r3, #6000	; 0x1770
 80022aa:	f241 7270 	movw	r2, #6000	; 0x1770
 80022ae:	f241 7170 	movw	r1, #6000	; 0x1770
 80022b2:	f241 7070 	movw	r0, #6000	; 0x1770
 80022b6:	f7ff fc57 	bl	8001b68 <MOTOR_PWM_Out>
		Car_Back();
 80022ba:	f7ff fd4b 	bl	8001d54 <Car_Back>
		if(GrayTrack5 == red && GrayTrack4 == white && GrayTrack3 == white)//右偏
 80022be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022c2:	4835      	ldr	r0, [pc, #212]	; (8002398 <FindCrossInfront+0xfc>)
 80022c4:	f003 fc1e 	bl	8005b04 <HAL_GPIO_ReadPin>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d119      	bne.n	8002302 <FindCrossInfront+0x66>
 80022ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022d2:	4831      	ldr	r0, [pc, #196]	; (8002398 <FindCrossInfront+0xfc>)
 80022d4:	f003 fc16 	bl	8005b04 <HAL_GPIO_ReadPin>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d111      	bne.n	8002302 <FindCrossInfront+0x66>
 80022de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022e2:	482e      	ldr	r0, [pc, #184]	; (800239c <FindCrossInfront+0x100>)
 80022e4:	f003 fc0e 	bl	8005b04 <HAL_GPIO_ReadPin>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d109      	bne.n	8002302 <FindCrossInfront+0x66>
		{
			MOTOR_PWM_Out(PWML, PWMH , PWMH ,PWML);
 80022ee:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80022f2:	f242 3228 	movw	r2, #9000	; 0x2328
 80022f6:	f242 3128 	movw	r1, #9000	; 0x2328
 80022fa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80022fe:	f7ff fc33 	bl	8001b68 <MOTOR_PWM_Out>
		}
		if(GrayTrack5 == white && GrayTrack4 == white && GrayTrack3 == red)//左偏
 8002302:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002306:	4824      	ldr	r0, [pc, #144]	; (8002398 <FindCrossInfront+0xfc>)
 8002308:	f003 fbfc 	bl	8005b04 <HAL_GPIO_ReadPin>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d119      	bne.n	8002346 <FindCrossInfront+0xaa>
 8002312:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002316:	4820      	ldr	r0, [pc, #128]	; (8002398 <FindCrossInfront+0xfc>)
 8002318:	f003 fbf4 	bl	8005b04 <HAL_GPIO_ReadPin>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d111      	bne.n	8002346 <FindCrossInfront+0xaa>
 8002322:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002326:	481d      	ldr	r0, [pc, #116]	; (800239c <FindCrossInfront+0x100>)
 8002328:	f003 fbec 	bl	8005b04 <HAL_GPIO_ReadPin>
 800232c:	4603      	mov	r3, r0
 800232e:	2b01      	cmp	r3, #1
 8002330:	d109      	bne.n	8002346 <FindCrossInfront+0xaa>
		{
			MOTOR_PWM_Out(PWMH, PWML, PWML, PWMH);
 8002332:	f242 3328 	movw	r3, #9000	; 0x2328
 8002336:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800233a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800233e:	f242 3028 	movw	r0, #9000	; 0x2328
 8002342:	f7ff fc11 	bl	8001b68 <MOTOR_PWM_Out>
	while(GrayTrack3 == white || GrayTrack4 == white || GrayTrack5 == white)
 8002346:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800234a:	4814      	ldr	r0, [pc, #80]	; (800239c <FindCrossInfront+0x100>)
 800234c:	f003 fbda 	bl	8005b04 <HAL_GPIO_ReadPin>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d0a7      	beq.n	80022a6 <FindCrossInfront+0xa>
 8002356:	f44f 7180 	mov.w	r1, #256	; 0x100
 800235a:	480f      	ldr	r0, [pc, #60]	; (8002398 <FindCrossInfront+0xfc>)
 800235c:	f003 fbd2 	bl	8005b04 <HAL_GPIO_ReadPin>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d09f      	beq.n	80022a6 <FindCrossInfront+0xa>
 8002366:	f44f 7100 	mov.w	r1, #512	; 0x200
 800236a:	480b      	ldr	r0, [pc, #44]	; (8002398 <FindCrossInfront+0xfc>)
 800236c:	f003 fbca 	bl	8005b04 <HAL_GPIO_ReadPin>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d097      	beq.n	80022a6 <FindCrossInfront+0xa>
//	if(GrayTrack6 == red)//左大偏
//	{
//		Car_Turn_Right();
//	}

	if(StopFlag)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d009      	beq.n	8002390 <FindCrossInfront+0xf4>
	{
		Car_Go();//反转一下以刹车
 800237c:	f7ff fcda 	bl	8001d34 <Car_Go>
		HAL_Delay(20);
 8002380:	2014      	movs	r0, #20
 8002382:	f002 fceb 	bl	8004d5c <HAL_Delay>
		Car_Stop();//停车
 8002386:	f7ff fcf5 	bl	8001d74 <Car_Stop>
		HAL_Delay(150);
 800238a:	2096      	movs	r0, #150	; 0x96
 800238c:	f002 fce6 	bl	8004d5c <HAL_Delay>
	}
}
 8002390:	bf00      	nop
 8002392:	3708      	adds	r7, #8
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	40020400 	.word	0x40020400
 800239c:	40021800 	.word	0x40021800

080023a0 <FindCrossBack>:
//	MOTOR_PWM_Out(PWMTo, PWMTo, PWMTo, PWMTo);
//	HAL_Delay(600);
//	Car_Stop();

void FindCrossBack()
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0
	MOTOR_PWM_Out(PWMM, PWMM, PWMM, PWMM);
 80023a4:	f241 7370 	movw	r3, #6000	; 0x1770
 80023a8:	f241 7270 	movw	r2, #6000	; 0x1770
 80023ac:	f241 7170 	movw	r1, #6000	; 0x1770
 80023b0:	f241 7070 	movw	r0, #6000	; 0x1770
 80023b4:	f7ff fbd8 	bl	8001b68 <MOTOR_PWM_Out>
	Car_Go();
 80023b8:	f7ff fcbc 	bl	8001d34 <Car_Go>
	while(Track2 == white || Track3 == white || Track4 == white)
 80023bc:	e04f      	b.n	800245e <FindCrossBack+0xbe>
	{
		MOTOR_PWM_Out(PWMM, PWMM, PWMM, PWMM);
 80023be:	f241 7370 	movw	r3, #6000	; 0x1770
 80023c2:	f241 7270 	movw	r2, #6000	; 0x1770
 80023c6:	f241 7170 	movw	r1, #6000	; 0x1770
 80023ca:	f241 7070 	movw	r0, #6000	; 0x1770
 80023ce:	f7ff fbcb 	bl	8001b68 <MOTOR_PWM_Out>
		Car_Go();
 80023d2:	f7ff fcaf 	bl	8001d34 <Car_Go>
		if(Track2 == red && Track3 == white && Track4 == white)  //右偏
 80023d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80023da:	483b      	ldr	r0, [pc, #236]	; (80024c8 <FindCrossBack+0x128>)
 80023dc:	f003 fb92 	bl	8005b04 <HAL_GPIO_ReadPin>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d119      	bne.n	800241a <FindCrossBack+0x7a>
 80023e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80023ea:	4837      	ldr	r0, [pc, #220]	; (80024c8 <FindCrossBack+0x128>)
 80023ec:	f003 fb8a 	bl	8005b04 <HAL_GPIO_ReadPin>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d111      	bne.n	800241a <FindCrossBack+0x7a>
 80023f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80023fa:	4834      	ldr	r0, [pc, #208]	; (80024cc <FindCrossBack+0x12c>)
 80023fc:	f003 fb82 	bl	8005b04 <HAL_GPIO_ReadPin>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d109      	bne.n	800241a <FindCrossBack+0x7a>
		{
			MOTOR_PWM_Out(PWML, PWMH , PWMH ,PWML);
 8002406:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800240a:	f242 3228 	movw	r2, #9000	; 0x2328
 800240e:	f242 3128 	movw	r1, #9000	; 0x2328
 8002412:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002416:	f7ff fba7 	bl	8001b68 <MOTOR_PWM_Out>
		}
		if(Track2 == white && Track3 == white && Track4 == red)   //左偏
 800241a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800241e:	482a      	ldr	r0, [pc, #168]	; (80024c8 <FindCrossBack+0x128>)
 8002420:	f003 fb70 	bl	8005b04 <HAL_GPIO_ReadPin>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d119      	bne.n	800245e <FindCrossBack+0xbe>
 800242a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800242e:	4826      	ldr	r0, [pc, #152]	; (80024c8 <FindCrossBack+0x128>)
 8002430:	f003 fb68 	bl	8005b04 <HAL_GPIO_ReadPin>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d111      	bne.n	800245e <FindCrossBack+0xbe>
 800243a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800243e:	4823      	ldr	r0, [pc, #140]	; (80024cc <FindCrossBack+0x12c>)
 8002440:	f003 fb60 	bl	8005b04 <HAL_GPIO_ReadPin>
 8002444:	4603      	mov	r3, r0
 8002446:	2b01      	cmp	r3, #1
 8002448:	d109      	bne.n	800245e <FindCrossBack+0xbe>
		{
			MOTOR_PWM_Out(PWMH, PWML, PWML, PWMH);
 800244a:	f242 3328 	movw	r3, #9000	; 0x2328
 800244e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002452:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8002456:	f242 3028 	movw	r0, #9000	; 0x2328
 800245a:	f7ff fb85 	bl	8001b68 <MOTOR_PWM_Out>
	while(Track2 == white || Track3 == white || Track4 == white)
 800245e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002462:	4819      	ldr	r0, [pc, #100]	; (80024c8 <FindCrossBack+0x128>)
 8002464:	f003 fb4e 	bl	8005b04 <HAL_GPIO_ReadPin>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d0a7      	beq.n	80023be <FindCrossBack+0x1e>
 800246e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002472:	4815      	ldr	r0, [pc, #84]	; (80024c8 <FindCrossBack+0x128>)
 8002474:	f003 fb46 	bl	8005b04 <HAL_GPIO_ReadPin>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d09f      	beq.n	80023be <FindCrossBack+0x1e>
 800247e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002482:	4812      	ldr	r0, [pc, #72]	; (80024cc <FindCrossBack+0x12c>)
 8002484:	f003 fb3e 	bl	8005b04 <HAL_GPIO_ReadPin>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d097      	beq.n	80023be <FindCrossBack+0x1e>
		}
	}

	Car_Back();//反转一下以刹车
 800248e:	f7ff fc61 	bl	8001d54 <Car_Back>
	HAL_Delay(20);
 8002492:	2014      	movs	r0, #20
 8002494:	f002 fc62 	bl	8004d5c <HAL_Delay>
	Car_Stop();//停车
 8002498:	f7ff fc6c 	bl	8001d74 <Car_Stop>
	HAL_Delay(150);
 800249c:	2096      	movs	r0, #150	; 0x96
 800249e:	f002 fc5d 	bl	8004d5c <HAL_Delay>

	PidWheels_Init();
 80024a2:	f7fe ffb5 	bl	8001410 <PidWheels_Init>
	ToRound(0, 1.35, 45, 45, 45, 45);//向back开到转向点
 80024a6:	ed9f 2a0a 	vldr	s4, [pc, #40]	; 80024d0 <FindCrossBack+0x130>
 80024aa:	eddf 1a09 	vldr	s3, [pc, #36]	; 80024d0 <FindCrossBack+0x130>
 80024ae:	ed9f 1a08 	vldr	s2, [pc, #32]	; 80024d0 <FindCrossBack+0x130>
 80024b2:	eddf 0a07 	vldr	s1, [pc, #28]	; 80024d0 <FindCrossBack+0x130>
 80024b6:	ed9f 0a07 	vldr	s0, [pc, #28]	; 80024d4 <FindCrossBack+0x134>
 80024ba:	2000      	movs	r0, #0
 80024bc:	f7ff fa36 	bl	800192c <ToRound>
	Car_Stop();
 80024c0:	f7ff fc58 	bl	8001d74 <Car_Stop>
}
 80024c4:	bf00      	nop
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	40020800 	.word	0x40020800
 80024cc:	40021800 	.word	0x40021800
 80024d0:	42340000 	.word	0x42340000
 80024d4:	3faccccd 	.word	0x3faccccd

080024d8 <FindT5Back>:

void FindT5Back(void)//寻找5号病房后的T路口，倒车
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0
	MOTOR_PWM_Out(PWMM, PWMM, PWMM, PWMM);
 80024dc:	f241 7370 	movw	r3, #6000	; 0x1770
 80024e0:	f241 7270 	movw	r2, #6000	; 0x1770
 80024e4:	f241 7170 	movw	r1, #6000	; 0x1770
 80024e8:	f241 7070 	movw	r0, #6000	; 0x1770
 80024ec:	f7ff fb3c 	bl	8001b68 <MOTOR_PWM_Out>
	Car_Go();
 80024f0:	f7ff fc20 	bl	8001d34 <Car_Go>
	while(Track7 == white || Track2 == white)
 80024f4:	e04f      	b.n	8002596 <FindT5Back+0xbe>
	{
		MOTOR_PWM_Out(PWMM, PWMM, PWMM, PWMM);
 80024f6:	f241 7370 	movw	r3, #6000	; 0x1770
 80024fa:	f241 7270 	movw	r2, #6000	; 0x1770
 80024fe:	f241 7170 	movw	r1, #6000	; 0x1770
 8002502:	f241 7070 	movw	r0, #6000	; 0x1770
 8002506:	f7ff fb2f 	bl	8001b68 <MOTOR_PWM_Out>
		Car_Go();
 800250a:	f7ff fc13 	bl	8001d34 <Car_Go>
		if(Track2 == red && Track3 == white && Track4 == white)  //右偏
 800250e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002512:	4837      	ldr	r0, [pc, #220]	; (80025f0 <FindT5Back+0x118>)
 8002514:	f003 faf6 	bl	8005b04 <HAL_GPIO_ReadPin>
 8002518:	4603      	mov	r3, r0
 800251a:	2b01      	cmp	r3, #1
 800251c:	d119      	bne.n	8002552 <FindT5Back+0x7a>
 800251e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002522:	4833      	ldr	r0, [pc, #204]	; (80025f0 <FindT5Back+0x118>)
 8002524:	f003 faee 	bl	8005b04 <HAL_GPIO_ReadPin>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d111      	bne.n	8002552 <FindT5Back+0x7a>
 800252e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002532:	4830      	ldr	r0, [pc, #192]	; (80025f4 <FindT5Back+0x11c>)
 8002534:	f003 fae6 	bl	8005b04 <HAL_GPIO_ReadPin>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d109      	bne.n	8002552 <FindT5Back+0x7a>
		{
			MOTOR_PWM_Out(PWML, PWMH , PWMH ,PWML);
 800253e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002542:	f242 3228 	movw	r2, #9000	; 0x2328
 8002546:	f242 3128 	movw	r1, #9000	; 0x2328
 800254a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800254e:	f7ff fb0b 	bl	8001b68 <MOTOR_PWM_Out>
		}
		if(Track2 == white && Track3 == white && Track4 == red)   //左偏
 8002552:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002556:	4826      	ldr	r0, [pc, #152]	; (80025f0 <FindT5Back+0x118>)
 8002558:	f003 fad4 	bl	8005b04 <HAL_GPIO_ReadPin>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d119      	bne.n	8002596 <FindT5Back+0xbe>
 8002562:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002566:	4822      	ldr	r0, [pc, #136]	; (80025f0 <FindT5Back+0x118>)
 8002568:	f003 facc 	bl	8005b04 <HAL_GPIO_ReadPin>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d111      	bne.n	8002596 <FindT5Back+0xbe>
 8002572:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002576:	481f      	ldr	r0, [pc, #124]	; (80025f4 <FindT5Back+0x11c>)
 8002578:	f003 fac4 	bl	8005b04 <HAL_GPIO_ReadPin>
 800257c:	4603      	mov	r3, r0
 800257e:	2b01      	cmp	r3, #1
 8002580:	d109      	bne.n	8002596 <FindT5Back+0xbe>
		{
			MOTOR_PWM_Out(PWMH, PWML, PWML, PWMH);
 8002582:	f242 3328 	movw	r3, #9000	; 0x2328
 8002586:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800258a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800258e:	f242 3028 	movw	r0, #9000	; 0x2328
 8002592:	f7ff fae9 	bl	8001b68 <MOTOR_PWM_Out>
	while(Track7 == white || Track2 == white)
 8002596:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800259a:	4816      	ldr	r0, [pc, #88]	; (80025f4 <FindT5Back+0x11c>)
 800259c:	f003 fab2 	bl	8005b04 <HAL_GPIO_ReadPin>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d0a7      	beq.n	80024f6 <FindT5Back+0x1e>
 80025a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80025aa:	4811      	ldr	r0, [pc, #68]	; (80025f0 <FindT5Back+0x118>)
 80025ac:	f003 faaa 	bl	8005b04 <HAL_GPIO_ReadPin>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d09f      	beq.n	80024f6 <FindT5Back+0x1e>
		}
	}

	Car_Back();//反转一下以刹车
 80025b6:	f7ff fbcd 	bl	8001d54 <Car_Back>
	HAL_Delay(20);
 80025ba:	2014      	movs	r0, #20
 80025bc:	f002 fbce 	bl	8004d5c <HAL_Delay>
	Car_Stop();//停车
 80025c0:	f7ff fbd8 	bl	8001d74 <Car_Stop>
	HAL_Delay(150);
 80025c4:	2096      	movs	r0, #150	; 0x96
 80025c6:	f002 fbc9 	bl	8004d5c <HAL_Delay>

	PidWheels_Init();
 80025ca:	f7fe ff21 	bl	8001410 <PidWheels_Init>
	ToRound(0, 1.3, 45, 45, 45, 45);
 80025ce:	ed9f 2a0a 	vldr	s4, [pc, #40]	; 80025f8 <FindT5Back+0x120>
 80025d2:	eddf 1a09 	vldr	s3, [pc, #36]	; 80025f8 <FindT5Back+0x120>
 80025d6:	ed9f 1a08 	vldr	s2, [pc, #32]	; 80025f8 <FindT5Back+0x120>
 80025da:	eddf 0a07 	vldr	s1, [pc, #28]	; 80025f8 <FindT5Back+0x120>
 80025de:	ed9f 0a07 	vldr	s0, [pc, #28]	; 80025fc <FindT5Back+0x124>
 80025e2:	2000      	movs	r0, #0
 80025e4:	f7ff f9a2 	bl	800192c <ToRound>
	Car_Stop();
 80025e8:	f7ff fbc4 	bl	8001d74 <Car_Stop>

}
 80025ec:	bf00      	nop
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	40020800 	.word	0x40020800
 80025f4:	40021800 	.word	0x40021800
 80025f8:	42340000 	.word	0x42340000
 80025fc:	3fa66666 	.word	0x3fa66666

08002600 <FindT57>:

}


void FindT57(void)//寻找57号病房后的T路口
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
	while( GrayTrack2 == white || GrayTrack1 == white)
 8002604:	e04f      	b.n	80026a6 <FindT57+0xa6>
	{
		MOTOR_PWM_Out(PWMM, PWMM, PWMM, PWMM);
 8002606:	f241 7370 	movw	r3, #6000	; 0x1770
 800260a:	f241 7270 	movw	r2, #6000	; 0x1770
 800260e:	f241 7170 	movw	r1, #6000	; 0x1770
 8002612:	f241 7070 	movw	r0, #6000	; 0x1770
 8002616:	f7ff faa7 	bl	8001b68 <MOTOR_PWM_Out>
		Car_Back();
 800261a:	f7ff fb9b 	bl	8001d54 <Car_Back>
		if(GrayTrack5 == red && GrayTrack4 == white && GrayTrack3 == white)//右偏
 800261e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002622:	4837      	ldr	r0, [pc, #220]	; (8002700 <FindT57+0x100>)
 8002624:	f003 fa6e 	bl	8005b04 <HAL_GPIO_ReadPin>
 8002628:	4603      	mov	r3, r0
 800262a:	2b01      	cmp	r3, #1
 800262c:	d119      	bne.n	8002662 <FindT57+0x62>
 800262e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002632:	4833      	ldr	r0, [pc, #204]	; (8002700 <FindT57+0x100>)
 8002634:	f003 fa66 	bl	8005b04 <HAL_GPIO_ReadPin>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d111      	bne.n	8002662 <FindT57+0x62>
 800263e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002642:	4830      	ldr	r0, [pc, #192]	; (8002704 <FindT57+0x104>)
 8002644:	f003 fa5e 	bl	8005b04 <HAL_GPIO_ReadPin>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d109      	bne.n	8002662 <FindT57+0x62>
		{
			MOTOR_PWM_Out(PWML, PWMH , PWMH ,PWML);
 800264e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002652:	f242 3228 	movw	r2, #9000	; 0x2328
 8002656:	f242 3128 	movw	r1, #9000	; 0x2328
 800265a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800265e:	f7ff fa83 	bl	8001b68 <MOTOR_PWM_Out>
		}
		if(GrayTrack5 == white && GrayTrack4 == white && GrayTrack3 == red)//左偏
 8002662:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002666:	4826      	ldr	r0, [pc, #152]	; (8002700 <FindT57+0x100>)
 8002668:	f003 fa4c 	bl	8005b04 <HAL_GPIO_ReadPin>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d119      	bne.n	80026a6 <FindT57+0xa6>
 8002672:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002676:	4822      	ldr	r0, [pc, #136]	; (8002700 <FindT57+0x100>)
 8002678:	f003 fa44 	bl	8005b04 <HAL_GPIO_ReadPin>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d111      	bne.n	80026a6 <FindT57+0xa6>
 8002682:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002686:	481f      	ldr	r0, [pc, #124]	; (8002704 <FindT57+0x104>)
 8002688:	f003 fa3c 	bl	8005b04 <HAL_GPIO_ReadPin>
 800268c:	4603      	mov	r3, r0
 800268e:	2b01      	cmp	r3, #1
 8002690:	d109      	bne.n	80026a6 <FindT57+0xa6>
		{
			MOTOR_PWM_Out(PWMH, PWML, PWML, PWMH);
 8002692:	f242 3328 	movw	r3, #9000	; 0x2328
 8002696:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800269a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800269e:	f242 3028 	movw	r0, #9000	; 0x2328
 80026a2:	f7ff fa61 	bl	8001b68 <MOTOR_PWM_Out>
	while( GrayTrack2 == white || GrayTrack1 == white)
 80026a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80026aa:	4816      	ldr	r0, [pc, #88]	; (8002704 <FindT57+0x104>)
 80026ac:	f003 fa2a 	bl	8005b04 <HAL_GPIO_ReadPin>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d0a7      	beq.n	8002606 <FindT57+0x6>
 80026b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80026ba:	4812      	ldr	r0, [pc, #72]	; (8002704 <FindT57+0x104>)
 80026bc:	f003 fa22 	bl	8005b04 <HAL_GPIO_ReadPin>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d09f      	beq.n	8002606 <FindT57+0x6>
		}
	}
	Car_Go();//反转一下以刹车
 80026c6:	f7ff fb35 	bl	8001d34 <Car_Go>
	HAL_Delay(20);
 80026ca:	2014      	movs	r0, #20
 80026cc:	f002 fb46 	bl	8004d5c <HAL_Delay>
	Car_Stop();//停车
 80026d0:	f7ff fb50 	bl	8001d74 <Car_Stop>
	HAL_Delay(150);
 80026d4:	2096      	movs	r0, #150	; 0x96
 80026d6:	f002 fb41 	bl	8004d5c <HAL_Delay>


	PidWheels_Init();
 80026da:	f7fe fe99 	bl	8001410 <PidWheels_Init>
	ToRound(1, 1.45, 45, 45, 45, 45);
 80026de:	ed9f 2a0a 	vldr	s4, [pc, #40]	; 8002708 <FindT57+0x108>
 80026e2:	eddf 1a09 	vldr	s3, [pc, #36]	; 8002708 <FindT57+0x108>
 80026e6:	ed9f 1a08 	vldr	s2, [pc, #32]	; 8002708 <FindT57+0x108>
 80026ea:	eddf 0a07 	vldr	s1, [pc, #28]	; 8002708 <FindT57+0x108>
 80026ee:	ed9f 0a07 	vldr	s0, [pc, #28]	; 800270c <FindT57+0x10c>
 80026f2:	2001      	movs	r0, #1
 80026f4:	f7ff f91a 	bl	800192c <ToRound>
	Car_Stop();
 80026f8:	f7ff fb3c 	bl	8001d74 <Car_Stop>

}
 80026fc:	bf00      	nop
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	40020400 	.word	0x40020400
 8002704:	40021800 	.word	0x40021800
 8002708:	42340000 	.word	0x42340000
 800270c:	3fb9999a 	.word	0x3fb9999a

08002710 <StopDottedLine>:



void StopDottedLine(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	af00      	add	r7, sp, #0
	while(GrayTrack1  ==  white && GrayTrack7 == white &&GrayTrack2  ==  white && GrayTrack6 == white )
 8002714:	e04f      	b.n	80027b6 <StopDottedLine+0xa6>
	{
		MOTOR_PWM_Out(PWMM, PWMM, PWMM, PWMM);
 8002716:	f241 7370 	movw	r3, #6000	; 0x1770
 800271a:	f241 7270 	movw	r2, #6000	; 0x1770
 800271e:	f241 7170 	movw	r1, #6000	; 0x1770
 8002722:	f241 7070 	movw	r0, #6000	; 0x1770
 8002726:	f7ff fa1f 	bl	8001b68 <MOTOR_PWM_Out>
		Car_Back();
 800272a:	f7ff fb13 	bl	8001d54 <Car_Back>
		if(GrayTrack5 == red && GrayTrack4 == white && GrayTrack3 == white)//右偏
 800272e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002732:	4831      	ldr	r0, [pc, #196]	; (80027f8 <StopDottedLine+0xe8>)
 8002734:	f003 f9e6 	bl	8005b04 <HAL_GPIO_ReadPin>
 8002738:	4603      	mov	r3, r0
 800273a:	2b01      	cmp	r3, #1
 800273c:	d119      	bne.n	8002772 <StopDottedLine+0x62>
 800273e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002742:	482d      	ldr	r0, [pc, #180]	; (80027f8 <StopDottedLine+0xe8>)
 8002744:	f003 f9de 	bl	8005b04 <HAL_GPIO_ReadPin>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d111      	bne.n	8002772 <StopDottedLine+0x62>
 800274e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002752:	482a      	ldr	r0, [pc, #168]	; (80027fc <StopDottedLine+0xec>)
 8002754:	f003 f9d6 	bl	8005b04 <HAL_GPIO_ReadPin>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d109      	bne.n	8002772 <StopDottedLine+0x62>
		{
			MOTOR_PWM_Out(PWML, PWMH , PWMH ,PWML);
 800275e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002762:	f242 3228 	movw	r2, #9000	; 0x2328
 8002766:	f242 3128 	movw	r1, #9000	; 0x2328
 800276a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800276e:	f7ff f9fb 	bl	8001b68 <MOTOR_PWM_Out>
		}
		if(GrayTrack5 == white && GrayTrack4 == white && GrayTrack3 == red)//左偏
 8002772:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002776:	4820      	ldr	r0, [pc, #128]	; (80027f8 <StopDottedLine+0xe8>)
 8002778:	f003 f9c4 	bl	8005b04 <HAL_GPIO_ReadPin>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d119      	bne.n	80027b6 <StopDottedLine+0xa6>
 8002782:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002786:	481c      	ldr	r0, [pc, #112]	; (80027f8 <StopDottedLine+0xe8>)
 8002788:	f003 f9bc 	bl	8005b04 <HAL_GPIO_ReadPin>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d111      	bne.n	80027b6 <StopDottedLine+0xa6>
 8002792:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002796:	4819      	ldr	r0, [pc, #100]	; (80027fc <StopDottedLine+0xec>)
 8002798:	f003 f9b4 	bl	8005b04 <HAL_GPIO_ReadPin>
 800279c:	4603      	mov	r3, r0
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d109      	bne.n	80027b6 <StopDottedLine+0xa6>
		{
			MOTOR_PWM_Out(PWMH, PWML, PWML, PWMH);
 80027a2:	f242 3328 	movw	r3, #9000	; 0x2328
 80027a6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80027aa:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80027ae:	f242 3028 	movw	r0, #9000	; 0x2328
 80027b2:	f7ff f9d9 	bl	8001b68 <MOTOR_PWM_Out>
	while(GrayTrack1  ==  white && GrayTrack7 == white &&GrayTrack2  ==  white && GrayTrack6 == white )
 80027b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80027ba:	4810      	ldr	r0, [pc, #64]	; (80027fc <StopDottedLine+0xec>)
 80027bc:	f003 f9a2 	bl	8005b04 <HAL_GPIO_ReadPin>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d115      	bne.n	80027f2 <StopDottedLine+0xe2>
 80027c6:	2102      	movs	r1, #2
 80027c8:	480d      	ldr	r0, [pc, #52]	; (8002800 <StopDottedLine+0xf0>)
 80027ca:	f003 f99b 	bl	8005b04 <HAL_GPIO_ReadPin>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d10e      	bne.n	80027f2 <StopDottedLine+0xe2>
 80027d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80027d8:	4808      	ldr	r0, [pc, #32]	; (80027fc <StopDottedLine+0xec>)
 80027da:	f003 f993 	bl	8005b04 <HAL_GPIO_ReadPin>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d106      	bne.n	80027f2 <StopDottedLine+0xe2>
 80027e4:	2101      	movs	r1, #1
 80027e6:	4806      	ldr	r0, [pc, #24]	; (8002800 <StopDottedLine+0xf0>)
 80027e8:	f003 f98c 	bl	8005b04 <HAL_GPIO_ReadPin>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d091      	beq.n	8002716 <StopDottedLine+0x6>
//		{
//			StopCarInBack();
//			Car_Turn_Left();
//		}
	}
}
 80027f2:	bf00      	nop
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	40020400 	.word	0x40020400
 80027fc:	40021800 	.word	0x40021800
 8002800:	40021000 	.word	0x40021000

08002804 <turn_left_90>:

void turn_left_90()
{
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
	MOTOR_PWM_Out(1000, 1000, 1000, 1000);
 8002808:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800280c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002810:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002814:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002818:	f7ff f9a6 	bl	8001b68 <MOTOR_PWM_Out>

	PidWheels_Init();
 800281c:	f7fe fdf8 	bl	8001410 <PidWheels_Init>
	while(GrayTrack6 == white)
 8002820:	e00b      	b.n	800283a <turn_left_90+0x36>
	{
		Car_Turn_Right();
 8002822:	f7ff fab7 	bl	8001d94 <Car_Turn_Right>
		pid_speed(35, 35,35	,35);
 8002826:	eddf 1a15 	vldr	s3, [pc, #84]	; 800287c <turn_left_90+0x78>
 800282a:	ed9f 1a14 	vldr	s2, [pc, #80]	; 800287c <turn_left_90+0x78>
 800282e:	eddf 0a13 	vldr	s1, [pc, #76]	; 800287c <turn_left_90+0x78>
 8002832:	ed9f 0a12 	vldr	s0, [pc, #72]	; 800287c <turn_left_90+0x78>
 8002836:	f7fe fecd 	bl	80015d4 <pid_speed>
	while(GrayTrack6 == white)
 800283a:	2101      	movs	r1, #1
 800283c:	4810      	ldr	r0, [pc, #64]	; (8002880 <turn_left_90+0x7c>)
 800283e:	f003 f961 	bl	8005b04 <HAL_GPIO_ReadPin>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d0ec      	beq.n	8002822 <turn_left_90+0x1e>

	}
	while(GrayTrack4 == white)
 8002848:	e00b      	b.n	8002862 <turn_left_90+0x5e>
	{
		Car_Turn_Right();
 800284a:	f7ff faa3 	bl	8001d94 <Car_Turn_Right>
		pid_speed(45, 45,45	,45);
 800284e:	eddf 1a0d 	vldr	s3, [pc, #52]	; 8002884 <turn_left_90+0x80>
 8002852:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 8002884 <turn_left_90+0x80>
 8002856:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8002884 <turn_left_90+0x80>
 800285a:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8002884 <turn_left_90+0x80>
 800285e:	f7fe feb9 	bl	80015d4 <pid_speed>
	while(GrayTrack4 == white)
 8002862:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002866:	4808      	ldr	r0, [pc, #32]	; (8002888 <turn_left_90+0x84>)
 8002868:	f003 f94c 	bl	8005b04 <HAL_GPIO_ReadPin>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d0eb      	beq.n	800284a <turn_left_90+0x46>
	}
	Car_Stop();
 8002872:	f7ff fa7f 	bl	8001d74 <Car_Stop>
}
 8002876:	bf00      	nop
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	420c0000 	.word	0x420c0000
 8002880:	40021000 	.word	0x40021000
 8002884:	42340000 	.word	0x42340000
 8002888:	40020400 	.word	0x40020400

0800288c <turn_right_90>:
//		pid_speed(45, 45,45	,45);
//	}
//	Car_Stop();
//}
void turn_right_90()
{
 800288c:	b580      	push	{r7, lr}
 800288e:	af00      	add	r7, sp, #0
	MOTOR_PWM_Out(1000, 1000, 1000, 1000);
 8002890:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002894:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002898:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800289c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80028a0:	f7ff f962 	bl	8001b68 <MOTOR_PWM_Out>
	PidWheels_Init();
 80028a4:	f7fe fdb4 	bl	8001410 <PidWheels_Init>
	while(GrayTrack2 == white)
 80028a8:	e00b      	b.n	80028c2 <turn_right_90+0x36>
	{
		Car_Turn_Left();
 80028aa:	f7ff fa83 	bl	8001db4 <Car_Turn_Left>
//		MOTOR_PWM_Out(PWMTurn, PWMTurn, PWMTurn, PWMTurn);
		pid_speed(35, 35,35	,35);
 80028ae:	eddf 1a15 	vldr	s3, [pc, #84]	; 8002904 <turn_right_90+0x78>
 80028b2:	ed9f 1a14 	vldr	s2, [pc, #80]	; 8002904 <turn_right_90+0x78>
 80028b6:	eddf 0a13 	vldr	s1, [pc, #76]	; 8002904 <turn_right_90+0x78>
 80028ba:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8002904 <turn_right_90+0x78>
 80028be:	f7fe fe89 	bl	80015d4 <pid_speed>
	while(GrayTrack2 == white)
 80028c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80028c6:	4810      	ldr	r0, [pc, #64]	; (8002908 <turn_right_90+0x7c>)
 80028c8:	f003 f91c 	bl	8005b04 <HAL_GPIO_ReadPin>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d0eb      	beq.n	80028aa <turn_right_90+0x1e>

	}
	while(GrayTrack4 == white)
 80028d2:	e00b      	b.n	80028ec <turn_right_90+0x60>
	{
		Car_Turn_Left();
 80028d4:	f7ff fa6e 	bl	8001db4 <Car_Turn_Left>
//		MOTOR_PWM_Out(PWMTurn, PWMTurn, PWMTurn, PWMTurn);
		pid_speed(35, 35,35	,35);
 80028d8:	eddf 1a0a 	vldr	s3, [pc, #40]	; 8002904 <turn_right_90+0x78>
 80028dc:	ed9f 1a09 	vldr	s2, [pc, #36]	; 8002904 <turn_right_90+0x78>
 80028e0:	eddf 0a08 	vldr	s1, [pc, #32]	; 8002904 <turn_right_90+0x78>
 80028e4:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8002904 <turn_right_90+0x78>
 80028e8:	f7fe fe74 	bl	80015d4 <pid_speed>
	while(GrayTrack4 == white)
 80028ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80028f0:	4806      	ldr	r0, [pc, #24]	; (800290c <turn_right_90+0x80>)
 80028f2:	f003 f907 	bl	8005b04 <HAL_GPIO_ReadPin>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d0eb      	beq.n	80028d4 <turn_right_90+0x48>
	}
	Car_Stop();
 80028fc:	f7ff fa3a 	bl	8001d74 <Car_Stop>
}
 8002900:	bf00      	nop
 8002902:	bd80      	pop	{r7, pc}
 8002904:	420c0000 	.word	0x420c0000
 8002908:	40021800 	.word	0x40021800
 800290c:	40020400 	.word	0x40020400

08002910 <turn_2_right_90>:

void turn_2_right_90()
{
 8002910:	b580      	push	{r7, lr}
 8002912:	af00      	add	r7, sp, #0
	MOTOR_PWM_Out(1000, 1000, 1000, 1000);
 8002914:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002918:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800291c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002920:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002924:	f7ff f920 	bl	8001b68 <MOTOR_PWM_Out>
	PidWheels_Init();
 8002928:	f7fe fd72 	bl	8001410 <PidWheels_Init>
	while(GrayTrack2 == white)
 800292c:	e00b      	b.n	8002946 <turn_2_right_90+0x36>
	{
		Car_Turn_Left();
 800292e:	f7ff fa41 	bl	8001db4 <Car_Turn_Left>
		MOTOR_PWM_Out(PWMTurn, PWMTurn, PWMTurn, PWMTurn);
 8002932:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8002936:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800293a:	f640 31b8 	movw	r1, #3000	; 0xbb8
 800293e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002942:	f7ff f911 	bl	8001b68 <MOTOR_PWM_Out>
	while(GrayTrack2 == white)
 8002946:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800294a:	480f      	ldr	r0, [pc, #60]	; (8002988 <turn_2_right_90+0x78>)
 800294c:	f003 f8da 	bl	8005b04 <HAL_GPIO_ReadPin>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d0eb      	beq.n	800292e <turn_2_right_90+0x1e>
//		pid_speed(35, 35,35	,35);

	}
	while(GrayTrack4 == white)
 8002956:	e00b      	b.n	8002970 <turn_2_right_90+0x60>
	{
		Car_Turn_Left();
 8002958:	f7ff fa2c 	bl	8001db4 <Car_Turn_Left>
		MOTOR_PWM_Out(PWMTurn, PWMTurn, PWMTurn, PWMTurn);
 800295c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8002960:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002964:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8002968:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800296c:	f7ff f8fc 	bl	8001b68 <MOTOR_PWM_Out>
	while(GrayTrack4 == white)
 8002970:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002974:	4805      	ldr	r0, [pc, #20]	; (800298c <turn_2_right_90+0x7c>)
 8002976:	f003 f8c5 	bl	8005b04 <HAL_GPIO_ReadPin>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d0eb      	beq.n	8002958 <turn_2_right_90+0x48>
//		pid_speed(45, 45,45	,45);
	}
	Car_Stop();
 8002980:	f7ff f9f8 	bl	8001d74 <Car_Stop>
}
 8002984:	bf00      	nop
 8002986:	bd80      	pop	{r7, pc}
 8002988:	40021800 	.word	0x40021800
 800298c:	40020400 	.word	0x40020400

08002990 <ToCameraPoint>:

void ToCameraPoint()
{
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
	//	FindCrossInfront(1);//到十字路口

	InitRev();//循迹到指定距离
 8002994:	f7ff f828 	bl	80019e8 <InitRev>
	FindCrossInfrontToRound(0,4.3, 6000);
 8002998:	f241 7170 	movw	r1, #6000	; 0x1770
 800299c:	ed9f 0a06 	vldr	s0, [pc, #24]	; 80029b8 <ToCameraPoint+0x28>
 80029a0:	2000      	movs	r0, #0
 80029a2:	f7ff fbe1 	bl	8002168 <FindCrossInfrontToRound>
	StopCarInBack();
 80029a6:	f000 f820 	bl	80029ea <StopCarInBack>

	//	ToRound(3.2, 45,45,45,45);
	ModifyPosiAtCamera();
 80029aa:	f000 f85f 	bl	8002a6c <ModifyPosiAtCamera>
	Car_Stop();//到拍照点
 80029ae:	f7ff f9e1 	bl	8001d74 <Car_Stop>
}
 80029b2:	bf00      	nop
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	4089999a 	.word	0x4089999a

080029bc <ToCameraPoint2>:


void ToCameraPoint2(int cmd)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
	//	FindCrossInfront(1);//到十字路口

	InitRev();//循迹到指定距离
 80029c4:	f7ff f810 	bl	80019e8 <InitRev>
	FindCrossInfrontToRound(0,3.5, 6000);
 80029c8:	f241 7170 	movw	r1, #6000	; 0x1770
 80029cc:	eeb0 0a0c 	vmov.f32	s0, #12	; 0x40600000  3.5
 80029d0:	2000      	movs	r0, #0
 80029d2:	f7ff fbc9 	bl	8002168 <FindCrossInfrontToRound>
	StopCarInBack();
 80029d6:	f000 f808 	bl	80029ea <StopCarInBack>

	//	ToRound(3.2, 45,45,45,45);
	ModifyPosiAtCamera();
 80029da:	f000 f847 	bl	8002a6c <ModifyPosiAtCamera>
	Car_Stop();//到拍照点
 80029de:	f7ff f9c9 	bl	8001d74 <Car_Stop>
}
 80029e2:	bf00      	nop
 80029e4:	3708      	adds	r7, #8
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}

080029ea <StopCarInBack>:
	StopCarInBack();

}

void StopCarInBack(void)
{
 80029ea:	b580      	push	{r7, lr}
 80029ec:	af00      	add	r7, sp, #0
	Car_Go();//反转一下以刹车
 80029ee:	f7ff f9a1 	bl	8001d34 <Car_Go>
	HAL_Delay(20);
 80029f2:	2014      	movs	r0, #20
 80029f4:	f002 f9b2 	bl	8004d5c <HAL_Delay>
	Car_Stop();//停车
 80029f8:	f7ff f9bc 	bl	8001d74 <Car_Stop>
	HAL_Delay(150);
 80029fc:	2096      	movs	r0, #150	; 0x96
 80029fe:	f002 f9ad 	bl	8004d5c <HAL_Delay>
}
 8002a02:	bf00      	nop
 8002a04:	bd80      	pop	{r7, pc}
	...

08002a08 <ModifyPosiAtDotted>:

void ModifyPosiAtDotted(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0
	while(Track3 == white)
 8002a0c:	e01d      	b.n	8002a4a <ModifyPosiAtDotted+0x42>
	{
		MOTOR_PWM_Out(PWMTurn-500, PWMTurn-500, PWMTurn-500, PWMTurn-500);
 8002a0e:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8002a12:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8002a16:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8002a1a:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8002a1e:	f7ff f8a3 	bl	8001b68 <MOTOR_PWM_Out>
		if(Track4 == red) Car_Turn_Right();
 8002a22:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002a26:	480f      	ldr	r0, [pc, #60]	; (8002a64 <ModifyPosiAtDotted+0x5c>)
 8002a28:	f003 f86c 	bl	8005b04 <HAL_GPIO_ReadPin>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d101      	bne.n	8002a36 <ModifyPosiAtDotted+0x2e>
 8002a32:	f7ff f9af 	bl	8001d94 <Car_Turn_Right>
		if(Track2 == red) Car_Turn_Left();
 8002a36:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a3a:	480b      	ldr	r0, [pc, #44]	; (8002a68 <ModifyPosiAtDotted+0x60>)
 8002a3c:	f003 f862 	bl	8005b04 <HAL_GPIO_ReadPin>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d101      	bne.n	8002a4a <ModifyPosiAtDotted+0x42>
 8002a46:	f7ff f9b5 	bl	8001db4 <Car_Turn_Left>
	while(Track3 == white)
 8002a4a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002a4e:	4806      	ldr	r0, [pc, #24]	; (8002a68 <ModifyPosiAtDotted+0x60>)
 8002a50:	f003 f858 	bl	8005b04 <HAL_GPIO_ReadPin>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d0d9      	beq.n	8002a0e <ModifyPosiAtDotted+0x6>
	}
	Car_Stop();
 8002a5a:	f7ff f98b 	bl	8001d74 <Car_Stop>
}
 8002a5e:	bf00      	nop
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	40021800 	.word	0x40021800
 8002a68:	40020800 	.word	0x40020800

08002a6c <ModifyPosiAtCamera>:
	ModifyPosiAtCamera();
	Car_Stop();//到拍照点
}

void ModifyPosiAtCamera(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	af00      	add	r7, sp, #0
	while(GrayTrack4 == white)
 8002a70:	e044      	b.n	8002afc <ModifyPosiAtCamera+0x90>
	{
		MOTOR_PWM_Out(PWMTurn-500, PWMTurn-500, PWMTurn-500, PWMTurn-500);
 8002a72:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8002a76:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8002a7a:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8002a7e:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8002a82:	f7ff f871 	bl	8001b68 <MOTOR_PWM_Out>
		if(GrayTrack5 == red ||GrayTrack6 == red ) Car_Turn_Right();
 8002a86:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002a8a:	4823      	ldr	r0, [pc, #140]	; (8002b18 <ModifyPosiAtCamera+0xac>)
 8002a8c:	f003 f83a 	bl	8005b04 <HAL_GPIO_ReadPin>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d006      	beq.n	8002aa4 <ModifyPosiAtCamera+0x38>
 8002a96:	2101      	movs	r1, #1
 8002a98:	4820      	ldr	r0, [pc, #128]	; (8002b1c <ModifyPosiAtCamera+0xb0>)
 8002a9a:	f003 f833 	bl	8005b04 <HAL_GPIO_ReadPin>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d101      	bne.n	8002aa8 <ModifyPosiAtCamera+0x3c>
 8002aa4:	f7ff f976 	bl	8001d94 <Car_Turn_Right>
		if(GrayTrack3 == red || GrayTrack4 == red) Car_Turn_Left();
 8002aa8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002aac:	481c      	ldr	r0, [pc, #112]	; (8002b20 <ModifyPosiAtCamera+0xb4>)
 8002aae:	f003 f829 	bl	8005b04 <HAL_GPIO_ReadPin>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d007      	beq.n	8002ac8 <ModifyPosiAtCamera+0x5c>
 8002ab8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002abc:	4816      	ldr	r0, [pc, #88]	; (8002b18 <ModifyPosiAtCamera+0xac>)
 8002abe:	f003 f821 	bl	8005b04 <HAL_GPIO_ReadPin>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d101      	bne.n	8002acc <ModifyPosiAtCamera+0x60>
 8002ac8:	f7ff f974 	bl	8001db4 <Car_Turn_Left>
		if(GrayTrack3 == white &&  GrayTrack4 == white && GrayTrack4 == white) break;
 8002acc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002ad0:	4813      	ldr	r0, [pc, #76]	; (8002b20 <ModifyPosiAtCamera+0xb4>)
 8002ad2:	f003 f817 	bl	8005b04 <HAL_GPIO_ReadPin>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d10f      	bne.n	8002afc <ModifyPosiAtCamera+0x90>
 8002adc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ae0:	480d      	ldr	r0, [pc, #52]	; (8002b18 <ModifyPosiAtCamera+0xac>)
 8002ae2:	f003 f80f 	bl	8005b04 <HAL_GPIO_ReadPin>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d107      	bne.n	8002afc <ModifyPosiAtCamera+0x90>
 8002aec:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002af0:	4809      	ldr	r0, [pc, #36]	; (8002b18 <ModifyPosiAtCamera+0xac>)
 8002af2:	f003 f807 	bl	8005b04 <HAL_GPIO_ReadPin>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d008      	beq.n	8002b0e <ModifyPosiAtCamera+0xa2>
	while(GrayTrack4 == white)
 8002afc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b00:	4805      	ldr	r0, [pc, #20]	; (8002b18 <ModifyPosiAtCamera+0xac>)
 8002b02:	f002 ffff 	bl	8005b04 <HAL_GPIO_ReadPin>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d0b2      	beq.n	8002a72 <ModifyPosiAtCamera+0x6>
 8002b0c:	e000      	b.n	8002b10 <ModifyPosiAtCamera+0xa4>
		if(GrayTrack3 == white &&  GrayTrack4 == white && GrayTrack4 == white) break;
 8002b0e:	bf00      	nop
	}
	Car_Stop();
 8002b10:	f7ff f930 	bl	8001d74 <Car_Stop>
}
 8002b14:	bf00      	nop
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	40020400 	.word	0x40020400
 8002b1c:	40021000 	.word	0x40021000
 8002b20:	40021800 	.word	0x40021800

08002b24 <app_main_init>:
User_USART JY901_data;
float target = 55;


void app_main_init()
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
	motor_pwm_init();    //PWM启动
 8002b28:	f7fe ffc8 	bl	8001abc <motor_pwm_init>
	motor_encode_init(); //编码器启动
 8002b2c:	f7ff f952 	bl	8001dd4 <motor_encode_init>
	//	gui_init();     //OLED I2C初始化
	ssd1306_Init(); //OLED SPI初始
 8002b30:	f7fe fe14 	bl	800175c <ssd1306_Init>
	//	beep_start();
	zkb_init();//初始化占空比
 8002b34:	f7fe ff72 	bl	8001a1c <zkb_init>
	//	HAL_TIM_IC_Start_IT(&htim1,TIM_CHANNEL_1);//红外
	User_USART_Init(&JY901_data);
 8002b38:	4802      	ldr	r0, [pc, #8]	; (8002b44 <app_main_init+0x20>)
 8002b3a:	f7fe fa19 	bl	8000f70 <User_USART_Init>
}
 8002b3e:	bf00      	nop
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	20000740 	.word	0x20000740

08002b48 <app_main>:
void ToPoint1(void);
void ToPoint2(void);

void app_main()
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RasBerryReset_GPIO_Port,RasBerryReset_Pin,SET);
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002b54:	4854      	ldr	r0, [pc, #336]	; (8002ca8 <app_main+0x160>)
 8002b56:	f002 ffed 	bl	8005b34 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8002b5a:	2032      	movs	r0, #50	; 0x32
 8002b5c:	f002 f8fe 	bl	8004d5c <HAL_Delay>
	HAL_GPIO_WritePin(RasBerryReset_GPIO_Port, RasBerryReset_Pin, RESET);
 8002b60:	2200      	movs	r2, #0
 8002b62:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002b66:	4850      	ldr	r0, [pc, #320]	; (8002ca8 <app_main+0x160>)
 8002b68:	f002 ffe4 	bl	8005b34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RasBerryFlag_GPIO_Port, RasBerryFlag_Pin, SET);  //开启摄像头指令
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002b72:	484d      	ldr	r0, [pc, #308]	; (8002ca8 <app_main+0x160>)
 8002b74:	f002 ffde 	bl	8005b34 <HAL_GPIO_WritePin>
	int Not12Flay = 1;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	607b      	str	r3, [r7, #4]
	while(!btcmd_num);
 8002b7c:	bf00      	nop
 8002b7e:	4b4b      	ldr	r3, [pc, #300]	; (8002cac <app_main+0x164>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d0fb      	beq.n	8002b7e <app_main+0x36>
	last_btcmd_num = btcmd_num;
 8002b86:	4b49      	ldr	r3, [pc, #292]	; (8002cac <app_main+0x164>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a49      	ldr	r2, [pc, #292]	; (8002cb0 <app_main+0x168>)
 8002b8c:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(RasBerryFlag_GPIO_Port, RasBerryFlag_Pin, RESET);  //关掉摄像头指令
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002b94:	4844      	ldr	r0, [pc, #272]	; (8002ca8 <app_main+0x160>)
 8002b96:	f002 ffcd 	bl	8005b34 <HAL_GPIO_WritePin>
	BeepOn();
 8002b9a:	f7fe f9d1 	bl	8000f40 <BeepOn>
	HAL_Delay(1000);
 8002b9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002ba2:	f002 f8db 	bl	8004d5c <HAL_Delay>
	BeepOff();
 8002ba6:	f7fe f9d7 	bl	8000f58 <BeepOff>

	while(!HAL_GPIO_ReadPin(Pressure_GPIO_Port, Pressure_Pin));//判断是否有药
 8002baa:	bf00      	nop
 8002bac:	2102      	movs	r1, #2
 8002bae:	4841      	ldr	r0, [pc, #260]	; (8002cb4 <app_main+0x16c>)
 8002bb0:	f002 ffa8 	bl	8005b04 <HAL_GPIO_ReadPin>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d0f8      	beq.n	8002bac <app_main+0x64>

	switch(last_btcmd_num)
 8002bba:	4b3d      	ldr	r3, [pc, #244]	; (8002cb0 <app_main+0x168>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d002      	beq.n	8002bc8 <app_main+0x80>
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d005      	beq.n	8002bd2 <app_main+0x8a>
 8002bc6:	e009      	b.n	8002bdc <app_main+0x94>
	{
	case 1:
		ToPoint1();
 8002bc8:	f000 f878 	bl	8002cbc <ToPoint1>
		Not12Flay = 0;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	607b      	str	r3, [r7, #4]
		break;
 8002bd0:	e004      	b.n	8002bdc <app_main+0x94>
	case 2:
		ToPoint2();
 8002bd2:	f000 f8b9 	bl	8002d48 <ToPoint2>
		Not12Flay = 0;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	607b      	str	r3, [r7, #4]
		break;
 8002bda:	bf00      	nop
	}

	btcmd_num = 0;
 8002bdc:	4b33      	ldr	r3, [pc, #204]	; (8002cac <app_main+0x164>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	601a      	str	r2, [r3, #0]
	if(Not12Flay)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d05e      	beq.n	8002ca6 <app_main+0x15e>
	{
		ToCameraPoint();
 8002be8:	f7ff fed2 	bl	8002990 <ToCameraPoint>
		HAL_Delay(1000);
 8002bec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002bf0:	f002 f8b4 	bl	8004d5c <HAL_Delay>
		HAL_GPIO_WritePin(RasBerryFlag_GPIO_Port,RasBerryFlag_Pin, SET);   //讲io口引脚设置为高电平，作为表示提醒树莓派可以开始拍照
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002bfa:	482b      	ldr	r0, [pc, #172]	; (8002ca8 <app_main+0x160>)
 8002bfc:	f002 ff9a 	bl	8005b34 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_BOARD_GPIO_Port,LED_BOARD_Pin, SET);
 8002c00:	2201      	movs	r2, #1
 8002c02:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002c06:	482c      	ldr	r0, [pc, #176]	; (8002cb8 <app_main+0x170>)
 8002c08:	f002 ff94 	bl	8005b34 <HAL_GPIO_WritePin>
		while(!btcmd_num);
 8002c0c:	bf00      	nop
 8002c0e:	4b27      	ldr	r3, [pc, #156]	; (8002cac <app_main+0x164>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d0fb      	beq.n	8002c0e <app_main+0xc6>
		last_btcmd_num = btcmd_num;
 8002c16:	4b25      	ldr	r3, [pc, #148]	; (8002cac <app_main+0x164>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a25      	ldr	r2, [pc, #148]	; (8002cb0 <app_main+0x168>)
 8002c1c:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(LED_BOARD_GPIO_Port,LED_BOARD_Pin, RESET);
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002c24:	4824      	ldr	r0, [pc, #144]	; (8002cb8 <app_main+0x170>)
 8002c26:	f002 ff85 	bl	8005b34 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RasBerryFlag_GPIO_Port,RasBerryFlag_Pin, RESET);
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002c30:	481d      	ldr	r0, [pc, #116]	; (8002ca8 <app_main+0x160>)
 8002c32:	f002 ff7f 	bl	8005b34 <HAL_GPIO_WritePin>
		if(last_btcmd_num != 999) {ToPoint34();  while(1);}//不在此路口判断
 8002c36:	4b1e      	ldr	r3, [pc, #120]	; (8002cb0 <app_main+0x168>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d002      	beq.n	8002c48 <app_main+0x100>
 8002c42:	f000 f8cb 	bl	8002ddc <ToPoint34>
 8002c46:	e7fe      	b.n	8002c46 <app_main+0xfe>
//		HAL_GPIO_WritePin(RasBerryReset_GPIO_Port, RasBerryReset_Pin, RESET);   //rashberry引脚置为低电平
		btcmd_num = 0; //在下一个路口寻找
 8002c48:	4b18      	ldr	r3, [pc, #96]	; (8002cac <app_main+0x164>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	601a      	str	r2, [r3, #0]
		ToCameraPoint2();
 8002c4e:	f7ff feb5 	bl	80029bc <ToCameraPoint2>
		HAL_Delay(1000);
 8002c52:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002c56:	f002 f881 	bl	8004d5c <HAL_Delay>
		HAL_GPIO_WritePin(RasBerryFlag_GPIO_Port,RasBerryFlag_Pin,SET);
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002c60:	4811      	ldr	r0, [pc, #68]	; (8002ca8 <app_main+0x160>)
 8002c62:	f002 ff67 	bl	8005b34 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_BOARD_GPIO_Port,LED_BOARD_Pin, SET);
 8002c66:	2201      	movs	r2, #1
 8002c68:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002c6c:	4812      	ldr	r0, [pc, #72]	; (8002cb8 <app_main+0x170>)
 8002c6e:	f002 ff61 	bl	8005b34 <HAL_GPIO_WritePin>
		while(!btcmd_num)
 8002c72:	e003      	b.n	8002c7c <app_main+0x134>
		last_btcmd_num = btcmd_num;
 8002c74:	4b0d      	ldr	r3, [pc, #52]	; (8002cac <app_main+0x164>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a0d      	ldr	r2, [pc, #52]	; (8002cb0 <app_main+0x168>)
 8002c7a:	6013      	str	r3, [r2, #0]
		while(!btcmd_num)
 8002c7c:	4b0b      	ldr	r3, [pc, #44]	; (8002cac <app_main+0x164>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d0f7      	beq.n	8002c74 <app_main+0x12c>
		HAL_GPIO_WritePin(RasBerryFlag_GPIO_Port,RasBerryFlag_Pin,RESET);   //rashberry引脚置为低电平
 8002c84:	2200      	movs	r2, #0
 8002c86:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002c8a:	4807      	ldr	r0, [pc, #28]	; (8002ca8 <app_main+0x160>)
 8002c8c:	f002 ff52 	bl	8005b34 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_BOARD_GPIO_Port,LED_BOARD_Pin, RESET);
 8002c90:	2200      	movs	r2, #0
 8002c92:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002c96:	4808      	ldr	r0, [pc, #32]	; (8002cb8 <app_main+0x170>)
 8002c98:	f002 ff4c 	bl	8005b34 <HAL_GPIO_WritePin>
		ToPoint5768(last_btcmd_num);
 8002c9c:	4b04      	ldr	r3, [pc, #16]	; (8002cb0 <app_main+0x168>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f000 f933 	bl	8002f0c <ToPoint5768>
	}

	while(1);
 8002ca6:	e7fe      	b.n	8002ca6 <app_main+0x15e>
 8002ca8:	40021400 	.word	0x40021400
 8002cac:	2000065c 	.word	0x2000065c
 8002cb0:	20000808 	.word	0x20000808
 8002cb4:	40020800 	.word	0x40020800
 8002cb8:	40021800 	.word	0x40021800

08002cbc <ToPoint1>:
}

void ToPoint1(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	af00      	add	r7, sp, #0
	FindCrossInfront(1);
 8002cc0:	2001      	movs	r0, #1
 8002cc2:	f7ff faeb 	bl	800229c <FindCrossInfront>
	ToRound(1, 1.45, 45, 45, 45,45);
 8002cc6:	ed9f 2a1c 	vldr	s4, [pc, #112]	; 8002d38 <ToPoint1+0x7c>
 8002cca:	eddf 1a1b 	vldr	s3, [pc, #108]	; 8002d38 <ToPoint1+0x7c>
 8002cce:	ed9f 1a1a 	vldr	s2, [pc, #104]	; 8002d38 <ToPoint1+0x7c>
 8002cd2:	eddf 0a19 	vldr	s1, [pc, #100]	; 8002d38 <ToPoint1+0x7c>
 8002cd6:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8002d3c <ToPoint1+0x80>
 8002cda:	2001      	movs	r0, #1
 8002cdc:	f7fe fe26 	bl	800192c <ToRound>
	turn_left_90();
 8002ce0:	f7ff fd90 	bl	8002804 <turn_left_90>
	StopDottedLine();
 8002ce4:	f7ff fd14 	bl	8002710 <StopDottedLine>
	StopCarInBack();
 8002ce8:	f7ff fe7f 	bl	80029ea <StopCarInBack>
	ModifyPosiAtDotted();
 8002cec:	f7ff fe8c 	bl	8002a08 <ModifyPosiAtDotted>
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, RESET);//亮红灯等取药
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002cf6:	4812      	ldr	r0, [pc, #72]	; (8002d40 <ToPoint1+0x84>)
 8002cf8:	f002 ff1c 	bl	8005b34 <HAL_GPIO_WritePin>
	while(HAL_GPIO_ReadPin(Pressure_GPIO_Port, Pressure_Pin));
 8002cfc:	bf00      	nop
 8002cfe:	2102      	movs	r1, #2
 8002d00:	4810      	ldr	r0, [pc, #64]	; (8002d44 <ToPoint1+0x88>)
 8002d02:	f002 feff 	bl	8005b04 <HAL_GPIO_ReadPin>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d1f8      	bne.n	8002cfe <ToPoint1+0x42>
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, SET);//红灯灭
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002d12:	480b      	ldr	r0, [pc, #44]	; (8002d40 <ToPoint1+0x84>)
 8002d14:	f002 ff0e 	bl	8005b34 <HAL_GPIO_WritePin>
	FindCrossBack();
 8002d18:	f7ff fb42 	bl	80023a0 <FindCrossBack>
	turn_left_90();
 8002d1c:	f7ff fd72 	bl	8002804 <turn_left_90>
	StopDottedLine();
 8002d20:	f7ff fcf6 	bl	8002710 <StopDottedLine>
	StopCarInBack();
 8002d24:	f7ff fe61 	bl	80029ea <StopCarInBack>
	HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, RESET);//绿灯亮运行结束
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d2e:	4804      	ldr	r0, [pc, #16]	; (8002d40 <ToPoint1+0x84>)
 8002d30:	f002 ff00 	bl	8005b34 <HAL_GPIO_WritePin>
}
 8002d34:	bf00      	nop
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	42340000 	.word	0x42340000
 8002d3c:	3fb9999a 	.word	0x3fb9999a
 8002d40:	40021400 	.word	0x40021400
 8002d44:	40020800 	.word	0x40020800

08002d48 <ToPoint2>:

void ToPoint2(void)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	af00      	add	r7, sp, #0
	FindCrossInfront(1);
 8002d4c:	2001      	movs	r0, #1
 8002d4e:	f7ff faa5 	bl	800229c <FindCrossInfront>
	ToRound(1, 1.45, 45, 45, 45,45);
 8002d52:	ed9f 2a1e 	vldr	s4, [pc, #120]	; 8002dcc <ToPoint2+0x84>
 8002d56:	eddf 1a1d 	vldr	s3, [pc, #116]	; 8002dcc <ToPoint2+0x84>
 8002d5a:	ed9f 1a1c 	vldr	s2, [pc, #112]	; 8002dcc <ToPoint2+0x84>
 8002d5e:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8002dcc <ToPoint2+0x84>
 8002d62:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 8002dd0 <ToPoint2+0x88>
 8002d66:	2001      	movs	r0, #1
 8002d68:	f7fe fde0 	bl	800192c <ToRound>
	HAL_Delay(200);
 8002d6c:	20c8      	movs	r0, #200	; 0xc8
 8002d6e:	f001 fff5 	bl	8004d5c <HAL_Delay>
	turn_2_right_90();   //防止出现去2病房的时候在十字路口处出现急停现象
 8002d72:	f7ff fdcd 	bl	8002910 <turn_2_right_90>
	StopDottedLine();
 8002d76:	f7ff fccb 	bl	8002710 <StopDottedLine>
	StopCarInBack();
 8002d7a:	f7ff fe36 	bl	80029ea <StopCarInBack>
	ModifyPosiAtDotted();
 8002d7e:	f7ff fe43 	bl	8002a08 <ModifyPosiAtDotted>
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, RESET);//亮红灯等取药
 8002d82:	2200      	movs	r2, #0
 8002d84:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002d88:	4812      	ldr	r0, [pc, #72]	; (8002dd4 <ToPoint2+0x8c>)
 8002d8a:	f002 fed3 	bl	8005b34 <HAL_GPIO_WritePin>
	while(HAL_GPIO_ReadPin(Pressure_GPIO_Port, Pressure_Pin));
 8002d8e:	bf00      	nop
 8002d90:	2102      	movs	r1, #2
 8002d92:	4811      	ldr	r0, [pc, #68]	; (8002dd8 <ToPoint2+0x90>)
 8002d94:	f002 feb6 	bl	8005b04 <HAL_GPIO_ReadPin>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d1f8      	bne.n	8002d90 <ToPoint2+0x48>
	FindCrossBack();
 8002d9e:	f7ff faff 	bl	80023a0 <FindCrossBack>
	turn_right_90();
 8002da2:	f7ff fd73 	bl	800288c <turn_right_90>
	StopDottedLine();
 8002da6:	f7ff fcb3 	bl	8002710 <StopDottedLine>
	StopCarInBack();
 8002daa:	f7ff fe1e 	bl	80029ea <StopCarInBack>
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, SET);//红灯灭
 8002dae:	2201      	movs	r2, #1
 8002db0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002db4:	4807      	ldr	r0, [pc, #28]	; (8002dd4 <ToPoint2+0x8c>)
 8002db6:	f002 febd 	bl	8005b34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, RESET);//绿灯亮运行结束
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002dc0:	4804      	ldr	r0, [pc, #16]	; (8002dd4 <ToPoint2+0x8c>)
 8002dc2:	f002 feb7 	bl	8005b34 <HAL_GPIO_WritePin>
}
 8002dc6:	bf00      	nop
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	42340000 	.word	0x42340000
 8002dd0:	3fb9999a 	.word	0x3fb9999a
 8002dd4:	40021400 	.word	0x40021400
 8002dd8:	40020800 	.word	0x40020800

08002ddc <ToPoint34>:

void ToPoint34(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	af00      	add	r7, sp, #0
	if(btcmd_num == 3)
 8002de0:	4b44      	ldr	r3, [pc, #272]	; (8002ef4 <ToPoint34+0x118>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2b03      	cmp	r3, #3
 8002de6:	d13f      	bne.n	8002e68 <ToPoint34+0x8c>
	{
		FindCrossInfront(1);
 8002de8:	2001      	movs	r0, #1
 8002dea:	f7ff fa57 	bl	800229c <FindCrossInfront>
		ToRound(1, 1.35, 45,45,45,45);
 8002dee:	ed9f 2a42 	vldr	s4, [pc, #264]	; 8002ef8 <ToPoint34+0x11c>
 8002df2:	eddf 1a41 	vldr	s3, [pc, #260]	; 8002ef8 <ToPoint34+0x11c>
 8002df6:	ed9f 1a40 	vldr	s2, [pc, #256]	; 8002ef8 <ToPoint34+0x11c>
 8002dfa:	eddf 0a3f 	vldr	s1, [pc, #252]	; 8002ef8 <ToPoint34+0x11c>
 8002dfe:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 8002efc <ToPoint34+0x120>
 8002e02:	2001      	movs	r0, #1
 8002e04:	f7fe fd92 	bl	800192c <ToRound>
		turn_left_90();
 8002e08:	f7ff fcfc 	bl	8002804 <turn_left_90>
		StopDottedLine();
 8002e0c:	f7ff fc80 	bl	8002710 <StopDottedLine>
		StopCarInBack();//跳出巡线停车
 8002e10:	f7ff fdeb 	bl	80029ea <StopCarInBack>
		ModifyPosiAtDotted();//修正出库角度
 8002e14:	f7ff fdf8 	bl	8002a08 <ModifyPosiAtDotted>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, RESET);//亮红灯等取药
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002e1e:	4838      	ldr	r0, [pc, #224]	; (8002f00 <ToPoint34+0x124>)
 8002e20:	f002 fe88 	bl	8005b34 <HAL_GPIO_WritePin>
		while(HAL_GPIO_ReadPin(Pressure_GPIO_Port, Pressure_Pin));
 8002e24:	bf00      	nop
 8002e26:	2102      	movs	r1, #2
 8002e28:	4836      	ldr	r0, [pc, #216]	; (8002f04 <ToPoint34+0x128>)
 8002e2a:	f002 fe6b 	bl	8005b04 <HAL_GPIO_ReadPin>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d1f8      	bne.n	8002e26 <ToPoint34+0x4a>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, SET);//红灯灭
 8002e34:	2201      	movs	r2, #1
 8002e36:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002e3a:	4831      	ldr	r0, [pc, #196]	; (8002f00 <ToPoint34+0x124>)
 8002e3c:	f002 fe7a 	bl	8005b34 <HAL_GPIO_WritePin>
		FindCrossBack();
 8002e40:	f7ff faae 	bl	80023a0 <FindCrossBack>
		turn_left_90();
 8002e44:	f7ff fcde 	bl	8002804 <turn_left_90>
		StopDottedLine();
 8002e48:	f7ff fc62 	bl	8002710 <StopDottedLine>
		HAL_Delay(300);//延时以防止两次直接停车
 8002e4c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002e50:	f001 ff84 	bl	8004d5c <HAL_Delay>
		StopDottedLine();
 8002e54:	f7ff fc5c 	bl	8002710 <StopDottedLine>
		StopCarInBack();
 8002e58:	f7ff fdc7 	bl	80029ea <StopCarInBack>
		HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, RESET);//绿灯亮运行结束
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e62:	4827      	ldr	r0, [pc, #156]	; (8002f00 <ToPoint34+0x124>)
 8002e64:	f002 fe66 	bl	8005b34 <HAL_GPIO_WritePin>
	}

	if(btcmd_num == 4)
 8002e68:	4b22      	ldr	r3, [pc, #136]	; (8002ef4 <ToPoint34+0x118>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2b04      	cmp	r3, #4
 8002e6e:	d13f      	bne.n	8002ef0 <ToPoint34+0x114>
	{
		FindCrossInfront(1);
 8002e70:	2001      	movs	r0, #1
 8002e72:	f7ff fa13 	bl	800229c <FindCrossInfront>
		ToRound(1, 1.4, 45,45,45,45);
 8002e76:	ed9f 2a20 	vldr	s4, [pc, #128]	; 8002ef8 <ToPoint34+0x11c>
 8002e7a:	eddf 1a1f 	vldr	s3, [pc, #124]	; 8002ef8 <ToPoint34+0x11c>
 8002e7e:	ed9f 1a1e 	vldr	s2, [pc, #120]	; 8002ef8 <ToPoint34+0x11c>
 8002e82:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8002ef8 <ToPoint34+0x11c>
 8002e86:	ed9f 0a20 	vldr	s0, [pc, #128]	; 8002f08 <ToPoint34+0x12c>
 8002e8a:	2001      	movs	r0, #1
 8002e8c:	f7fe fd4e 	bl	800192c <ToRound>
		turn_right_90();
 8002e90:	f7ff fcfc 	bl	800288c <turn_right_90>
		StopDottedLine();
 8002e94:	f7ff fc3c 	bl	8002710 <StopDottedLine>
		StopCarInBack();//跳出巡线停车
 8002e98:	f7ff fda7 	bl	80029ea <StopCarInBack>
		ModifyPosiAtDotted();//修正出库角度
 8002e9c:	f7ff fdb4 	bl	8002a08 <ModifyPosiAtDotted>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, RESET);//亮红灯等取药
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002ea6:	4816      	ldr	r0, [pc, #88]	; (8002f00 <ToPoint34+0x124>)
 8002ea8:	f002 fe44 	bl	8005b34 <HAL_GPIO_WritePin>
		while(HAL_GPIO_ReadPin(Pressure_GPIO_Port, Pressure_Pin));
 8002eac:	bf00      	nop
 8002eae:	2102      	movs	r1, #2
 8002eb0:	4814      	ldr	r0, [pc, #80]	; (8002f04 <ToPoint34+0x128>)
 8002eb2:	f002 fe27 	bl	8005b04 <HAL_GPIO_ReadPin>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d1f8      	bne.n	8002eae <ToPoint34+0xd2>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, SET);//红灯灭
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002ec2:	480f      	ldr	r0, [pc, #60]	; (8002f00 <ToPoint34+0x124>)
 8002ec4:	f002 fe36 	bl	8005b34 <HAL_GPIO_WritePin>
		FindCrossBack();
 8002ec8:	f7ff fa6a 	bl	80023a0 <FindCrossBack>
		turn_right_90();
 8002ecc:	f7ff fcde 	bl	800288c <turn_right_90>
		StopDottedLine();
 8002ed0:	f7ff fc1e 	bl	8002710 <StopDottedLine>
		HAL_Delay(300);//延时以防止两次直接停车
 8002ed4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002ed8:	f001 ff40 	bl	8004d5c <HAL_Delay>
		StopDottedLine();
 8002edc:	f7ff fc18 	bl	8002710 <StopDottedLine>
		StopCarInBack();
 8002ee0:	f7ff fd83 	bl	80029ea <StopCarInBack>
		HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, RESET);//绿灯亮运行结束
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002eea:	4805      	ldr	r0, [pc, #20]	; (8002f00 <ToPoint34+0x124>)
 8002eec:	f002 fe22 	bl	8005b34 <HAL_GPIO_WritePin>
	}
}
 8002ef0:	bf00      	nop
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	2000065c 	.word	0x2000065c
 8002ef8:	42340000 	.word	0x42340000
 8002efc:	3faccccd 	.word	0x3faccccd
 8002f00:	40021400 	.word	0x40021400
 8002f04:	40020800 	.word	0x40020800
 8002f08:	3fb33333 	.word	0x3fb33333

08002f0c <ToPoint5768>:
void ToPoint5768(int cmd)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
	if(cmd == 5)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2b05      	cmp	r3, #5
 8002f18:	d159      	bne.n	8002fce <ToPoint5768+0xc2>
	{
		FindCrossInfront(1);
 8002f1a:	2001      	movs	r0, #1
 8002f1c:	f7ff f9be 	bl	800229c <FindCrossInfront>
		ToRound(1, 1.3, 45,45,45,45);
 8002f20:	ed9f 2ab4 	vldr	s4, [pc, #720]	; 80031f4 <ToPoint5768+0x2e8>
 8002f24:	eddf 1ab3 	vldr	s3, [pc, #716]	; 80031f4 <ToPoint5768+0x2e8>
 8002f28:	ed9f 1ab2 	vldr	s2, [pc, #712]	; 80031f4 <ToPoint5768+0x2e8>
 8002f2c:	eddf 0ab1 	vldr	s1, [pc, #708]	; 80031f4 <ToPoint5768+0x2e8>
 8002f30:	ed9f 0ab1 	vldr	s0, [pc, #708]	; 80031f8 <ToPoint5768+0x2ec>
 8002f34:	2001      	movs	r0, #1
 8002f36:	f7fe fcf9 	bl	800192c <ToRound>
		turn_left_90();
 8002f3a:	f7ff fc63 	bl	8002804 <turn_left_90>
		FindCrossInfront(1);
 8002f3e:	2001      	movs	r0, #1
 8002f40:	f7ff f9ac 	bl	800229c <FindCrossInfront>
		ToRound(1, 1.3, 45,45,45,45);
 8002f44:	ed9f 2aab 	vldr	s4, [pc, #684]	; 80031f4 <ToPoint5768+0x2e8>
 8002f48:	eddf 1aaa 	vldr	s3, [pc, #680]	; 80031f4 <ToPoint5768+0x2e8>
 8002f4c:	ed9f 1aa9 	vldr	s2, [pc, #676]	; 80031f4 <ToPoint5768+0x2e8>
 8002f50:	eddf 0aa8 	vldr	s1, [pc, #672]	; 80031f4 <ToPoint5768+0x2e8>
 8002f54:	ed9f 0aa8 	vldr	s0, [pc, #672]	; 80031f8 <ToPoint5768+0x2ec>
 8002f58:	2001      	movs	r0, #1
 8002f5a:	f7fe fce7 	bl	800192c <ToRound>
		turn_left_90();
 8002f5e:	f7ff fc51 	bl	8002804 <turn_left_90>
		StopDottedLine();
 8002f62:	f7ff fbd5 	bl	8002710 <StopDottedLine>
		StopCarInBack();
 8002f66:	f7ff fd40 	bl	80029ea <StopCarInBack>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, RESET);//亮红灯等取药
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002f70:	48a2      	ldr	r0, [pc, #648]	; (80031fc <ToPoint5768+0x2f0>)
 8002f72:	f002 fddf 	bl	8005b34 <HAL_GPIO_WritePin>
		while(HAL_GPIO_ReadPin(Pressure_GPIO_Port, Pressure_Pin));
 8002f76:	bf00      	nop
 8002f78:	2102      	movs	r1, #2
 8002f7a:	48a1      	ldr	r0, [pc, #644]	; (8003200 <ToPoint5768+0x2f4>)
 8002f7c:	f002 fdc2 	bl	8005b04 <HAL_GPIO_ReadPin>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d1f8      	bne.n	8002f78 <ToPoint5768+0x6c>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, SET);//红灯灭
 8002f86:	2201      	movs	r2, #1
 8002f88:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002f8c:	489b      	ldr	r0, [pc, #620]	; (80031fc <ToPoint5768+0x2f0>)
 8002f8e:	f002 fdd1 	bl	8005b34 <HAL_GPIO_WritePin>
		FindT5Back();
 8002f92:	f7ff faa1 	bl	80024d8 <FindT5Back>
		turn_left_90();
 8002f96:	f7ff fc35 	bl	8002804 <turn_left_90>
		FindT57();
 8002f9a:	f7ff fb31 	bl	8002600 <FindT57>
		turn_right_90();
 8002f9e:	f7ff fc75 	bl	800288c <turn_right_90>
		StopDottedLine();
 8002fa2:	f7ff fbb5 	bl	8002710 <StopDottedLine>
		HAL_Delay(300);
 8002fa6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002faa:	f001 fed7 	bl	8004d5c <HAL_Delay>
		StopDottedLine();
 8002fae:	f7ff fbaf 	bl	8002710 <StopDottedLine>
		HAL_Delay(300);
 8002fb2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002fb6:	f001 fed1 	bl	8004d5c <HAL_Delay>
		StopDottedLine();
 8002fba:	f7ff fba9 	bl	8002710 <StopDottedLine>
		StopCarInBack();
 8002fbe:	f7ff fd14 	bl	80029ea <StopCarInBack>
		HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, RESET);//绿灯亮运行结束
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002fc8:	488c      	ldr	r0, [pc, #560]	; (80031fc <ToPoint5768+0x2f0>)
 8002fca:	f002 fdb3 	bl	8005b34 <HAL_GPIO_WritePin>
	}
	if(cmd == 7)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2b07      	cmp	r3, #7
 8002fd2:	d156      	bne.n	8003082 <ToPoint5768+0x176>
	{
		ToRound(1, 1.3, 45,45,45,45);
 8002fd4:	ed9f 2a87 	vldr	s4, [pc, #540]	; 80031f4 <ToPoint5768+0x2e8>
 8002fd8:	eddf 1a86 	vldr	s3, [pc, #536]	; 80031f4 <ToPoint5768+0x2e8>
 8002fdc:	ed9f 1a85 	vldr	s2, [pc, #532]	; 80031f4 <ToPoint5768+0x2e8>
 8002fe0:	eddf 0a84 	vldr	s1, [pc, #528]	; 80031f4 <ToPoint5768+0x2e8>
 8002fe4:	ed9f 0a84 	vldr	s0, [pc, #528]	; 80031f8 <ToPoint5768+0x2ec>
 8002fe8:	2001      	movs	r0, #1
 8002fea:	f7fe fc9f 	bl	800192c <ToRound>
		turn_left_90();   //修改
 8002fee:	f7ff fc09 	bl	8002804 <turn_left_90>
		FindCrossInfront(1);
 8002ff2:	2001      	movs	r0, #1
 8002ff4:	f7ff f952 	bl	800229c <FindCrossInfront>
		ToRound(1, 1.3, 45,45,45,45);
 8002ff8:	ed9f 2a7e 	vldr	s4, [pc, #504]	; 80031f4 <ToPoint5768+0x2e8>
 8002ffc:	eddf 1a7d 	vldr	s3, [pc, #500]	; 80031f4 <ToPoint5768+0x2e8>
 8003000:	ed9f 1a7c 	vldr	s2, [pc, #496]	; 80031f4 <ToPoint5768+0x2e8>
 8003004:	eddf 0a7b 	vldr	s1, [pc, #492]	; 80031f4 <ToPoint5768+0x2e8>
 8003008:	ed9f 0a7b 	vldr	s0, [pc, #492]	; 80031f8 <ToPoint5768+0x2ec>
 800300c:	2001      	movs	r0, #1
 800300e:	f7fe fc8d 	bl	800192c <ToRound>
		turn_right_90();  //修改
 8003012:	f7ff fc3b 	bl	800288c <turn_right_90>
		StopDottedLine();
 8003016:	f7ff fb7b 	bl	8002710 <StopDottedLine>
		StopCarInBack();
 800301a:	f7ff fce6 	bl	80029ea <StopCarInBack>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, RESET);//亮红灯等取药
 800301e:	2200      	movs	r2, #0
 8003020:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003024:	4875      	ldr	r0, [pc, #468]	; (80031fc <ToPoint5768+0x2f0>)
 8003026:	f002 fd85 	bl	8005b34 <HAL_GPIO_WritePin>
		while(HAL_GPIO_ReadPin(Pressure_GPIO_Port, Pressure_Pin));
 800302a:	bf00      	nop
 800302c:	2102      	movs	r1, #2
 800302e:	4874      	ldr	r0, [pc, #464]	; (8003200 <ToPoint5768+0x2f4>)
 8003030:	f002 fd68 	bl	8005b04 <HAL_GPIO_ReadPin>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d1f8      	bne.n	800302c <ToPoint5768+0x120>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, SET);//红灯灭
 800303a:	2201      	movs	r2, #1
 800303c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003040:	486e      	ldr	r0, [pc, #440]	; (80031fc <ToPoint5768+0x2f0>)
 8003042:	f002 fd77 	bl	8005b34 <HAL_GPIO_WritePin>
		FindT5Back();
 8003046:	f7ff fa47 	bl	80024d8 <FindT5Back>
		turn_right_90();  //修改
 800304a:	f7ff fc1f 	bl	800288c <turn_right_90>
		FindT57();
 800304e:	f7ff fad7 	bl	8002600 <FindT57>
		turn_left_90();   //修改
 8003052:	f7ff fbd7 	bl	8002804 <turn_left_90>
		StopDottedLine();
 8003056:	f7ff fb5b 	bl	8002710 <StopDottedLine>
		HAL_Delay(300);
 800305a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800305e:	f001 fe7d 	bl	8004d5c <HAL_Delay>
		StopDottedLine();
 8003062:	f7ff fb55 	bl	8002710 <StopDottedLine>
		HAL_Delay(300);
 8003066:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800306a:	f001 fe77 	bl	8004d5c <HAL_Delay>
		StopDottedLine();
 800306e:	f7ff fb4f 	bl	8002710 <StopDottedLine>
		StopCarInBack();
 8003072:	f7ff fcba 	bl	80029ea <StopCarInBack>
		HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, RESET);//绿灯亮运行结束
 8003076:	2200      	movs	r2, #0
 8003078:	f44f 7100 	mov.w	r1, #512	; 0x200
 800307c:	485f      	ldr	r0, [pc, #380]	; (80031fc <ToPoint5768+0x2f0>)
 800307e:	f002 fd59 	bl	8005b34 <HAL_GPIO_WritePin>
	}
	if(cmd == 6)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2b06      	cmp	r3, #6
 8003086:	d156      	bne.n	8003136 <ToPoint5768+0x22a>
	{
		ToRound(1, 1.3, 45,45,45,45);
 8003088:	ed9f 2a5a 	vldr	s4, [pc, #360]	; 80031f4 <ToPoint5768+0x2e8>
 800308c:	eddf 1a59 	vldr	s3, [pc, #356]	; 80031f4 <ToPoint5768+0x2e8>
 8003090:	ed9f 1a58 	vldr	s2, [pc, #352]	; 80031f4 <ToPoint5768+0x2e8>
 8003094:	eddf 0a57 	vldr	s1, [pc, #348]	; 80031f4 <ToPoint5768+0x2e8>
 8003098:	ed9f 0a57 	vldr	s0, [pc, #348]	; 80031f8 <ToPoint5768+0x2ec>
 800309c:	2001      	movs	r0, #1
 800309e:	f7fe fc45 	bl	800192c <ToRound>
		turn_right_90();   //修改
 80030a2:	f7ff fbf3 	bl	800288c <turn_right_90>
		FindCrossInfront(1);
 80030a6:	2001      	movs	r0, #1
 80030a8:	f7ff f8f8 	bl	800229c <FindCrossInfront>
		ToRound(1, 1.3, 45,45,45,45);
 80030ac:	ed9f 2a51 	vldr	s4, [pc, #324]	; 80031f4 <ToPoint5768+0x2e8>
 80030b0:	eddf 1a50 	vldr	s3, [pc, #320]	; 80031f4 <ToPoint5768+0x2e8>
 80030b4:	ed9f 1a4f 	vldr	s2, [pc, #316]	; 80031f4 <ToPoint5768+0x2e8>
 80030b8:	eddf 0a4e 	vldr	s1, [pc, #312]	; 80031f4 <ToPoint5768+0x2e8>
 80030bc:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 80031f8 <ToPoint5768+0x2ec>
 80030c0:	2001      	movs	r0, #1
 80030c2:	f7fe fc33 	bl	800192c <ToRound>
		turn_right_90();  //修改
 80030c6:	f7ff fbe1 	bl	800288c <turn_right_90>
		StopDottedLine();
 80030ca:	f7ff fb21 	bl	8002710 <StopDottedLine>
		StopCarInBack();
 80030ce:	f7ff fc8c 	bl	80029ea <StopCarInBack>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, RESET);//亮红灯等取药
 80030d2:	2200      	movs	r2, #0
 80030d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80030d8:	4848      	ldr	r0, [pc, #288]	; (80031fc <ToPoint5768+0x2f0>)
 80030da:	f002 fd2b 	bl	8005b34 <HAL_GPIO_WritePin>
		while(HAL_GPIO_ReadPin(Pressure_GPIO_Port, Pressure_Pin));
 80030de:	bf00      	nop
 80030e0:	2102      	movs	r1, #2
 80030e2:	4847      	ldr	r0, [pc, #284]	; (8003200 <ToPoint5768+0x2f4>)
 80030e4:	f002 fd0e 	bl	8005b04 <HAL_GPIO_ReadPin>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d1f8      	bne.n	80030e0 <ToPoint5768+0x1d4>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, SET);//红灯灭
 80030ee:	2201      	movs	r2, #1
 80030f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80030f4:	4841      	ldr	r0, [pc, #260]	; (80031fc <ToPoint5768+0x2f0>)
 80030f6:	f002 fd1d 	bl	8005b34 <HAL_GPIO_WritePin>
		FindT5Back();
 80030fa:	f7ff f9ed 	bl	80024d8 <FindT5Back>
		turn_right_90();  //修改
 80030fe:	f7ff fbc5 	bl	800288c <turn_right_90>
		FindT57();
 8003102:	f7ff fa7d 	bl	8002600 <FindT57>
		turn_right_90();   //修改
 8003106:	f7ff fbc1 	bl	800288c <turn_right_90>
		StopDottedLine();
 800310a:	f7ff fb01 	bl	8002710 <StopDottedLine>
		HAL_Delay(300);
 800310e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003112:	f001 fe23 	bl	8004d5c <HAL_Delay>
		StopDottedLine();
 8003116:	f7ff fafb 	bl	8002710 <StopDottedLine>
		HAL_Delay(300);
 800311a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800311e:	f001 fe1d 	bl	8004d5c <HAL_Delay>
		StopDottedLine();
 8003122:	f7ff faf5 	bl	8002710 <StopDottedLine>
		StopCarInBack();
 8003126:	f7ff fc60 	bl	80029ea <StopCarInBack>
		HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, RESET);//绿灯亮运行结束
 800312a:	2200      	movs	r2, #0
 800312c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003130:	4832      	ldr	r0, [pc, #200]	; (80031fc <ToPoint5768+0x2f0>)
 8003132:	f002 fcff 	bl	8005b34 <HAL_GPIO_WritePin>
	}
	if(cmd == 6)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2b06      	cmp	r3, #6
 800313a:	d156      	bne.n	80031ea <ToPoint5768+0x2de>
	{
		ToRound(1, 1.3, 45,45,45,45);
 800313c:	ed9f 2a2d 	vldr	s4, [pc, #180]	; 80031f4 <ToPoint5768+0x2e8>
 8003140:	eddf 1a2c 	vldr	s3, [pc, #176]	; 80031f4 <ToPoint5768+0x2e8>
 8003144:	ed9f 1a2b 	vldr	s2, [pc, #172]	; 80031f4 <ToPoint5768+0x2e8>
 8003148:	eddf 0a2a 	vldr	s1, [pc, #168]	; 80031f4 <ToPoint5768+0x2e8>
 800314c:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 80031f8 <ToPoint5768+0x2ec>
 8003150:	2001      	movs	r0, #1
 8003152:	f7fe fbeb 	bl	800192c <ToRound>
		turn_right_90();   //修改
 8003156:	f7ff fb99 	bl	800288c <turn_right_90>
		FindCrossInfront(1);
 800315a:	2001      	movs	r0, #1
 800315c:	f7ff f89e 	bl	800229c <FindCrossInfront>
		ToRound(1, 1.3, 45,45,45,45);
 8003160:	ed9f 2a24 	vldr	s4, [pc, #144]	; 80031f4 <ToPoint5768+0x2e8>
 8003164:	eddf 1a23 	vldr	s3, [pc, #140]	; 80031f4 <ToPoint5768+0x2e8>
 8003168:	ed9f 1a22 	vldr	s2, [pc, #136]	; 80031f4 <ToPoint5768+0x2e8>
 800316c:	eddf 0a21 	vldr	s1, [pc, #132]	; 80031f4 <ToPoint5768+0x2e8>
 8003170:	ed9f 0a21 	vldr	s0, [pc, #132]	; 80031f8 <ToPoint5768+0x2ec>
 8003174:	2001      	movs	r0, #1
 8003176:	f7fe fbd9 	bl	800192c <ToRound>
		turn_left_90();  //修改
 800317a:	f7ff fb43 	bl	8002804 <turn_left_90>
		StopDottedLine();
 800317e:	f7ff fac7 	bl	8002710 <StopDottedLine>
		StopCarInBack();
 8003182:	f7ff fc32 	bl	80029ea <StopCarInBack>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, RESET);//亮红灯等取药
 8003186:	2200      	movs	r2, #0
 8003188:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800318c:	481b      	ldr	r0, [pc, #108]	; (80031fc <ToPoint5768+0x2f0>)
 800318e:	f002 fcd1 	bl	8005b34 <HAL_GPIO_WritePin>
		while(HAL_GPIO_ReadPin(Pressure_GPIO_Port, Pressure_Pin));
 8003192:	bf00      	nop
 8003194:	2102      	movs	r1, #2
 8003196:	481a      	ldr	r0, [pc, #104]	; (8003200 <ToPoint5768+0x2f4>)
 8003198:	f002 fcb4 	bl	8005b04 <HAL_GPIO_ReadPin>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d1f8      	bne.n	8003194 <ToPoint5768+0x288>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, SET);//红灯灭
 80031a2:	2201      	movs	r2, #1
 80031a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80031a8:	4814      	ldr	r0, [pc, #80]	; (80031fc <ToPoint5768+0x2f0>)
 80031aa:	f002 fcc3 	bl	8005b34 <HAL_GPIO_WritePin>
		FindT5Back();
 80031ae:	f7ff f993 	bl	80024d8 <FindT5Back>
		turn_left_90();  //修改
 80031b2:	f7ff fb27 	bl	8002804 <turn_left_90>
		FindT57();
 80031b6:	f7ff fa23 	bl	8002600 <FindT57>
		turn_right_90();   //修改
 80031ba:	f7ff fb67 	bl	800288c <turn_right_90>
		StopDottedLine();
 80031be:	f7ff faa7 	bl	8002710 <StopDottedLine>
		HAL_Delay(300);
 80031c2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80031c6:	f001 fdc9 	bl	8004d5c <HAL_Delay>
		StopDottedLine();
 80031ca:	f7ff faa1 	bl	8002710 <StopDottedLine>
		HAL_Delay(300);
 80031ce:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80031d2:	f001 fdc3 	bl	8004d5c <HAL_Delay>
		StopDottedLine();
 80031d6:	f7ff fa9b 	bl	8002710 <StopDottedLine>
		StopCarInBack();
 80031da:	f7ff fc06 	bl	80029ea <StopCarInBack>
		HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, RESET);//绿灯亮运行结束
 80031de:	2200      	movs	r2, #0
 80031e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80031e4:	4805      	ldr	r0, [pc, #20]	; (80031fc <ToPoint5768+0x2f0>)
 80031e6:	f002 fca5 	bl	8005b34 <HAL_GPIO_WritePin>
	}
}
 80031ea:	bf00      	nop
 80031ec:	3708      	adds	r7, #8
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	42340000 	.word	0x42340000
 80031f8:	3fa66666 	.word	0x3fa66666
 80031fc:	40021400 	.word	0x40021400
 8003200:	40020800 	.word	0x40020800

08003204 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003204:	f8df d034 	ldr.w	sp, [pc, #52]	; 800323c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003208:	480d      	ldr	r0, [pc, #52]	; (8003240 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800320a:	490e      	ldr	r1, [pc, #56]	; (8003244 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800320c:	4a0e      	ldr	r2, [pc, #56]	; (8003248 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800320e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003210:	e002      	b.n	8003218 <LoopCopyDataInit>

08003212 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003212:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003214:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003216:	3304      	adds	r3, #4

08003218 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003218:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800321a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800321c:	d3f9      	bcc.n	8003212 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800321e:	4a0b      	ldr	r2, [pc, #44]	; (800324c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003220:	4c0b      	ldr	r4, [pc, #44]	; (8003250 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003222:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003224:	e001      	b.n	800322a <LoopFillZerobss>

08003226 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003226:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003228:	3204      	adds	r2, #4

0800322a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800322a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800322c:	d3fb      	bcc.n	8003226 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800322e:	f000 fd2b 	bl	8003c88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003232:	f005 ff9d 	bl	8009170 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003236:	f000 fa35 	bl	80036a4 <main>
  bx  lr    
 800323a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800323c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003240:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003244:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 8003248:	0800c114 	.word	0x0800c114
  ldr r2, =_sbss
 800324c:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 8003250:	20000dcc 	.word	0x20000dcc

08003254 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003254:	e7fe      	b.n	8003254 <ADC_IRQHandler>
	...

08003258 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800325e:	2300      	movs	r3, #0
 8003260:	607b      	str	r3, [r7, #4]
 8003262:	4b1b      	ldr	r3, [pc, #108]	; (80032d0 <MX_DMA_Init+0x78>)
 8003264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003266:	4a1a      	ldr	r2, [pc, #104]	; (80032d0 <MX_DMA_Init+0x78>)
 8003268:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800326c:	6313      	str	r3, [r2, #48]	; 0x30
 800326e:	4b18      	ldr	r3, [pc, #96]	; (80032d0 <MX_DMA_Init+0x78>)
 8003270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003272:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003276:	607b      	str	r3, [r7, #4]
 8003278:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800327a:	2300      	movs	r3, #0
 800327c:	603b      	str	r3, [r7, #0]
 800327e:	4b14      	ldr	r3, [pc, #80]	; (80032d0 <MX_DMA_Init+0x78>)
 8003280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003282:	4a13      	ldr	r2, [pc, #76]	; (80032d0 <MX_DMA_Init+0x78>)
 8003284:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003288:	6313      	str	r3, [r2, #48]	; 0x30
 800328a:	4b11      	ldr	r3, [pc, #68]	; (80032d0 <MX_DMA_Init+0x78>)
 800328c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003292:	603b      	str	r3, [r7, #0]
 8003294:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8003296:	2200      	movs	r2, #0
 8003298:	2100      	movs	r1, #0
 800329a:	200b      	movs	r0, #11
 800329c:	f001 fe5d 	bl	8004f5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80032a0:	200b      	movs	r0, #11
 80032a2:	f001 fe76 	bl	8004f92 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80032a6:	2200      	movs	r2, #0
 80032a8:	2100      	movs	r1, #0
 80032aa:	2010      	movs	r0, #16
 80032ac:	f001 fe55 	bl	8004f5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80032b0:	2010      	movs	r0, #16
 80032b2:	f001 fe6e 	bl	8004f92 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80032b6:	2200      	movs	r2, #0
 80032b8:	2100      	movs	r1, #0
 80032ba:	203a      	movs	r0, #58	; 0x3a
 80032bc:	f001 fe4d 	bl	8004f5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80032c0:	203a      	movs	r0, #58	; 0x3a
 80032c2:	f001 fe66 	bl	8004f92 <HAL_NVIC_EnableIRQ>

}
 80032c6:	bf00      	nop
 80032c8:	3708      	adds	r7, #8
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	40023800 	.word	0x40023800

080032d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b08e      	sub	sp, #56	; 0x38
 80032d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032de:	2200      	movs	r2, #0
 80032e0:	601a      	str	r2, [r3, #0]
 80032e2:	605a      	str	r2, [r3, #4]
 80032e4:	609a      	str	r2, [r3, #8]
 80032e6:	60da      	str	r2, [r3, #12]
 80032e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80032ea:	2300      	movs	r3, #0
 80032ec:	623b      	str	r3, [r7, #32]
 80032ee:	4bab      	ldr	r3, [pc, #684]	; (800359c <MX_GPIO_Init+0x2c8>)
 80032f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f2:	4aaa      	ldr	r2, [pc, #680]	; (800359c <MX_GPIO_Init+0x2c8>)
 80032f4:	f043 0310 	orr.w	r3, r3, #16
 80032f8:	6313      	str	r3, [r2, #48]	; 0x30
 80032fa:	4ba8      	ldr	r3, [pc, #672]	; (800359c <MX_GPIO_Init+0x2c8>)
 80032fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fe:	f003 0310 	and.w	r3, r3, #16
 8003302:	623b      	str	r3, [r7, #32]
 8003304:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003306:	2300      	movs	r3, #0
 8003308:	61fb      	str	r3, [r7, #28]
 800330a:	4ba4      	ldr	r3, [pc, #656]	; (800359c <MX_GPIO_Init+0x2c8>)
 800330c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330e:	4aa3      	ldr	r2, [pc, #652]	; (800359c <MX_GPIO_Init+0x2c8>)
 8003310:	f043 0320 	orr.w	r3, r3, #32
 8003314:	6313      	str	r3, [r2, #48]	; 0x30
 8003316:	4ba1      	ldr	r3, [pc, #644]	; (800359c <MX_GPIO_Init+0x2c8>)
 8003318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331a:	f003 0320 	and.w	r3, r3, #32
 800331e:	61fb      	str	r3, [r7, #28]
 8003320:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003322:	2300      	movs	r3, #0
 8003324:	61bb      	str	r3, [r7, #24]
 8003326:	4b9d      	ldr	r3, [pc, #628]	; (800359c <MX_GPIO_Init+0x2c8>)
 8003328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332a:	4a9c      	ldr	r2, [pc, #624]	; (800359c <MX_GPIO_Init+0x2c8>)
 800332c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003330:	6313      	str	r3, [r2, #48]	; 0x30
 8003332:	4b9a      	ldr	r3, [pc, #616]	; (800359c <MX_GPIO_Init+0x2c8>)
 8003334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003336:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800333a:	61bb      	str	r3, [r7, #24]
 800333c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800333e:	2300      	movs	r3, #0
 8003340:	617b      	str	r3, [r7, #20]
 8003342:	4b96      	ldr	r3, [pc, #600]	; (800359c <MX_GPIO_Init+0x2c8>)
 8003344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003346:	4a95      	ldr	r2, [pc, #596]	; (800359c <MX_GPIO_Init+0x2c8>)
 8003348:	f043 0304 	orr.w	r3, r3, #4
 800334c:	6313      	str	r3, [r2, #48]	; 0x30
 800334e:	4b93      	ldr	r3, [pc, #588]	; (800359c <MX_GPIO_Init+0x2c8>)
 8003350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003352:	f003 0304 	and.w	r3, r3, #4
 8003356:	617b      	str	r3, [r7, #20]
 8003358:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800335a:	2300      	movs	r3, #0
 800335c:	613b      	str	r3, [r7, #16]
 800335e:	4b8f      	ldr	r3, [pc, #572]	; (800359c <MX_GPIO_Init+0x2c8>)
 8003360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003362:	4a8e      	ldr	r2, [pc, #568]	; (800359c <MX_GPIO_Init+0x2c8>)
 8003364:	f043 0301 	orr.w	r3, r3, #1
 8003368:	6313      	str	r3, [r2, #48]	; 0x30
 800336a:	4b8c      	ldr	r3, [pc, #560]	; (800359c <MX_GPIO_Init+0x2c8>)
 800336c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336e:	f003 0301 	and.w	r3, r3, #1
 8003372:	613b      	str	r3, [r7, #16]
 8003374:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003376:	2300      	movs	r3, #0
 8003378:	60fb      	str	r3, [r7, #12]
 800337a:	4b88      	ldr	r3, [pc, #544]	; (800359c <MX_GPIO_Init+0x2c8>)
 800337c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337e:	4a87      	ldr	r2, [pc, #540]	; (800359c <MX_GPIO_Init+0x2c8>)
 8003380:	f043 0302 	orr.w	r3, r3, #2
 8003384:	6313      	str	r3, [r2, #48]	; 0x30
 8003386:	4b85      	ldr	r3, [pc, #532]	; (800359c <MX_GPIO_Init+0x2c8>)
 8003388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338a:	f003 0302 	and.w	r3, r3, #2
 800338e:	60fb      	str	r3, [r7, #12]
 8003390:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003392:	2300      	movs	r3, #0
 8003394:	60bb      	str	r3, [r7, #8]
 8003396:	4b81      	ldr	r3, [pc, #516]	; (800359c <MX_GPIO_Init+0x2c8>)
 8003398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339a:	4a80      	ldr	r2, [pc, #512]	; (800359c <MX_GPIO_Init+0x2c8>)
 800339c:	f043 0308 	orr.w	r3, r3, #8
 80033a0:	6313      	str	r3, [r2, #48]	; 0x30
 80033a2:	4b7e      	ldr	r3, [pc, #504]	; (800359c <MX_GPIO_Init+0x2c8>)
 80033a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a6:	f003 0308 	and.w	r3, r3, #8
 80033aa:	60bb      	str	r3, [r7, #8]
 80033ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80033ae:	2300      	movs	r3, #0
 80033b0:	607b      	str	r3, [r7, #4]
 80033b2:	4b7a      	ldr	r3, [pc, #488]	; (800359c <MX_GPIO_Init+0x2c8>)
 80033b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b6:	4a79      	ldr	r2, [pc, #484]	; (800359c <MX_GPIO_Init+0x2c8>)
 80033b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033bc:	6313      	str	r3, [r2, #48]	; 0x30
 80033be:	4b77      	ldr	r3, [pc, #476]	; (800359c <MX_GPIO_Init+0x2c8>)
 80033c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033c6:	607b      	str	r3, [r7, #4]
 80033c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RGB_R_Pin|RGB_B_Pin, GPIO_PIN_RESET);
 80033ca:	2200      	movs	r2, #0
 80033cc:	2160      	movs	r1, #96	; 0x60
 80033ce:	4874      	ldr	r0, [pc, #464]	; (80035a0 <MX_GPIO_Init+0x2cc>)
 80033d0:	f002 fbb0 	bl	8005b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, BEEP_Pin|RasBerryFlag_Pin|RasBerryReset_Pin|OLED_CS_Pin, GPIO_PIN_RESET);
 80033d4:	2200      	movs	r2, #0
 80033d6:	f44f 5164 	mov.w	r1, #14592	; 0x3900
 80033da:	4872      	ldr	r0, [pc, #456]	; (80035a4 <MX_GPIO_Init+0x2d0>)
 80033dc:	f002 fbaa 	bl	8005b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED0_Pin|LED1_Pin, GPIO_PIN_SET);
 80033e0:	2201      	movs	r2, #1
 80033e2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80033e6:	486f      	ldr	r0, [pc, #444]	; (80035a4 <MX_GPIO_Init+0x2d0>)
 80033e8:	f002 fba4 	bl	8005b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RGB_G_GPIO_Port, RGB_G_Pin, GPIO_PIN_RESET);
 80033ec:	2200      	movs	r2, #0
 80033ee:	2101      	movs	r1, #1
 80033f0:	486d      	ldr	r0, [pc, #436]	; (80035a8 <MX_GPIO_Init+0x2d4>)
 80033f2:	f002 fb9f 	bl	8005b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, A_AIN1_Pin|A_AIN2_Pin|B_BIN1_Pin|B_BIN2_Pin
 80033f6:	2201      	movs	r2, #1
 80033f8:	f44f 71fe 	mov.w	r1, #508	; 0x1fc
 80033fc:	486b      	ldr	r0, [pc, #428]	; (80035ac <MX_GPIO_Init+0x2d8>)
 80033fe:	f002 fb99 	bl	8005b34 <HAL_GPIO_WritePin>
                          |D_AIN2_Pin|D_AIN1_Pin|C_BIN1_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(C_BIN2_GPIO_Port, C_BIN2_Pin, GPIO_PIN_SET);
 8003402:	2201      	movs	r2, #1
 8003404:	2180      	movs	r1, #128	; 0x80
 8003406:	486a      	ldr	r0, [pc, #424]	; (80035b0 <MX_GPIO_Init+0x2dc>)
 8003408:	f002 fb94 	bl	8005b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BOARD_GPIO_Port, LED_BOARD_Pin, GPIO_PIN_RESET);
 800340c:	2200      	movs	r2, #0
 800340e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003412:	4866      	ldr	r0, [pc, #408]	; (80035ac <MX_GPIO_Init+0x2d8>)
 8003414:	f002 fb8e 	bl	8005b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = KEY0_Pin|KEY1_Pin|KEY2_Pin|GrayTrack6_Pin
 8003418:	231f      	movs	r3, #31
 800341a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GrayTrack7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800341c:	2300      	movs	r3, #0
 800341e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003420:	2301      	movs	r3, #1
 8003422:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003424:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003428:	4619      	mov	r1, r3
 800342a:	485d      	ldr	r0, [pc, #372]	; (80035a0 <MX_GPIO_Init+0x2cc>)
 800342c:	f002 f9ce 	bl	80057cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = RGB_R_Pin|RGB_B_Pin;
 8003430:	2360      	movs	r3, #96	; 0x60
 8003432:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003434:	2301      	movs	r3, #1
 8003436:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003438:	2301      	movs	r3, #1
 800343a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800343c:	2303      	movs	r3, #3
 800343e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003440:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003444:	4619      	mov	r1, r3
 8003446:	4856      	ldr	r0, [pc, #344]	; (80035a0 <MX_GPIO_Init+0x2cc>)
 8003448:	f002 f9c0 	bl	80057cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = TRACK8_Pin|TRACK9_Pin;
 800344c:	23c0      	movs	r3, #192	; 0xc0
 800344e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003450:	2300      	movs	r3, #0
 8003452:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003454:	2301      	movs	r3, #1
 8003456:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003458:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800345c:	4619      	mov	r1, r3
 800345e:	4851      	ldr	r0, [pc, #324]	; (80035a4 <MX_GPIO_Init+0x2d0>)
 8003460:	f002 f9b4 	bl	80057cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = BEEP_Pin|LED0_Pin|LED1_Pin|OLED_CS_Pin;
 8003464:	f44f 531c 	mov.w	r3, #9984	; 0x2700
 8003468:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800346a:	2301      	movs	r3, #1
 800346c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800346e:	2302      	movs	r3, #2
 8003470:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003472:	2302      	movs	r3, #2
 8003474:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003476:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800347a:	4619      	mov	r1, r3
 800347c:	4849      	ldr	r0, [pc, #292]	; (80035a4 <MX_GPIO_Init+0x2d0>)
 800347e:	f002 f9a5 	bl	80057cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RGB_G_Pin;
 8003482:	2301      	movs	r3, #1
 8003484:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003486:	2301      	movs	r3, #1
 8003488:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800348a:	2301      	movs	r3, #1
 800348c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800348e:	2303      	movs	r3, #3
 8003490:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(RGB_G_GPIO_Port, &GPIO_InitStruct);
 8003492:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003496:	4619      	mov	r1, r3
 8003498:	4843      	ldr	r0, [pc, #268]	; (80035a8 <MX_GPIO_Init+0x2d4>)
 800349a:	f002 f997 	bl	80057cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Pressure_Pin;
 800349e:	2302      	movs	r3, #2
 80034a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034a2:	2300      	movs	r3, #0
 80034a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80034a6:	2302      	movs	r3, #2
 80034a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Pressure_GPIO_Port, &GPIO_InitStruct);
 80034aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034ae:	4619      	mov	r1, r3
 80034b0:	483d      	ldr	r0, [pc, #244]	; (80035a8 <MX_GPIO_Init+0x2d4>)
 80034b2:	f002 f98b 	bl	80057cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = RasBerryFlag_Pin|RasBerryReset_Pin;
 80034b6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80034ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034bc:	2301      	movs	r3, #1
 80034be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80034c0:	2301      	movs	r3, #1
 80034c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034c4:	2303      	movs	r3, #3
 80034c6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80034c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034cc:	4619      	mov	r1, r3
 80034ce:	4835      	ldr	r0, [pc, #212]	; (80035a4 <MX_GPIO_Init+0x2d0>)
 80034d0:	f002 f97c 	bl	80057cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = A_AIN1_Pin|A_AIN2_Pin|B_BIN1_Pin|B_BIN2_Pin
 80034d4:	f44f 73fe 	mov.w	r3, #508	; 0x1fc
 80034d8:	627b      	str	r3, [r7, #36]	; 0x24
                          |D_AIN2_Pin|D_AIN1_Pin|C_BIN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034da:	2301      	movs	r3, #1
 80034dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80034de:	2301      	movs	r3, #1
 80034e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80034e2:	2302      	movs	r3, #2
 80034e4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80034e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034ea:	4619      	mov	r1, r3
 80034ec:	482f      	ldr	r0, [pc, #188]	; (80035ac <MX_GPIO_Init+0x2d8>)
 80034ee:	f002 f96d 	bl	80057cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = TRACK2_Pin|TRACK3_Pin;
 80034f2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80034f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034f8:	2300      	movs	r3, #0
 80034fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80034fc:	2301      	movs	r3, #1
 80034fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003500:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003504:	4619      	mov	r1, r3
 8003506:	4828      	ldr	r0, [pc, #160]	; (80035a8 <MX_GPIO_Init+0x2d4>)
 8003508:	f002 f960 	bl	80057cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = TRACK6_Pin|TRACK1_Pin;
 800350c:	2318      	movs	r3, #24
 800350e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003510:	2300      	movs	r3, #0
 8003512:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003514:	2301      	movs	r3, #1
 8003516:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003518:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800351c:	4619      	mov	r1, r3
 800351e:	4824      	ldr	r0, [pc, #144]	; (80035b0 <MX_GPIO_Init+0x2dc>)
 8003520:	f002 f954 	bl	80057cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = C_BIN2_Pin;
 8003524:	2380      	movs	r3, #128	; 0x80
 8003526:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003528:	2301      	movs	r3, #1
 800352a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800352c:	2301      	movs	r3, #1
 800352e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003530:	2302      	movs	r3, #2
 8003532:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(C_BIN2_GPIO_Port, &GPIO_InitStruct);
 8003534:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003538:	4619      	mov	r1, r3
 800353a:	481d      	ldr	r0, [pc, #116]	; (80035b0 <MX_GPIO_Init+0x2dc>)
 800353c:	f002 f946 	bl	80057cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin */
  GPIO_InitStruct.Pin = GrayTrack1_Pin|GrayTrack2_Pin|TRACK4_Pin|GrayTrack3_Pin
 8003540:	f44f 433e 	mov.w	r3, #48640	; 0xbe00
 8003544:	627b      	str	r3, [r7, #36]	; 0x24
                          |TRACK5_Pin|TRACK7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003546:	2300      	movs	r3, #0
 8003548:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800354a:	2301      	movs	r3, #1
 800354c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800354e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003552:	4619      	mov	r1, r3
 8003554:	4815      	ldr	r0, [pc, #84]	; (80035ac <MX_GPIO_Init+0x2d8>)
 8003556:	f002 f939 	bl	80057cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_BOARD_Pin;
 800355a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800355e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003560:	2301      	movs	r3, #1
 8003562:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003564:	2301      	movs	r3, #1
 8003566:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003568:	2303      	movs	r3, #3
 800356a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_BOARD_GPIO_Port, &GPIO_InitStruct);
 800356c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003570:	4619      	mov	r1, r3
 8003572:	480e      	ldr	r0, [pc, #56]	; (80035ac <MX_GPIO_Init+0x2d8>)
 8003574:	f002 f92a 	bl	80057cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = GrayTrack4_Pin|GrayTrack5_Pin;
 8003578:	f44f 7340 	mov.w	r3, #768	; 0x300
 800357c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800357e:	2300      	movs	r3, #0
 8003580:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003582:	2301      	movs	r3, #1
 8003584:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003586:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800358a:	4619      	mov	r1, r3
 800358c:	4809      	ldr	r0, [pc, #36]	; (80035b4 <MX_GPIO_Init+0x2e0>)
 800358e:	f002 f91d 	bl	80057cc <HAL_GPIO_Init>

}
 8003592:	bf00      	nop
 8003594:	3738      	adds	r7, #56	; 0x38
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	40023800 	.word	0x40023800
 80035a0:	40021000 	.word	0x40021000
 80035a4:	40021400 	.word	0x40021400
 80035a8:	40020800 	.word	0x40020800
 80035ac:	40021800 	.word	0x40021800
 80035b0:	40020c00 	.word	0x40020c00
 80035b4:	40020400 	.word	0x40020400

080035b8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80035bc:	4b12      	ldr	r3, [pc, #72]	; (8003608 <MX_I2C1_Init+0x50>)
 80035be:	4a13      	ldr	r2, [pc, #76]	; (800360c <MX_I2C1_Init+0x54>)
 80035c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80035c2:	4b11      	ldr	r3, [pc, #68]	; (8003608 <MX_I2C1_Init+0x50>)
 80035c4:	4a12      	ldr	r2, [pc, #72]	; (8003610 <MX_I2C1_Init+0x58>)
 80035c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80035c8:	4b0f      	ldr	r3, [pc, #60]	; (8003608 <MX_I2C1_Init+0x50>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80035ce:	4b0e      	ldr	r3, [pc, #56]	; (8003608 <MX_I2C1_Init+0x50>)
 80035d0:	2200      	movs	r2, #0
 80035d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80035d4:	4b0c      	ldr	r3, [pc, #48]	; (8003608 <MX_I2C1_Init+0x50>)
 80035d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80035da:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80035dc:	4b0a      	ldr	r3, [pc, #40]	; (8003608 <MX_I2C1_Init+0x50>)
 80035de:	2200      	movs	r2, #0
 80035e0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80035e2:	4b09      	ldr	r3, [pc, #36]	; (8003608 <MX_I2C1_Init+0x50>)
 80035e4:	2200      	movs	r2, #0
 80035e6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80035e8:	4b07      	ldr	r3, [pc, #28]	; (8003608 <MX_I2C1_Init+0x50>)
 80035ea:	2200      	movs	r2, #0
 80035ec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80035ee:	4b06      	ldr	r3, [pc, #24]	; (8003608 <MX_I2C1_Init+0x50>)
 80035f0:	2200      	movs	r2, #0
 80035f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80035f4:	4804      	ldr	r0, [pc, #16]	; (8003608 <MX_I2C1_Init+0x50>)
 80035f6:	f002 fab7 	bl	8005b68 <HAL_I2C_Init>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d001      	beq.n	8003604 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003600:	f000 f8e4 	bl	80037cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003604:	bf00      	nop
 8003606:	bd80      	pop	{r7, pc}
 8003608:	20000870 	.word	0x20000870
 800360c:	40005400 	.word	0x40005400
 8003610:	000186a0 	.word	0x000186a0

08003614 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b08a      	sub	sp, #40	; 0x28
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800361c:	f107 0314 	add.w	r3, r7, #20
 8003620:	2200      	movs	r2, #0
 8003622:	601a      	str	r2, [r3, #0]
 8003624:	605a      	str	r2, [r3, #4]
 8003626:	609a      	str	r2, [r3, #8]
 8003628:	60da      	str	r2, [r3, #12]
 800362a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a19      	ldr	r2, [pc, #100]	; (8003698 <HAL_I2C_MspInit+0x84>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d12b      	bne.n	800368e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003636:	2300      	movs	r3, #0
 8003638:	613b      	str	r3, [r7, #16]
 800363a:	4b18      	ldr	r3, [pc, #96]	; (800369c <HAL_I2C_MspInit+0x88>)
 800363c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800363e:	4a17      	ldr	r2, [pc, #92]	; (800369c <HAL_I2C_MspInit+0x88>)
 8003640:	f043 0302 	orr.w	r3, r3, #2
 8003644:	6313      	str	r3, [r2, #48]	; 0x30
 8003646:	4b15      	ldr	r3, [pc, #84]	; (800369c <HAL_I2C_MspInit+0x88>)
 8003648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364a:	f003 0302 	and.w	r3, r3, #2
 800364e:	613b      	str	r3, [r7, #16]
 8003650:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003652:	23c0      	movs	r3, #192	; 0xc0
 8003654:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003656:	2312      	movs	r3, #18
 8003658:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800365a:	2301      	movs	r3, #1
 800365c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800365e:	2303      	movs	r3, #3
 8003660:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003662:	2304      	movs	r3, #4
 8003664:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003666:	f107 0314 	add.w	r3, r7, #20
 800366a:	4619      	mov	r1, r3
 800366c:	480c      	ldr	r0, [pc, #48]	; (80036a0 <HAL_I2C_MspInit+0x8c>)
 800366e:	f002 f8ad 	bl	80057cc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003672:	2300      	movs	r3, #0
 8003674:	60fb      	str	r3, [r7, #12]
 8003676:	4b09      	ldr	r3, [pc, #36]	; (800369c <HAL_I2C_MspInit+0x88>)
 8003678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367a:	4a08      	ldr	r2, [pc, #32]	; (800369c <HAL_I2C_MspInit+0x88>)
 800367c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003680:	6413      	str	r3, [r2, #64]	; 0x40
 8003682:	4b06      	ldr	r3, [pc, #24]	; (800369c <HAL_I2C_MspInit+0x88>)
 8003684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003686:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800368a:	60fb      	str	r3, [r7, #12]
 800368c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800368e:	bf00      	nop
 8003690:	3728      	adds	r7, #40	; 0x28
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	40005400 	.word	0x40005400
 800369c:	40023800 	.word	0x40023800
 80036a0:	40020400 	.word	0x40020400

080036a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80036a8:	f001 fae6 	bl	8004c78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80036ac:	f000 f824 	bl	80036f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80036b0:	f7ff fe10 	bl	80032d4 <MX_GPIO_Init>
  MX_DMA_Init();
 80036b4:	f7ff fdd0 	bl	8003258 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80036b8:	f001 f842 	bl	8004740 <MX_USART1_UART_Init>
  MX_TIM8_Init();
 80036bc:	f000 fcfa 	bl	80040b4 <MX_TIM8_Init>
  MX_TIM6_Init();
 80036c0:	f000 fcc2 	bl	8004048 <MX_TIM6_Init>
  MX_TIM2_Init();
 80036c4:	f000 fb48 	bl	8003d58 <MX_TIM2_Init>
  MX_TIM3_Init();
 80036c8:	f000 fb9a 	bl	8003e00 <MX_TIM3_Init>
  MX_TIM4_Init();
 80036cc:	f000 fc14 	bl	8003ef8 <MX_TIM4_Init>
  MX_TIM1_Init();
 80036d0:	f000 faec 	bl	8003cac <MX_TIM1_Init>
  MX_I2C1_Init();
 80036d4:	f7ff ff70 	bl	80035b8 <MX_I2C1_Init>
  MX_SPI1_Init();
 80036d8:	f000 f87e 	bl	80037d8 <MX_SPI1_Init>
  MX_TIM5_Init();
 80036dc:	f000 fc60 	bl	8003fa0 <MX_TIM5_Init>
  MX_USART2_UART_Init();
 80036e0:	f001 f858 	bl	8004794 <MX_USART2_UART_Init>
  MX_TIM9_Init();
 80036e4:	f000 fd3e 	bl	8004164 <MX_TIM9_Init>
  MX_UART5_Init();
 80036e8:	f000 fffa 	bl	80046e0 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
   app_main_init();
 80036ec:	f7ff fa1a 	bl	8002b24 <app_main_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//   printf("start\r\n");
  while (1)
  {
	  app_main();
 80036f0:	f7ff fa2a 	bl	8002b48 <app_main>
 80036f4:	e7fc      	b.n	80036f0 <main+0x4c>
	...

080036f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b094      	sub	sp, #80	; 0x50
 80036fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80036fe:	f107 0320 	add.w	r3, r7, #32
 8003702:	2230      	movs	r2, #48	; 0x30
 8003704:	2100      	movs	r1, #0
 8003706:	4618      	mov	r0, r3
 8003708:	f005 fd64 	bl	80091d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800370c:	f107 030c 	add.w	r3, r7, #12
 8003710:	2200      	movs	r2, #0
 8003712:	601a      	str	r2, [r3, #0]
 8003714:	605a      	str	r2, [r3, #4]
 8003716:	609a      	str	r2, [r3, #8]
 8003718:	60da      	str	r2, [r3, #12]
 800371a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800371c:	2300      	movs	r3, #0
 800371e:	60bb      	str	r3, [r7, #8]
 8003720:	4b28      	ldr	r3, [pc, #160]	; (80037c4 <SystemClock_Config+0xcc>)
 8003722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003724:	4a27      	ldr	r2, [pc, #156]	; (80037c4 <SystemClock_Config+0xcc>)
 8003726:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800372a:	6413      	str	r3, [r2, #64]	; 0x40
 800372c:	4b25      	ldr	r3, [pc, #148]	; (80037c4 <SystemClock_Config+0xcc>)
 800372e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003730:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003734:	60bb      	str	r3, [r7, #8]
 8003736:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003738:	2300      	movs	r3, #0
 800373a:	607b      	str	r3, [r7, #4]
 800373c:	4b22      	ldr	r3, [pc, #136]	; (80037c8 <SystemClock_Config+0xd0>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a21      	ldr	r2, [pc, #132]	; (80037c8 <SystemClock_Config+0xd0>)
 8003742:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003746:	6013      	str	r3, [r2, #0]
 8003748:	4b1f      	ldr	r3, [pc, #124]	; (80037c8 <SystemClock_Config+0xd0>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003750:	607b      	str	r3, [r7, #4]
 8003752:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003754:	2301      	movs	r3, #1
 8003756:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003758:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800375c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800375e:	2302      	movs	r3, #2
 8003760:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003762:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003766:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003768:	2304      	movs	r3, #4
 800376a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800376c:	23a8      	movs	r3, #168	; 0xa8
 800376e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003770:	2302      	movs	r3, #2
 8003772:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003774:	2304      	movs	r3, #4
 8003776:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003778:	f107 0320 	add.w	r3, r7, #32
 800377c:	4618      	mov	r0, r3
 800377e:	f002 fb37 	bl	8005df0 <HAL_RCC_OscConfig>
 8003782:	4603      	mov	r3, r0
 8003784:	2b00      	cmp	r3, #0
 8003786:	d001      	beq.n	800378c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003788:	f000 f820 	bl	80037cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800378c:	230f      	movs	r3, #15
 800378e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003790:	2302      	movs	r3, #2
 8003792:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003794:	2300      	movs	r3, #0
 8003796:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003798:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800379c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800379e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037a2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80037a4:	f107 030c 	add.w	r3, r7, #12
 80037a8:	2105      	movs	r1, #5
 80037aa:	4618      	mov	r0, r3
 80037ac:	f002 fd98 	bl	80062e0 <HAL_RCC_ClockConfig>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d001      	beq.n	80037ba <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80037b6:	f000 f809 	bl	80037cc <Error_Handler>
  }
}
 80037ba:	bf00      	nop
 80037bc:	3750      	adds	r7, #80	; 0x50
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	40023800 	.word	0x40023800
 80037c8:	40007000 	.word	0x40007000

080037cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80037cc:	b480      	push	{r7}
 80037ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80037d0:	b672      	cpsid	i
}
 80037d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80037d4:	e7fe      	b.n	80037d4 <Error_Handler+0x8>
	...

080037d8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80037dc:	4b17      	ldr	r3, [pc, #92]	; (800383c <MX_SPI1_Init+0x64>)
 80037de:	4a18      	ldr	r2, [pc, #96]	; (8003840 <MX_SPI1_Init+0x68>)
 80037e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80037e2:	4b16      	ldr	r3, [pc, #88]	; (800383c <MX_SPI1_Init+0x64>)
 80037e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80037e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80037ea:	4b14      	ldr	r3, [pc, #80]	; (800383c <MX_SPI1_Init+0x64>)
 80037ec:	2200      	movs	r2, #0
 80037ee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80037f0:	4b12      	ldr	r3, [pc, #72]	; (800383c <MX_SPI1_Init+0x64>)
 80037f2:	2200      	movs	r2, #0
 80037f4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80037f6:	4b11      	ldr	r3, [pc, #68]	; (800383c <MX_SPI1_Init+0x64>)
 80037f8:	2200      	movs	r2, #0
 80037fa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80037fc:	4b0f      	ldr	r3, [pc, #60]	; (800383c <MX_SPI1_Init+0x64>)
 80037fe:	2200      	movs	r2, #0
 8003800:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003802:	4b0e      	ldr	r3, [pc, #56]	; (800383c <MX_SPI1_Init+0x64>)
 8003804:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003808:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800380a:	4b0c      	ldr	r3, [pc, #48]	; (800383c <MX_SPI1_Init+0x64>)
 800380c:	2230      	movs	r2, #48	; 0x30
 800380e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003810:	4b0a      	ldr	r3, [pc, #40]	; (800383c <MX_SPI1_Init+0x64>)
 8003812:	2200      	movs	r2, #0
 8003814:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003816:	4b09      	ldr	r3, [pc, #36]	; (800383c <MX_SPI1_Init+0x64>)
 8003818:	2200      	movs	r2, #0
 800381a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800381c:	4b07      	ldr	r3, [pc, #28]	; (800383c <MX_SPI1_Init+0x64>)
 800381e:	2200      	movs	r2, #0
 8003820:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003822:	4b06      	ldr	r3, [pc, #24]	; (800383c <MX_SPI1_Init+0x64>)
 8003824:	220a      	movs	r2, #10
 8003826:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003828:	4804      	ldr	r0, [pc, #16]	; (800383c <MX_SPI1_Init+0x64>)
 800382a:	f002 ff55 	bl	80066d8 <HAL_SPI_Init>
 800382e:	4603      	mov	r3, r0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d001      	beq.n	8003838 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003834:	f7ff ffca 	bl	80037cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003838:	bf00      	nop
 800383a:	bd80      	pop	{r7, pc}
 800383c:	200008c4 	.word	0x200008c4
 8003840:	40013000 	.word	0x40013000

08003844 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b08a      	sub	sp, #40	; 0x28
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800384c:	f107 0314 	add.w	r3, r7, #20
 8003850:	2200      	movs	r2, #0
 8003852:	601a      	str	r2, [r3, #0]
 8003854:	605a      	str	r2, [r3, #4]
 8003856:	609a      	str	r2, [r3, #8]
 8003858:	60da      	str	r2, [r3, #12]
 800385a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a28      	ldr	r2, [pc, #160]	; (8003904 <HAL_SPI_MspInit+0xc0>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d149      	bne.n	80038fa <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003866:	2300      	movs	r3, #0
 8003868:	613b      	str	r3, [r7, #16]
 800386a:	4b27      	ldr	r3, [pc, #156]	; (8003908 <HAL_SPI_MspInit+0xc4>)
 800386c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800386e:	4a26      	ldr	r2, [pc, #152]	; (8003908 <HAL_SPI_MspInit+0xc4>)
 8003870:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003874:	6453      	str	r3, [r2, #68]	; 0x44
 8003876:	4b24      	ldr	r3, [pc, #144]	; (8003908 <HAL_SPI_MspInit+0xc4>)
 8003878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800387a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800387e:	613b      	str	r3, [r7, #16]
 8003880:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003882:	2300      	movs	r3, #0
 8003884:	60fb      	str	r3, [r7, #12]
 8003886:	4b20      	ldr	r3, [pc, #128]	; (8003908 <HAL_SPI_MspInit+0xc4>)
 8003888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800388a:	4a1f      	ldr	r2, [pc, #124]	; (8003908 <HAL_SPI_MspInit+0xc4>)
 800388c:	f043 0301 	orr.w	r3, r3, #1
 8003890:	6313      	str	r3, [r2, #48]	; 0x30
 8003892:	4b1d      	ldr	r3, [pc, #116]	; (8003908 <HAL_SPI_MspInit+0xc4>)
 8003894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003896:	f003 0301 	and.w	r3, r3, #1
 800389a:	60fb      	str	r3, [r7, #12]
 800389c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800389e:	2300      	movs	r3, #0
 80038a0:	60bb      	str	r3, [r7, #8]
 80038a2:	4b19      	ldr	r3, [pc, #100]	; (8003908 <HAL_SPI_MspInit+0xc4>)
 80038a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a6:	4a18      	ldr	r2, [pc, #96]	; (8003908 <HAL_SPI_MspInit+0xc4>)
 80038a8:	f043 0302 	orr.w	r3, r3, #2
 80038ac:	6313      	str	r3, [r2, #48]	; 0x30
 80038ae:	4b16      	ldr	r3, [pc, #88]	; (8003908 <HAL_SPI_MspInit+0xc4>)
 80038b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b2:	f003 0302 	and.w	r3, r3, #2
 80038b6:	60bb      	str	r3, [r7, #8]
 80038b8:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80038ba:	2320      	movs	r3, #32
 80038bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038be:	2302      	movs	r3, #2
 80038c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038c2:	2300      	movs	r3, #0
 80038c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038c6:	2303      	movs	r3, #3
 80038c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80038ca:	2305      	movs	r3, #5
 80038cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038ce:	f107 0314 	add.w	r3, r7, #20
 80038d2:	4619      	mov	r1, r3
 80038d4:	480d      	ldr	r0, [pc, #52]	; (800390c <HAL_SPI_MspInit+0xc8>)
 80038d6:	f001 ff79 	bl	80057cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80038da:	2330      	movs	r3, #48	; 0x30
 80038dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038de:	2302      	movs	r3, #2
 80038e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038e2:	2300      	movs	r3, #0
 80038e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038e6:	2303      	movs	r3, #3
 80038e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80038ea:	2305      	movs	r3, #5
 80038ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038ee:	f107 0314 	add.w	r3, r7, #20
 80038f2:	4619      	mov	r1, r3
 80038f4:	4806      	ldr	r0, [pc, #24]	; (8003910 <HAL_SPI_MspInit+0xcc>)
 80038f6:	f001 ff69 	bl	80057cc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80038fa:	bf00      	nop
 80038fc:	3728      	adds	r7, #40	; 0x28
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	40013000 	.word	0x40013000
 8003908:	40023800 	.word	0x40023800
 800390c:	40020000 	.word	0x40020000
 8003910:	40020400 	.word	0x40020400

08003914 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800391a:	2300      	movs	r3, #0
 800391c:	607b      	str	r3, [r7, #4]
 800391e:	4b10      	ldr	r3, [pc, #64]	; (8003960 <HAL_MspInit+0x4c>)
 8003920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003922:	4a0f      	ldr	r2, [pc, #60]	; (8003960 <HAL_MspInit+0x4c>)
 8003924:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003928:	6453      	str	r3, [r2, #68]	; 0x44
 800392a:	4b0d      	ldr	r3, [pc, #52]	; (8003960 <HAL_MspInit+0x4c>)
 800392c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800392e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003932:	607b      	str	r3, [r7, #4]
 8003934:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003936:	2300      	movs	r3, #0
 8003938:	603b      	str	r3, [r7, #0]
 800393a:	4b09      	ldr	r3, [pc, #36]	; (8003960 <HAL_MspInit+0x4c>)
 800393c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393e:	4a08      	ldr	r2, [pc, #32]	; (8003960 <HAL_MspInit+0x4c>)
 8003940:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003944:	6413      	str	r3, [r2, #64]	; 0x40
 8003946:	4b06      	ldr	r3, [pc, #24]	; (8003960 <HAL_MspInit+0x4c>)
 8003948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800394e:	603b      	str	r3, [r7, #0]
 8003950:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003952:	bf00      	nop
 8003954:	370c      	adds	r7, #12
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr
 800395e:	bf00      	nop
 8003960:	40023800 	.word	0x40023800

08003964 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003964:	b480      	push	{r7}
 8003966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8003968:	e7fe      	b.n	8003968 <NMI_Handler+0x4>

0800396a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800396a:	b480      	push	{r7}
 800396c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800396e:	e7fe      	b.n	800396e <HardFault_Handler+0x4>

08003970 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003970:	b480      	push	{r7}
 8003972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003974:	e7fe      	b.n	8003974 <MemManage_Handler+0x4>

08003976 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003976:	b480      	push	{r7}
 8003978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800397a:	e7fe      	b.n	800397a <BusFault_Handler+0x4>

0800397c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800397c:	b480      	push	{r7}
 800397e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003980:	e7fe      	b.n	8003980 <UsageFault_Handler+0x4>

08003982 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003982:	b480      	push	{r7}
 8003984:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003986:	bf00      	nop
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr

08003990 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003990:	b480      	push	{r7}
 8003992:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003994:	bf00      	nop
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr

0800399e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800399e:	b480      	push	{r7}
 80039a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80039a2:	bf00      	nop
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr

080039ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80039b0:	f001 f9b4 	bl	8004d1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80039b4:	bf00      	nop
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 80039bc:	4802      	ldr	r0, [pc, #8]	; (80039c8 <DMA1_Stream0_IRQHandler+0x10>)
 80039be:	f001 fc9b 	bl	80052f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80039c2:	bf00      	nop
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	20000b5c 	.word	0x20000b5c

080039cc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80039d0:	4802      	ldr	r0, [pc, #8]	; (80039dc <DMA1_Stream5_IRQHandler+0x10>)
 80039d2:	f001 fc91 	bl	80052f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80039d6:	bf00      	nop
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	20000d54 	.word	0x20000d54

080039e0 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80039e4:	4803      	ldr	r0, [pc, #12]	; (80039f4 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 80039e6:	f003 fc62 	bl	80072ae <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 80039ea:	4803      	ldr	r0, [pc, #12]	; (80039f8 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 80039ec:	f003 fc5f 	bl	80072ae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80039f0:	bf00      	nop
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	20000a84 	.word	0x20000a84
 80039f8:	20000b14 	.word	0x20000b14

080039fc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003a00:	4802      	ldr	r0, [pc, #8]	; (8003a0c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003a02:	f003 fc54 	bl	80072ae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003a06:	bf00      	nop
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	20000a84 	.word	0x20000a84

08003a10 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003a14:	4802      	ldr	r0, [pc, #8]	; (8003a20 <TIM1_CC_IRQHandler+0x10>)
 8003a16:	f003 fc4a 	bl	80072ae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8003a1a:	bf00      	nop
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	20000a84 	.word	0x20000a84

08003a24 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003a28:	4802      	ldr	r0, [pc, #8]	; (8003a34 <USART1_IRQHandler+0x10>)
 8003a2a:	f004 fd59 	bl	80084e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003a2e:	bf00      	nop
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	20000c1c 	.word	0x20000c1c

08003a38 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b084      	sub	sp, #16
 8003a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	uint32_t temp_flag = 0;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	60fb      	str	r3, [r7, #12]
	uint32_t temp;
	temp_flag = __HAL_UART_GET_FLAG(&huart2, UART_FLAG_IDLE);
 8003a42:	4b20      	ldr	r3, [pc, #128]	; (8003ac4 <USART2_IRQHandler+0x8c>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0310 	and.w	r3, r3, #16
 8003a4c:	2b10      	cmp	r3, #16
 8003a4e:	bf0c      	ite	eq
 8003a50:	2301      	moveq	r3, #1
 8003a52:	2300      	movne	r3, #0
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	60fb      	str	r3, [r7, #12]
	if ((temp_flag != RESET)) {
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d025      	beq.n	8003aaa <USART2_IRQHandler+0x72>
		__HAL_UART_CLEAR_IDLEFLAG(&huart2);
 8003a5e:	2300      	movs	r3, #0
 8003a60:	607b      	str	r3, [r7, #4]
 8003a62:	4b18      	ldr	r3, [pc, #96]	; (8003ac4 <USART2_IRQHandler+0x8c>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	607b      	str	r3, [r7, #4]
 8003a6a:	4b16      	ldr	r3, [pc, #88]	; (8003ac4 <USART2_IRQHandler+0x8c>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	607b      	str	r3, [r7, #4]
 8003a72:	687b      	ldr	r3, [r7, #4]
		temp = huart2.Instance->SR;
 8003a74:	4b13      	ldr	r3, [pc, #76]	; (8003ac4 <USART2_IRQHandler+0x8c>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	60bb      	str	r3, [r7, #8]
		temp = huart2.Instance->DR;
 8003a7c:	4b11      	ldr	r3, [pc, #68]	; (8003ac4 <USART2_IRQHandler+0x8c>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	60bb      	str	r3, [r7, #8]
		HAL_UART_DMAStop(&huart2);
 8003a84:	480f      	ldr	r0, [pc, #60]	; (8003ac4 <USART2_IRQHandler+0x8c>)
 8003a86:	f004 fcd0 	bl	800842a <HAL_UART_DMAStop>
		temp = hdma_usart2_rx.Instance->NDTR;
 8003a8a:	4b0f      	ldr	r3, [pc, #60]	; (8003ac8 <USART2_IRQHandler+0x90>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	60bb      	str	r3, [r7, #8]
		//F1的板�????	temp = hdma_usart3_rx.Instance->CNDTR;
		JY901_data.Rx_len = RXBUFFER_LEN - temp;
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	f1c3 0363 	rsb	r3, r3, #99	; 0x63
 8003a9a:	b2da      	uxtb	r2, r3
 8003a9c:	4b0b      	ldr	r3, [pc, #44]	; (8003acc <USART2_IRQHandler+0x94>)
 8003a9e:	705a      	strb	r2, [r3, #1]
		JY901_Process();					//按照自己�????求改写这个函�????
 8003aa0:	f7fd fa8a 	bl	8000fb8 <JY901_Process>
		JY901_data.Rx_flag = 1;
 8003aa4:	4b09      	ldr	r3, [pc, #36]	; (8003acc <USART2_IRQHandler+0x94>)
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	701a      	strb	r2, [r3, #0]
	}
	HAL_UART_Receive_DMA(&huart2, JY901_data.RxBuffer, RXBUFFER_LEN);
 8003aaa:	2263      	movs	r2, #99	; 0x63
 8003aac:	4908      	ldr	r1, [pc, #32]	; (8003ad0 <USART2_IRQHandler+0x98>)
 8003aae:	4805      	ldr	r0, [pc, #20]	; (8003ac4 <USART2_IRQHandler+0x8c>)
 8003ab0:	f004 fc8b 	bl	80083ca <HAL_UART_Receive_DMA>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003ab4:	4803      	ldr	r0, [pc, #12]	; (8003ac4 <USART2_IRQHandler+0x8c>)
 8003ab6:	f004 fd13 	bl	80084e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003aba:	bf00      	nop
 8003abc:	3710      	adds	r7, #16
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	20000c60 	.word	0x20000c60
 8003ac8:	20000d54 	.word	0x20000d54
 8003acc:	20000740 	.word	0x20000740
 8003ad0:	20000743 	.word	0x20000743

08003ad4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003ad8:	4802      	ldr	r0, [pc, #8]	; (8003ae4 <TIM6_DAC_IRQHandler+0x10>)
 8003ada:	f003 fbe8 	bl	80072ae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003ade:	bf00      	nop
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	2000091c 	.word	0x2000091c

08003ae8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003aec:	4802      	ldr	r0, [pc, #8]	; (8003af8 <DMA2_Stream2_IRQHandler+0x10>)
 8003aee:	f001 fc03 	bl	80052f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8003af2:	bf00      	nop
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	20000bbc 	.word	0x20000bbc

08003afc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003afc:	b480      	push	{r7}
 8003afe:	af00      	add	r7, sp, #0
	return 1;
 8003b00:	2301      	movs	r3, #1
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr

08003b0c <_kill>:

int _kill(int pid, int sig)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b082      	sub	sp, #8
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003b16:	f005 fb25 	bl	8009164 <__errno>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	2216      	movs	r2, #22
 8003b1e:	601a      	str	r2, [r3, #0]
	return -1;
 8003b20:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3708      	adds	r7, #8
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <_exit>:

void _exit (int status)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003b34:	f04f 31ff 	mov.w	r1, #4294967295
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f7ff ffe7 	bl	8003b0c <_kill>
	while (1) {}		/* Make sure we hang here */
 8003b3e:	e7fe      	b.n	8003b3e <_exit+0x12>

08003b40 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b086      	sub	sp, #24
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	60b9      	str	r1, [r7, #8]
 8003b4a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	617b      	str	r3, [r7, #20]
 8003b50:	e00a      	b.n	8003b68 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003b52:	f3af 8000 	nop.w
 8003b56:	4601      	mov	r1, r0
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	1c5a      	adds	r2, r3, #1
 8003b5c:	60ba      	str	r2, [r7, #8]
 8003b5e:	b2ca      	uxtb	r2, r1
 8003b60:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	3301      	adds	r3, #1
 8003b66:	617b      	str	r3, [r7, #20]
 8003b68:	697a      	ldr	r2, [r7, #20]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	dbf0      	blt.n	8003b52 <_read+0x12>
	}

return len;
 8003b70:	687b      	ldr	r3, [r7, #4]
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3718      	adds	r7, #24
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}

08003b7a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003b7a:	b580      	push	{r7, lr}
 8003b7c:	b086      	sub	sp, #24
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	60f8      	str	r0, [r7, #12]
 8003b82:	60b9      	str	r1, [r7, #8]
 8003b84:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b86:	2300      	movs	r3, #0
 8003b88:	617b      	str	r3, [r7, #20]
 8003b8a:	e009      	b.n	8003ba0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	1c5a      	adds	r2, r3, #1
 8003b90:	60ba      	str	r2, [r7, #8]
 8003b92:	781b      	ldrb	r3, [r3, #0]
 8003b94:	4618      	mov	r0, r3
 8003b96:	f000 ffbf 	bl	8004b18 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	3301      	adds	r3, #1
 8003b9e:	617b      	str	r3, [r7, #20]
 8003ba0:	697a      	ldr	r2, [r7, #20]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	dbf1      	blt.n	8003b8c <_write+0x12>
	}
	return len;
 8003ba8:	687b      	ldr	r3, [r7, #4]
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3718      	adds	r7, #24
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}

08003bb2 <_close>:

int _close(int file)
{
 8003bb2:	b480      	push	{r7}
 8003bb4:	b083      	sub	sp, #12
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	6078      	str	r0, [r7, #4]
	return -1;
 8003bba:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	370c      	adds	r7, #12
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr

08003bca <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003bca:	b480      	push	{r7}
 8003bcc:	b083      	sub	sp, #12
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
 8003bd2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003bda:	605a      	str	r2, [r3, #4]
	return 0;
 8003bdc:	2300      	movs	r3, #0
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	370c      	adds	r7, #12
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr

08003bea <_isatty>:

int _isatty(int file)
{
 8003bea:	b480      	push	{r7}
 8003bec:	b083      	sub	sp, #12
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	6078      	str	r0, [r7, #4]
	return 1;
 8003bf2:	2301      	movs	r3, #1
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	370c      	adds	r7, #12
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr

08003c00 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b085      	sub	sp, #20
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	60f8      	str	r0, [r7, #12]
 8003c08:	60b9      	str	r1, [r7, #8]
 8003c0a:	607a      	str	r2, [r7, #4]
	return 0;
 8003c0c:	2300      	movs	r3, #0
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3714      	adds	r7, #20
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr
	...

08003c1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b086      	sub	sp, #24
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c24:	4a14      	ldr	r2, [pc, #80]	; (8003c78 <_sbrk+0x5c>)
 8003c26:	4b15      	ldr	r3, [pc, #84]	; (8003c7c <_sbrk+0x60>)
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c30:	4b13      	ldr	r3, [pc, #76]	; (8003c80 <_sbrk+0x64>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d102      	bne.n	8003c3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c38:	4b11      	ldr	r3, [pc, #68]	; (8003c80 <_sbrk+0x64>)
 8003c3a:	4a12      	ldr	r2, [pc, #72]	; (8003c84 <_sbrk+0x68>)
 8003c3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c3e:	4b10      	ldr	r3, [pc, #64]	; (8003c80 <_sbrk+0x64>)
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4413      	add	r3, r2
 8003c46:	693a      	ldr	r2, [r7, #16]
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d207      	bcs.n	8003c5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003c4c:	f005 fa8a 	bl	8009164 <__errno>
 8003c50:	4603      	mov	r3, r0
 8003c52:	220c      	movs	r2, #12
 8003c54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003c56:	f04f 33ff 	mov.w	r3, #4294967295
 8003c5a:	e009      	b.n	8003c70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003c5c:	4b08      	ldr	r3, [pc, #32]	; (8003c80 <_sbrk+0x64>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003c62:	4b07      	ldr	r3, [pc, #28]	; (8003c80 <_sbrk+0x64>)
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4413      	add	r3, r2
 8003c6a:	4a05      	ldr	r2, [pc, #20]	; (8003c80 <_sbrk+0x64>)
 8003c6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3718      	adds	r7, #24
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	20020000 	.word	0x20020000
 8003c7c:	00000400 	.word	0x00000400
 8003c80:	20000658 	.word	0x20000658
 8003c84:	20000dd0 	.word	0x20000dd0

08003c88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003c8c:	4b06      	ldr	r3, [pc, #24]	; (8003ca8 <SystemInit+0x20>)
 8003c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c92:	4a05      	ldr	r2, [pc, #20]	; (8003ca8 <SystemInit+0x20>)
 8003c94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003c9c:	bf00      	nop
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr
 8003ca6:	bf00      	nop
 8003ca8:	e000ed00 	.word	0xe000ed00

08003cac <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim9;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b086      	sub	sp, #24
 8003cb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003cb2:	f107 0310 	add.w	r3, r7, #16
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	601a      	str	r2, [r3, #0]
 8003cba:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003cbc:	463b      	mov	r3, r7
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	601a      	str	r2, [r3, #0]
 8003cc2:	605a      	str	r2, [r3, #4]
 8003cc4:	609a      	str	r2, [r3, #8]
 8003cc6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003cc8:	4b21      	ldr	r3, [pc, #132]	; (8003d50 <MX_TIM1_Init+0xa4>)
 8003cca:	4a22      	ldr	r2, [pc, #136]	; (8003d54 <MX_TIM1_Init+0xa8>)
 8003ccc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168-1;
 8003cce:	4b20      	ldr	r3, [pc, #128]	; (8003d50 <MX_TIM1_Init+0xa4>)
 8003cd0:	22a7      	movs	r2, #167	; 0xa7
 8003cd2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003cd4:	4b1e      	ldr	r3, [pc, #120]	; (8003d50 <MX_TIM1_Init+0xa4>)
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003cda:	4b1d      	ldr	r3, [pc, #116]	; (8003d50 <MX_TIM1_Init+0xa4>)
 8003cdc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ce0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ce2:	4b1b      	ldr	r3, [pc, #108]	; (8003d50 <MX_TIM1_Init+0xa4>)
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003ce8:	4b19      	ldr	r3, [pc, #100]	; (8003d50 <MX_TIM1_Init+0xa4>)
 8003cea:	2200      	movs	r2, #0
 8003cec:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003cee:	4b18      	ldr	r3, [pc, #96]	; (8003d50 <MX_TIM1_Init+0xa4>)
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8003cf4:	4816      	ldr	r0, [pc, #88]	; (8003d50 <MX_TIM1_Init+0xa4>)
 8003cf6:	f003 f957 	bl	8006fa8 <HAL_TIM_IC_Init>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d001      	beq.n	8003d04 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8003d00:	f7ff fd64 	bl	80037cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d04:	2300      	movs	r3, #0
 8003d06:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003d0c:	f107 0310 	add.w	r3, r7, #16
 8003d10:	4619      	mov	r1, r3
 8003d12:	480f      	ldr	r0, [pc, #60]	; (8003d50 <MX_TIM1_Init+0xa4>)
 8003d14:	f004 fa4c 	bl	80081b0 <HAL_TIMEx_MasterConfigSynchronization>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d001      	beq.n	8003d22 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8003d1e:	f7ff fd55 	bl	80037cc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003d22:	2300      	movs	r3, #0
 8003d24:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003d26:	2301      	movs	r3, #1
 8003d28:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003d32:	463b      	mov	r3, r7
 8003d34:	2200      	movs	r2, #0
 8003d36:	4619      	mov	r1, r3
 8003d38:	4805      	ldr	r0, [pc, #20]	; (8003d50 <MX_TIM1_Init+0xa4>)
 8003d3a:	f003 fbc0 	bl	80074be <HAL_TIM_IC_ConfigChannel>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d001      	beq.n	8003d48 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8003d44:	f7ff fd42 	bl	80037cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003d48:	bf00      	nop
 8003d4a:	3718      	adds	r7, #24
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	20000a84 	.word	0x20000a84
 8003d54:	40010000 	.word	0x40010000

08003d58 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b08c      	sub	sp, #48	; 0x30
 8003d5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003d5e:	f107 030c 	add.w	r3, r7, #12
 8003d62:	2224      	movs	r2, #36	; 0x24
 8003d64:	2100      	movs	r1, #0
 8003d66:	4618      	mov	r0, r3
 8003d68:	f005 fa34 	bl	80091d4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d6c:	1d3b      	adds	r3, r7, #4
 8003d6e:	2200      	movs	r2, #0
 8003d70:	601a      	str	r2, [r3, #0]
 8003d72:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003d74:	4b21      	ldr	r3, [pc, #132]	; (8003dfc <MX_TIM2_Init+0xa4>)
 8003d76:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003d7a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003d7c:	4b1f      	ldr	r3, [pc, #124]	; (8003dfc <MX_TIM2_Init+0xa4>)
 8003d7e:	2200      	movs	r2, #0
 8003d80:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d82:	4b1e      	ldr	r3, [pc, #120]	; (8003dfc <MX_TIM2_Init+0xa4>)
 8003d84:	2200      	movs	r2, #0
 8003d86:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8003d88:	4b1c      	ldr	r3, [pc, #112]	; (8003dfc <MX_TIM2_Init+0xa4>)
 8003d8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d8e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d90:	4b1a      	ldr	r3, [pc, #104]	; (8003dfc <MX_TIM2_Init+0xa4>)
 8003d92:	2200      	movs	r2, #0
 8003d94:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003d96:	4b19      	ldr	r3, [pc, #100]	; (8003dfc <MX_TIM2_Init+0xa4>)
 8003d98:	2280      	movs	r2, #128	; 0x80
 8003d9a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003da0:	2300      	movs	r3, #0
 8003da2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003da4:	2301      	movs	r3, #1
 8003da6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003da8:	2300      	movs	r3, #0
 8003daa:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003dac:	2300      	movs	r3, #0
 8003dae:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003db0:	2300      	movs	r3, #0
 8003db2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003db4:	2301      	movs	r3, #1
 8003db6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003db8:	2300      	movs	r3, #0
 8003dba:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8003dc0:	f107 030c 	add.w	r3, r7, #12
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	480d      	ldr	r0, [pc, #52]	; (8003dfc <MX_TIM2_Init+0xa4>)
 8003dc8:	f003 f93d 	bl	8007046 <HAL_TIM_Encoder_Init>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d001      	beq.n	8003dd6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8003dd2:	f7ff fcfb 	bl	80037cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003dde:	1d3b      	adds	r3, r7, #4
 8003de0:	4619      	mov	r1, r3
 8003de2:	4806      	ldr	r0, [pc, #24]	; (8003dfc <MX_TIM2_Init+0xa4>)
 8003de4:	f004 f9e4 	bl	80081b0 <HAL_TIMEx_MasterConfigSynchronization>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d001      	beq.n	8003df2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8003dee:	f7ff fced 	bl	80037cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003df2:	bf00      	nop
 8003df4:	3730      	adds	r7, #48	; 0x30
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	200009f4 	.word	0x200009f4

08003e00 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b08a      	sub	sp, #40	; 0x28
 8003e04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e06:	f107 0320 	add.w	r3, r7, #32
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	601a      	str	r2, [r3, #0]
 8003e0e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003e10:	1d3b      	adds	r3, r7, #4
 8003e12:	2200      	movs	r2, #0
 8003e14:	601a      	str	r2, [r3, #0]
 8003e16:	605a      	str	r2, [r3, #4]
 8003e18:	609a      	str	r2, [r3, #8]
 8003e1a:	60da      	str	r2, [r3, #12]
 8003e1c:	611a      	str	r2, [r3, #16]
 8003e1e:	615a      	str	r2, [r3, #20]
 8003e20:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003e22:	4b33      	ldr	r3, [pc, #204]	; (8003ef0 <MX_TIM3_Init+0xf0>)
 8003e24:	4a33      	ldr	r2, [pc, #204]	; (8003ef4 <MX_TIM3_Init+0xf4>)
 8003e26:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003e28:	4b31      	ldr	r3, [pc, #196]	; (8003ef0 <MX_TIM3_Init+0xf0>)
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e2e:	4b30      	ldr	r3, [pc, #192]	; (8003ef0 <MX_TIM3_Init+0xf0>)
 8003e30:	2200      	movs	r2, #0
 8003e32:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 8400;
 8003e34:	4b2e      	ldr	r3, [pc, #184]	; (8003ef0 <MX_TIM3_Init+0xf0>)
 8003e36:	f242 02d0 	movw	r2, #8400	; 0x20d0
 8003e3a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e3c:	4b2c      	ldr	r3, [pc, #176]	; (8003ef0 <MX_TIM3_Init+0xf0>)
 8003e3e:	2200      	movs	r2, #0
 8003e40:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003e42:	4b2b      	ldr	r3, [pc, #172]	; (8003ef0 <MX_TIM3_Init+0xf0>)
 8003e44:	2280      	movs	r2, #128	; 0x80
 8003e46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003e48:	4829      	ldr	r0, [pc, #164]	; (8003ef0 <MX_TIM3_Init+0xf0>)
 8003e4a:	f002 ff95 	bl	8006d78 <HAL_TIM_PWM_Init>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d001      	beq.n	8003e58 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8003e54:	f7ff fcba 	bl	80037cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003e60:	f107 0320 	add.w	r3, r7, #32
 8003e64:	4619      	mov	r1, r3
 8003e66:	4822      	ldr	r0, [pc, #136]	; (8003ef0 <MX_TIM3_Init+0xf0>)
 8003e68:	f004 f9a2 	bl	80081b0 <HAL_TIMEx_MasterConfigSynchronization>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d001      	beq.n	8003e76 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8003e72:	f7ff fcab 	bl	80037cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003e76:	2360      	movs	r3, #96	; 0x60
 8003e78:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 2000;
 8003e7a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003e7e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003e80:	2300      	movs	r3, #0
 8003e82:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003e84:	2300      	movs	r3, #0
 8003e86:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003e88:	1d3b      	adds	r3, r7, #4
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	4818      	ldr	r0, [pc, #96]	; (8003ef0 <MX_TIM3_Init+0xf0>)
 8003e90:	f003 fbaa 	bl	80075e8 <HAL_TIM_PWM_ConfigChannel>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d001      	beq.n	8003e9e <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8003e9a:	f7ff fc97 	bl	80037cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003e9e:	1d3b      	adds	r3, r7, #4
 8003ea0:	2204      	movs	r2, #4
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	4812      	ldr	r0, [pc, #72]	; (8003ef0 <MX_TIM3_Init+0xf0>)
 8003ea6:	f003 fb9f 	bl	80075e8 <HAL_TIM_PWM_ConfigChannel>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d001      	beq.n	8003eb4 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8003eb0:	f7ff fc8c 	bl	80037cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003eb4:	1d3b      	adds	r3, r7, #4
 8003eb6:	2208      	movs	r2, #8
 8003eb8:	4619      	mov	r1, r3
 8003eba:	480d      	ldr	r0, [pc, #52]	; (8003ef0 <MX_TIM3_Init+0xf0>)
 8003ebc:	f003 fb94 	bl	80075e8 <HAL_TIM_PWM_ConfigChannel>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d001      	beq.n	8003eca <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 8003ec6:	f7ff fc81 	bl	80037cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003eca:	1d3b      	adds	r3, r7, #4
 8003ecc:	220c      	movs	r2, #12
 8003ece:	4619      	mov	r1, r3
 8003ed0:	4807      	ldr	r0, [pc, #28]	; (8003ef0 <MX_TIM3_Init+0xf0>)
 8003ed2:	f003 fb89 	bl	80075e8 <HAL_TIM_PWM_ConfigChannel>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d001      	beq.n	8003ee0 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8003edc:	f7ff fc76 	bl	80037cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003ee0:	4803      	ldr	r0, [pc, #12]	; (8003ef0 <MX_TIM3_Init+0xf0>)
 8003ee2:	f000 fb7d 	bl	80045e0 <HAL_TIM_MspPostInit>

}
 8003ee6:	bf00      	nop
 8003ee8:	3728      	adds	r7, #40	; 0x28
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	20000a3c 	.word	0x20000a3c
 8003ef4:	40000400 	.word	0x40000400

08003ef8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b08c      	sub	sp, #48	; 0x30
 8003efc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003efe:	f107 030c 	add.w	r3, r7, #12
 8003f02:	2224      	movs	r2, #36	; 0x24
 8003f04:	2100      	movs	r1, #0
 8003f06:	4618      	mov	r0, r3
 8003f08:	f005 f964 	bl	80091d4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f0c:	1d3b      	adds	r3, r7, #4
 8003f0e:	2200      	movs	r2, #0
 8003f10:	601a      	str	r2, [r3, #0]
 8003f12:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003f14:	4b20      	ldr	r3, [pc, #128]	; (8003f98 <MX_TIM4_Init+0xa0>)
 8003f16:	4a21      	ldr	r2, [pc, #132]	; (8003f9c <MX_TIM4_Init+0xa4>)
 8003f18:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003f1a:	4b1f      	ldr	r3, [pc, #124]	; (8003f98 <MX_TIM4_Init+0xa0>)
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f20:	4b1d      	ldr	r3, [pc, #116]	; (8003f98 <MX_TIM4_Init+0xa0>)
 8003f22:	2200      	movs	r2, #0
 8003f24:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003f26:	4b1c      	ldr	r3, [pc, #112]	; (8003f98 <MX_TIM4_Init+0xa0>)
 8003f28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f2c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f2e:	4b1a      	ldr	r3, [pc, #104]	; (8003f98 <MX_TIM4_Init+0xa0>)
 8003f30:	2200      	movs	r2, #0
 8003f32:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003f34:	4b18      	ldr	r3, [pc, #96]	; (8003f98 <MX_TIM4_Init+0xa0>)
 8003f36:	2280      	movs	r2, #128	; 0x80
 8003f38:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003f42:	2301      	movs	r3, #1
 8003f44:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003f46:	2300      	movs	r3, #0
 8003f48:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003f52:	2301      	movs	r3, #1
 8003f54:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003f56:	2300      	movs	r3, #0
 8003f58:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8003f5e:	f107 030c 	add.w	r3, r7, #12
 8003f62:	4619      	mov	r1, r3
 8003f64:	480c      	ldr	r0, [pc, #48]	; (8003f98 <MX_TIM4_Init+0xa0>)
 8003f66:	f003 f86e 	bl	8007046 <HAL_TIM_Encoder_Init>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d001      	beq.n	8003f74 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8003f70:	f7ff fc2c 	bl	80037cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f74:	2300      	movs	r3, #0
 8003f76:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003f7c:	1d3b      	adds	r3, r7, #4
 8003f7e:	4619      	mov	r1, r3
 8003f80:	4805      	ldr	r0, [pc, #20]	; (8003f98 <MX_TIM4_Init+0xa0>)
 8003f82:	f004 f915 	bl	80081b0 <HAL_TIMEx_MasterConfigSynchronization>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d001      	beq.n	8003f90 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8003f8c:	f7ff fc1e 	bl	80037cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003f90:	bf00      	nop
 8003f92:	3730      	adds	r7, #48	; 0x30
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	20000964 	.word	0x20000964
 8003f9c:	40000800 	.word	0x40000800

08003fa0 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b08c      	sub	sp, #48	; 0x30
 8003fa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003fa6:	f107 030c 	add.w	r3, r7, #12
 8003faa:	2224      	movs	r2, #36	; 0x24
 8003fac:	2100      	movs	r1, #0
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f005 f910 	bl	80091d4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003fb4:	1d3b      	adds	r3, r7, #4
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	601a      	str	r2, [r3, #0]
 8003fba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003fbc:	4b20      	ldr	r3, [pc, #128]	; (8004040 <MX_TIM5_Init+0xa0>)
 8003fbe:	4a21      	ldr	r2, [pc, #132]	; (8004044 <MX_TIM5_Init+0xa4>)
 8003fc0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8003fc2:	4b1f      	ldr	r3, [pc, #124]	; (8004040 <MX_TIM5_Init+0xa0>)
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fc8:	4b1d      	ldr	r3, [pc, #116]	; (8004040 <MX_TIM5_Init+0xa0>)
 8003fca:	2200      	movs	r2, #0
 8003fcc:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8003fce:	4b1c      	ldr	r3, [pc, #112]	; (8004040 <MX_TIM5_Init+0xa0>)
 8003fd0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003fd4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003fd6:	4b1a      	ldr	r3, [pc, #104]	; (8004040 <MX_TIM5_Init+0xa0>)
 8003fd8:	2200      	movs	r2, #0
 8003fda:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003fdc:	4b18      	ldr	r3, [pc, #96]	; (8004040 <MX_TIM5_Init+0xa0>)
 8003fde:	2280      	movs	r2, #128	; 0x80
 8003fe0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003fea:	2301      	movs	r3, #1
 8003fec:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003ffe:	2300      	movs	r3, #0
 8004000:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8004002:	2300      	movs	r3, #0
 8004004:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8004006:	f107 030c 	add.w	r3, r7, #12
 800400a:	4619      	mov	r1, r3
 800400c:	480c      	ldr	r0, [pc, #48]	; (8004040 <MX_TIM5_Init+0xa0>)
 800400e:	f003 f81a 	bl	8007046 <HAL_TIM_Encoder_Init>
 8004012:	4603      	mov	r3, r0
 8004014:	2b00      	cmp	r3, #0
 8004016:	d001      	beq.n	800401c <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8004018:	f7ff fbd8 	bl	80037cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800401c:	2300      	movs	r3, #0
 800401e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004020:	2300      	movs	r3, #0
 8004022:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004024:	1d3b      	adds	r3, r7, #4
 8004026:	4619      	mov	r1, r3
 8004028:	4805      	ldr	r0, [pc, #20]	; (8004040 <MX_TIM5_Init+0xa0>)
 800402a:	f004 f8c1 	bl	80081b0 <HAL_TIMEx_MasterConfigSynchronization>
 800402e:	4603      	mov	r3, r0
 8004030:	2b00      	cmp	r3, #0
 8004032:	d001      	beq.n	8004038 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8004034:	f7ff fbca 	bl	80037cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8004038:	bf00      	nop
 800403a:	3730      	adds	r7, #48	; 0x30
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}
 8004040:	200009ac 	.word	0x200009ac
 8004044:	40000c00 	.word	0x40000c00

08004048 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b082      	sub	sp, #8
 800404c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800404e:	463b      	mov	r3, r7
 8004050:	2200      	movs	r2, #0
 8004052:	601a      	str	r2, [r3, #0]
 8004054:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8004056:	4b15      	ldr	r3, [pc, #84]	; (80040ac <MX_TIM6_Init+0x64>)
 8004058:	4a15      	ldr	r2, [pc, #84]	; (80040b0 <MX_TIM6_Init+0x68>)
 800405a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 840-1;
 800405c:	4b13      	ldr	r3, [pc, #76]	; (80040ac <MX_TIM6_Init+0x64>)
 800405e:	f240 3247 	movw	r2, #839	; 0x347
 8004062:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004064:	4b11      	ldr	r3, [pc, #68]	; (80040ac <MX_TIM6_Init+0x64>)
 8004066:	2200      	movs	r2, #0
 8004068:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000-1;
 800406a:	4b10      	ldr	r3, [pc, #64]	; (80040ac <MX_TIM6_Init+0x64>)
 800406c:	f242 720f 	movw	r2, #9999	; 0x270f
 8004070:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004072:	4b0e      	ldr	r3, [pc, #56]	; (80040ac <MX_TIM6_Init+0x64>)
 8004074:	2280      	movs	r2, #128	; 0x80
 8004076:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004078:	480c      	ldr	r0, [pc, #48]	; (80040ac <MX_TIM6_Init+0x64>)
 800407a:	f002 fdbd 	bl	8006bf8 <HAL_TIM_Base_Init>
 800407e:	4603      	mov	r3, r0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d001      	beq.n	8004088 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8004084:	f7ff fba2 	bl	80037cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004088:	2300      	movs	r3, #0
 800408a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800408c:	2300      	movs	r3, #0
 800408e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004090:	463b      	mov	r3, r7
 8004092:	4619      	mov	r1, r3
 8004094:	4805      	ldr	r0, [pc, #20]	; (80040ac <MX_TIM6_Init+0x64>)
 8004096:	f004 f88b 	bl	80081b0 <HAL_TIMEx_MasterConfigSynchronization>
 800409a:	4603      	mov	r3, r0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d001      	beq.n	80040a4 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80040a0:	f7ff fb94 	bl	80037cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80040a4:	bf00      	nop
 80040a6:	3708      	adds	r7, #8
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	2000091c 	.word	0x2000091c
 80040b0:	40001000 	.word	0x40001000

080040b4 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b08c      	sub	sp, #48	; 0x30
 80040b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80040ba:	f107 030c 	add.w	r3, r7, #12
 80040be:	2224      	movs	r2, #36	; 0x24
 80040c0:	2100      	movs	r1, #0
 80040c2:	4618      	mov	r0, r3
 80040c4:	f005 f886 	bl	80091d4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80040c8:	1d3b      	adds	r3, r7, #4
 80040ca:	2200      	movs	r2, #0
 80040cc:	601a      	str	r2, [r3, #0]
 80040ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80040d0:	4b22      	ldr	r3, [pc, #136]	; (800415c <MX_TIM8_Init+0xa8>)
 80040d2:	4a23      	ldr	r2, [pc, #140]	; (8004160 <MX_TIM8_Init+0xac>)
 80040d4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80040d6:	4b21      	ldr	r3, [pc, #132]	; (800415c <MX_TIM8_Init+0xa8>)
 80040d8:	2200      	movs	r2, #0
 80040da:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040dc:	4b1f      	ldr	r3, [pc, #124]	; (800415c <MX_TIM8_Init+0xa8>)
 80040de:	2200      	movs	r2, #0
 80040e0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80040e2:	4b1e      	ldr	r3, [pc, #120]	; (800415c <MX_TIM8_Init+0xa8>)
 80040e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80040e8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040ea:	4b1c      	ldr	r3, [pc, #112]	; (800415c <MX_TIM8_Init+0xa8>)
 80040ec:	2200      	movs	r2, #0
 80040ee:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80040f0:	4b1a      	ldr	r3, [pc, #104]	; (800415c <MX_TIM8_Init+0xa8>)
 80040f2:	2200      	movs	r2, #0
 80040f4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80040f6:	4b19      	ldr	r3, [pc, #100]	; (800415c <MX_TIM8_Init+0xa8>)
 80040f8:	2280      	movs	r2, #128	; 0x80
 80040fa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80040fc:	2303      	movs	r3, #3
 80040fe:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004100:	2300      	movs	r3, #0
 8004102:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004104:	2301      	movs	r3, #1
 8004106:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004108:	2300      	movs	r3, #0
 800410a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800410c:	2300      	movs	r3, #0
 800410e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004110:	2300      	movs	r3, #0
 8004112:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004114:	2301      	movs	r3, #1
 8004116:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004118:	2300      	movs	r3, #0
 800411a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800411c:	2300      	movs	r3, #0
 800411e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8004120:	f107 030c 	add.w	r3, r7, #12
 8004124:	4619      	mov	r1, r3
 8004126:	480d      	ldr	r0, [pc, #52]	; (800415c <MX_TIM8_Init+0xa8>)
 8004128:	f002 ff8d 	bl	8007046 <HAL_TIM_Encoder_Init>
 800412c:	4603      	mov	r3, r0
 800412e:	2b00      	cmp	r3, #0
 8004130:	d001      	beq.n	8004136 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8004132:	f7ff fb4b 	bl	80037cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004136:	2300      	movs	r3, #0
 8004138:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800413a:	2300      	movs	r3, #0
 800413c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800413e:	1d3b      	adds	r3, r7, #4
 8004140:	4619      	mov	r1, r3
 8004142:	4806      	ldr	r0, [pc, #24]	; (800415c <MX_TIM8_Init+0xa8>)
 8004144:	f004 f834 	bl	80081b0 <HAL_TIMEx_MasterConfigSynchronization>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d001      	beq.n	8004152 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 800414e:	f7ff fb3d 	bl	80037cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8004152:	bf00      	nop
 8004154:	3730      	adds	r7, #48	; 0x30
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	20000acc 	.word	0x20000acc
 8004160:	40010400 	.word	0x40010400

08004164 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b08c      	sub	sp, #48	; 0x30
 8004168:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800416a:	f107 0320 	add.w	r3, r7, #32
 800416e:	2200      	movs	r2, #0
 8004170:	601a      	str	r2, [r3, #0]
 8004172:	605a      	str	r2, [r3, #4]
 8004174:	609a      	str	r2, [r3, #8]
 8004176:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004178:	1d3b      	adds	r3, r7, #4
 800417a:	2200      	movs	r2, #0
 800417c:	601a      	str	r2, [r3, #0]
 800417e:	605a      	str	r2, [r3, #4]
 8004180:	609a      	str	r2, [r3, #8]
 8004182:	60da      	str	r2, [r3, #12]
 8004184:	611a      	str	r2, [r3, #16]
 8004186:	615a      	str	r2, [r3, #20]
 8004188:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800418a:	4b2b      	ldr	r3, [pc, #172]	; (8004238 <MX_TIM9_Init+0xd4>)
 800418c:	4a2b      	ldr	r2, [pc, #172]	; (800423c <MX_TIM9_Init+0xd8>)
 800418e:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 1680-1;
 8004190:	4b29      	ldr	r3, [pc, #164]	; (8004238 <MX_TIM9_Init+0xd4>)
 8004192:	f240 628f 	movw	r2, #1679	; 0x68f
 8004196:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004198:	4b27      	ldr	r3, [pc, #156]	; (8004238 <MX_TIM9_Init+0xd4>)
 800419a:	2200      	movs	r2, #0
 800419c:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 100-1;
 800419e:	4b26      	ldr	r3, [pc, #152]	; (8004238 <MX_TIM9_Init+0xd4>)
 80041a0:	2263      	movs	r2, #99	; 0x63
 80041a2:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80041a4:	4b24      	ldr	r3, [pc, #144]	; (8004238 <MX_TIM9_Init+0xd4>)
 80041a6:	2200      	movs	r2, #0
 80041a8:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80041aa:	4b23      	ldr	r3, [pc, #140]	; (8004238 <MX_TIM9_Init+0xd4>)
 80041ac:	2280      	movs	r2, #128	; 0x80
 80041ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80041b0:	4821      	ldr	r0, [pc, #132]	; (8004238 <MX_TIM9_Init+0xd4>)
 80041b2:	f002 fd21 	bl	8006bf8 <HAL_TIM_Base_Init>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d001      	beq.n	80041c0 <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 80041bc:	f7ff fb06 	bl	80037cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80041c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80041c4:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80041c6:	f107 0320 	add.w	r3, r7, #32
 80041ca:	4619      	mov	r1, r3
 80041cc:	481a      	ldr	r0, [pc, #104]	; (8004238 <MX_TIM9_Init+0xd4>)
 80041ce:	f003 fac9 	bl	8007764 <HAL_TIM_ConfigClockSource>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d001      	beq.n	80041dc <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 80041d8:	f7ff faf8 	bl	80037cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 80041dc:	4816      	ldr	r0, [pc, #88]	; (8004238 <MX_TIM9_Init+0xd4>)
 80041de:	f002 fdcb 	bl	8006d78 <HAL_TIM_PWM_Init>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d001      	beq.n	80041ec <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 80041e8:	f7ff faf0 	bl	80037cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80041ec:	2360      	movs	r3, #96	; 0x60
 80041ee:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 80041f0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80041f4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80041f6:	2300      	movs	r3, #0
 80041f8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80041fa:	2300      	movs	r3, #0
 80041fc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80041fe:	1d3b      	adds	r3, r7, #4
 8004200:	2200      	movs	r2, #0
 8004202:	4619      	mov	r1, r3
 8004204:	480c      	ldr	r0, [pc, #48]	; (8004238 <MX_TIM9_Init+0xd4>)
 8004206:	f003 f9ef 	bl	80075e8 <HAL_TIM_PWM_ConfigChannel>
 800420a:	4603      	mov	r3, r0
 800420c:	2b00      	cmp	r3, #0
 800420e:	d001      	beq.n	8004214 <MX_TIM9_Init+0xb0>
  {
    Error_Handler();
 8004210:	f7ff fadc 	bl	80037cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004214:	1d3b      	adds	r3, r7, #4
 8004216:	2204      	movs	r2, #4
 8004218:	4619      	mov	r1, r3
 800421a:	4807      	ldr	r0, [pc, #28]	; (8004238 <MX_TIM9_Init+0xd4>)
 800421c:	f003 f9e4 	bl	80075e8 <HAL_TIM_PWM_ConfigChannel>
 8004220:	4603      	mov	r3, r0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d001      	beq.n	800422a <MX_TIM9_Init+0xc6>
  {
    Error_Handler();
 8004226:	f7ff fad1 	bl	80037cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 800422a:	4803      	ldr	r0, [pc, #12]	; (8004238 <MX_TIM9_Init+0xd4>)
 800422c:	f000 f9d8 	bl	80045e0 <HAL_TIM_MspPostInit>

}
 8004230:	bf00      	nop
 8004232:	3730      	adds	r7, #48	; 0x30
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}
 8004238:	20000b14 	.word	0x20000b14
 800423c:	40014000 	.word	0x40014000

08004240 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b08a      	sub	sp, #40	; 0x28
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004248:	f107 0314 	add.w	r3, r7, #20
 800424c:	2200      	movs	r2, #0
 800424e:	601a      	str	r2, [r3, #0]
 8004250:	605a      	str	r2, [r3, #4]
 8004252:	609a      	str	r2, [r3, #8]
 8004254:	60da      	str	r2, [r3, #12]
 8004256:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM1)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a25      	ldr	r2, [pc, #148]	; (80042f4 <HAL_TIM_IC_MspInit+0xb4>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d144      	bne.n	80042ec <HAL_TIM_IC_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004262:	2300      	movs	r3, #0
 8004264:	613b      	str	r3, [r7, #16]
 8004266:	4b24      	ldr	r3, [pc, #144]	; (80042f8 <HAL_TIM_IC_MspInit+0xb8>)
 8004268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800426a:	4a23      	ldr	r2, [pc, #140]	; (80042f8 <HAL_TIM_IC_MspInit+0xb8>)
 800426c:	f043 0301 	orr.w	r3, r3, #1
 8004270:	6453      	str	r3, [r2, #68]	; 0x44
 8004272:	4b21      	ldr	r3, [pc, #132]	; (80042f8 <HAL_TIM_IC_MspInit+0xb8>)
 8004274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004276:	f003 0301 	and.w	r3, r3, #1
 800427a:	613b      	str	r3, [r7, #16]
 800427c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800427e:	2300      	movs	r3, #0
 8004280:	60fb      	str	r3, [r7, #12]
 8004282:	4b1d      	ldr	r3, [pc, #116]	; (80042f8 <HAL_TIM_IC_MspInit+0xb8>)
 8004284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004286:	4a1c      	ldr	r2, [pc, #112]	; (80042f8 <HAL_TIM_IC_MspInit+0xb8>)
 8004288:	f043 0301 	orr.w	r3, r3, #1
 800428c:	6313      	str	r3, [r2, #48]	; 0x30
 800428e:	4b1a      	ldr	r3, [pc, #104]	; (80042f8 <HAL_TIM_IC_MspInit+0xb8>)
 8004290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004292:	f003 0301 	and.w	r3, r3, #1
 8004296:	60fb      	str	r3, [r7, #12]
 8004298:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800429a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800429e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042a0:	2302      	movs	r3, #2
 80042a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042a4:	2300      	movs	r3, #0
 80042a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042a8:	2300      	movs	r3, #0
 80042aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80042ac:	2301      	movs	r3, #1
 80042ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042b0:	f107 0314 	add.w	r3, r7, #20
 80042b4:	4619      	mov	r1, r3
 80042b6:	4811      	ldr	r0, [pc, #68]	; (80042fc <HAL_TIM_IC_MspInit+0xbc>)
 80042b8:	f001 fa88 	bl	80057cc <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80042bc:	2200      	movs	r2, #0
 80042be:	2100      	movs	r1, #0
 80042c0:	2018      	movs	r0, #24
 80042c2:	f000 fe4a 	bl	8004f5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80042c6:	2018      	movs	r0, #24
 80042c8:	f000 fe63 	bl	8004f92 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80042cc:	2200      	movs	r2, #0
 80042ce:	2100      	movs	r1, #0
 80042d0:	2019      	movs	r0, #25
 80042d2:	f000 fe42 	bl	8004f5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80042d6:	2019      	movs	r0, #25
 80042d8:	f000 fe5b 	bl	8004f92 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80042dc:	2200      	movs	r2, #0
 80042de:	2100      	movs	r1, #0
 80042e0:	201b      	movs	r0, #27
 80042e2:	f000 fe3a 	bl	8004f5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80042e6:	201b      	movs	r0, #27
 80042e8:	f000 fe53 	bl	8004f92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80042ec:	bf00      	nop
 80042ee:	3728      	adds	r7, #40	; 0x28
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}
 80042f4:	40010000 	.word	0x40010000
 80042f8:	40023800 	.word	0x40023800
 80042fc:	40020000 	.word	0x40020000

08004300 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b090      	sub	sp, #64	; 0x40
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004308:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800430c:	2200      	movs	r2, #0
 800430e:	601a      	str	r2, [r3, #0]
 8004310:	605a      	str	r2, [r3, #4]
 8004312:	609a      	str	r2, [r3, #8]
 8004314:	60da      	str	r2, [r3, #12]
 8004316:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004320:	d14b      	bne.n	80043ba <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004322:	2300      	movs	r3, #0
 8004324:	62bb      	str	r3, [r7, #40]	; 0x28
 8004326:	4b72      	ldr	r3, [pc, #456]	; (80044f0 <HAL_TIM_Encoder_MspInit+0x1f0>)
 8004328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432a:	4a71      	ldr	r2, [pc, #452]	; (80044f0 <HAL_TIM_Encoder_MspInit+0x1f0>)
 800432c:	f043 0301 	orr.w	r3, r3, #1
 8004330:	6413      	str	r3, [r2, #64]	; 0x40
 8004332:	4b6f      	ldr	r3, [pc, #444]	; (80044f0 <HAL_TIM_Encoder_MspInit+0x1f0>)
 8004334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004336:	f003 0301 	and.w	r3, r3, #1
 800433a:	62bb      	str	r3, [r7, #40]	; 0x28
 800433c:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800433e:	2300      	movs	r3, #0
 8004340:	627b      	str	r3, [r7, #36]	; 0x24
 8004342:	4b6b      	ldr	r3, [pc, #428]	; (80044f0 <HAL_TIM_Encoder_MspInit+0x1f0>)
 8004344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004346:	4a6a      	ldr	r2, [pc, #424]	; (80044f0 <HAL_TIM_Encoder_MspInit+0x1f0>)
 8004348:	f043 0301 	orr.w	r3, r3, #1
 800434c:	6313      	str	r3, [r2, #48]	; 0x30
 800434e:	4b68      	ldr	r3, [pc, #416]	; (80044f0 <HAL_TIM_Encoder_MspInit+0x1f0>)
 8004350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004352:	f003 0301 	and.w	r3, r3, #1
 8004356:	627b      	str	r3, [r7, #36]	; 0x24
 8004358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800435a:	2300      	movs	r3, #0
 800435c:	623b      	str	r3, [r7, #32]
 800435e:	4b64      	ldr	r3, [pc, #400]	; (80044f0 <HAL_TIM_Encoder_MspInit+0x1f0>)
 8004360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004362:	4a63      	ldr	r2, [pc, #396]	; (80044f0 <HAL_TIM_Encoder_MspInit+0x1f0>)
 8004364:	f043 0302 	orr.w	r3, r3, #2
 8004368:	6313      	str	r3, [r2, #48]	; 0x30
 800436a:	4b61      	ldr	r3, [pc, #388]	; (80044f0 <HAL_TIM_Encoder_MspInit+0x1f0>)
 800436c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800436e:	f003 0302 	and.w	r3, r3, #2
 8004372:	623b      	str	r3, [r7, #32]
 8004374:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004376:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800437a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800437c:	2302      	movs	r3, #2
 800437e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004380:	2301      	movs	r3, #1
 8004382:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004384:	2303      	movs	r3, #3
 8004386:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004388:	2301      	movs	r3, #1
 800438a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800438c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004390:	4619      	mov	r1, r3
 8004392:	4858      	ldr	r0, [pc, #352]	; (80044f4 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8004394:	f001 fa1a 	bl	80057cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004398:	2308      	movs	r3, #8
 800439a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800439c:	2302      	movs	r3, #2
 800439e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80043a0:	2301      	movs	r3, #1
 80043a2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043a4:	2303      	movs	r3, #3
 80043a6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80043a8:	2301      	movs	r3, #1
 80043aa:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80043b0:	4619      	mov	r1, r3
 80043b2:	4851      	ldr	r0, [pc, #324]	; (80044f8 <HAL_TIM_Encoder_MspInit+0x1f8>)
 80043b4:	f001 fa0a 	bl	80057cc <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80043b8:	e095      	b.n	80044e6 <HAL_TIM_Encoder_MspInit+0x1e6>
  else if(tim_encoderHandle->Instance==TIM4)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a4f      	ldr	r2, [pc, #316]	; (80044fc <HAL_TIM_Encoder_MspInit+0x1fc>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d12d      	bne.n	8004420 <HAL_TIM_Encoder_MspInit+0x120>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80043c4:	2300      	movs	r3, #0
 80043c6:	61fb      	str	r3, [r7, #28]
 80043c8:	4b49      	ldr	r3, [pc, #292]	; (80044f0 <HAL_TIM_Encoder_MspInit+0x1f0>)
 80043ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043cc:	4a48      	ldr	r2, [pc, #288]	; (80044f0 <HAL_TIM_Encoder_MspInit+0x1f0>)
 80043ce:	f043 0304 	orr.w	r3, r3, #4
 80043d2:	6413      	str	r3, [r2, #64]	; 0x40
 80043d4:	4b46      	ldr	r3, [pc, #280]	; (80044f0 <HAL_TIM_Encoder_MspInit+0x1f0>)
 80043d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d8:	f003 0304 	and.w	r3, r3, #4
 80043dc:	61fb      	str	r3, [r7, #28]
 80043de:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80043e0:	2300      	movs	r3, #0
 80043e2:	61bb      	str	r3, [r7, #24]
 80043e4:	4b42      	ldr	r3, [pc, #264]	; (80044f0 <HAL_TIM_Encoder_MspInit+0x1f0>)
 80043e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e8:	4a41      	ldr	r2, [pc, #260]	; (80044f0 <HAL_TIM_Encoder_MspInit+0x1f0>)
 80043ea:	f043 0308 	orr.w	r3, r3, #8
 80043ee:	6313      	str	r3, [r2, #48]	; 0x30
 80043f0:	4b3f      	ldr	r3, [pc, #252]	; (80044f0 <HAL_TIM_Encoder_MspInit+0x1f0>)
 80043f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043f4:	f003 0308 	and.w	r3, r3, #8
 80043f8:	61bb      	str	r3, [r7, #24]
 80043fa:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80043fc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004400:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004402:	2302      	movs	r3, #2
 8004404:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004406:	2301      	movs	r3, #1
 8004408:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800440a:	2303      	movs	r3, #3
 800440c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800440e:	2302      	movs	r3, #2
 8004410:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004412:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004416:	4619      	mov	r1, r3
 8004418:	4839      	ldr	r0, [pc, #228]	; (8004500 <HAL_TIM_Encoder_MspInit+0x200>)
 800441a:	f001 f9d7 	bl	80057cc <HAL_GPIO_Init>
}
 800441e:	e062      	b.n	80044e6 <HAL_TIM_Encoder_MspInit+0x1e6>
  else if(tim_encoderHandle->Instance==TIM5)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a37      	ldr	r2, [pc, #220]	; (8004504 <HAL_TIM_Encoder_MspInit+0x204>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d12c      	bne.n	8004484 <HAL_TIM_Encoder_MspInit+0x184>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800442a:	2300      	movs	r3, #0
 800442c:	617b      	str	r3, [r7, #20]
 800442e:	4b30      	ldr	r3, [pc, #192]	; (80044f0 <HAL_TIM_Encoder_MspInit+0x1f0>)
 8004430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004432:	4a2f      	ldr	r2, [pc, #188]	; (80044f0 <HAL_TIM_Encoder_MspInit+0x1f0>)
 8004434:	f043 0308 	orr.w	r3, r3, #8
 8004438:	6413      	str	r3, [r2, #64]	; 0x40
 800443a:	4b2d      	ldr	r3, [pc, #180]	; (80044f0 <HAL_TIM_Encoder_MspInit+0x1f0>)
 800443c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443e:	f003 0308 	and.w	r3, r3, #8
 8004442:	617b      	str	r3, [r7, #20]
 8004444:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004446:	2300      	movs	r3, #0
 8004448:	613b      	str	r3, [r7, #16]
 800444a:	4b29      	ldr	r3, [pc, #164]	; (80044f0 <HAL_TIM_Encoder_MspInit+0x1f0>)
 800444c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800444e:	4a28      	ldr	r2, [pc, #160]	; (80044f0 <HAL_TIM_Encoder_MspInit+0x1f0>)
 8004450:	f043 0301 	orr.w	r3, r3, #1
 8004454:	6313      	str	r3, [r2, #48]	; 0x30
 8004456:	4b26      	ldr	r3, [pc, #152]	; (80044f0 <HAL_TIM_Encoder_MspInit+0x1f0>)
 8004458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800445a:	f003 0301 	and.w	r3, r3, #1
 800445e:	613b      	str	r3, [r7, #16]
 8004460:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004462:	2303      	movs	r3, #3
 8004464:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004466:	2302      	movs	r3, #2
 8004468:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800446a:	2301      	movs	r3, #1
 800446c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800446e:	2303      	movs	r3, #3
 8004470:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8004472:	2302      	movs	r3, #2
 8004474:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004476:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800447a:	4619      	mov	r1, r3
 800447c:	481d      	ldr	r0, [pc, #116]	; (80044f4 <HAL_TIM_Encoder_MspInit+0x1f4>)
 800447e:	f001 f9a5 	bl	80057cc <HAL_GPIO_Init>
}
 8004482:	e030      	b.n	80044e6 <HAL_TIM_Encoder_MspInit+0x1e6>
  else if(tim_encoderHandle->Instance==TIM8)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a1f      	ldr	r2, [pc, #124]	; (8004508 <HAL_TIM_Encoder_MspInit+0x208>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d12b      	bne.n	80044e6 <HAL_TIM_Encoder_MspInit+0x1e6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800448e:	2300      	movs	r3, #0
 8004490:	60fb      	str	r3, [r7, #12]
 8004492:	4b17      	ldr	r3, [pc, #92]	; (80044f0 <HAL_TIM_Encoder_MspInit+0x1f0>)
 8004494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004496:	4a16      	ldr	r2, [pc, #88]	; (80044f0 <HAL_TIM_Encoder_MspInit+0x1f0>)
 8004498:	f043 0302 	orr.w	r3, r3, #2
 800449c:	6453      	str	r3, [r2, #68]	; 0x44
 800449e:	4b14      	ldr	r3, [pc, #80]	; (80044f0 <HAL_TIM_Encoder_MspInit+0x1f0>)
 80044a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044a2:	f003 0302 	and.w	r3, r3, #2
 80044a6:	60fb      	str	r3, [r7, #12]
 80044a8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80044aa:	2300      	movs	r3, #0
 80044ac:	60bb      	str	r3, [r7, #8]
 80044ae:	4b10      	ldr	r3, [pc, #64]	; (80044f0 <HAL_TIM_Encoder_MspInit+0x1f0>)
 80044b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b2:	4a0f      	ldr	r2, [pc, #60]	; (80044f0 <HAL_TIM_Encoder_MspInit+0x1f0>)
 80044b4:	f043 0304 	orr.w	r3, r3, #4
 80044b8:	6313      	str	r3, [r2, #48]	; 0x30
 80044ba:	4b0d      	ldr	r3, [pc, #52]	; (80044f0 <HAL_TIM_Encoder_MspInit+0x1f0>)
 80044bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044be:	f003 0304 	and.w	r3, r3, #4
 80044c2:	60bb      	str	r3, [r7, #8]
 80044c4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80044c6:	23c0      	movs	r3, #192	; 0xc0
 80044c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044ca:	2302      	movs	r3, #2
 80044cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80044ce:	2301      	movs	r3, #1
 80044d0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044d2:	2303      	movs	r3, #3
 80044d4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80044d6:	2303      	movs	r3, #3
 80044d8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80044da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80044de:	4619      	mov	r1, r3
 80044e0:	480a      	ldr	r0, [pc, #40]	; (800450c <HAL_TIM_Encoder_MspInit+0x20c>)
 80044e2:	f001 f973 	bl	80057cc <HAL_GPIO_Init>
}
 80044e6:	bf00      	nop
 80044e8:	3740      	adds	r7, #64	; 0x40
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	bf00      	nop
 80044f0:	40023800 	.word	0x40023800
 80044f4:	40020000 	.word	0x40020000
 80044f8:	40020400 	.word	0x40020400
 80044fc:	40000800 	.word	0x40000800
 8004500:	40020c00 	.word	0x40020c00
 8004504:	40000c00 	.word	0x40000c00
 8004508:	40010400 	.word	0x40010400
 800450c:	40020800 	.word	0x40020800

08004510 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8004510:	b480      	push	{r7}
 8004512:	b085      	sub	sp, #20
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a0b      	ldr	r2, [pc, #44]	; (800454c <HAL_TIM_PWM_MspInit+0x3c>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d10d      	bne.n	800453e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004522:	2300      	movs	r3, #0
 8004524:	60fb      	str	r3, [r7, #12]
 8004526:	4b0a      	ldr	r3, [pc, #40]	; (8004550 <HAL_TIM_PWM_MspInit+0x40>)
 8004528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452a:	4a09      	ldr	r2, [pc, #36]	; (8004550 <HAL_TIM_PWM_MspInit+0x40>)
 800452c:	f043 0302 	orr.w	r3, r3, #2
 8004530:	6413      	str	r3, [r2, #64]	; 0x40
 8004532:	4b07      	ldr	r3, [pc, #28]	; (8004550 <HAL_TIM_PWM_MspInit+0x40>)
 8004534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004536:	f003 0302 	and.w	r3, r3, #2
 800453a:	60fb      	str	r3, [r7, #12]
 800453c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800453e:	bf00      	nop
 8004540:	3714      	adds	r7, #20
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr
 800454a:	bf00      	nop
 800454c:	40000400 	.word	0x40000400
 8004550:	40023800 	.word	0x40023800

08004554 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b084      	sub	sp, #16
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a1c      	ldr	r2, [pc, #112]	; (80045d4 <HAL_TIM_Base_MspInit+0x80>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d116      	bne.n	8004594 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004566:	2300      	movs	r3, #0
 8004568:	60fb      	str	r3, [r7, #12]
 800456a:	4b1b      	ldr	r3, [pc, #108]	; (80045d8 <HAL_TIM_Base_MspInit+0x84>)
 800456c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456e:	4a1a      	ldr	r2, [pc, #104]	; (80045d8 <HAL_TIM_Base_MspInit+0x84>)
 8004570:	f043 0310 	orr.w	r3, r3, #16
 8004574:	6413      	str	r3, [r2, #64]	; 0x40
 8004576:	4b18      	ldr	r3, [pc, #96]	; (80045d8 <HAL_TIM_Base_MspInit+0x84>)
 8004578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457a:	f003 0310 	and.w	r3, r3, #16
 800457e:	60fb      	str	r3, [r7, #12]
 8004580:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8004582:	2200      	movs	r2, #0
 8004584:	2100      	movs	r1, #0
 8004586:	2036      	movs	r0, #54	; 0x36
 8004588:	f000 fce7 	bl	8004f5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800458c:	2036      	movs	r0, #54	; 0x36
 800458e:	f000 fd00 	bl	8004f92 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 8004592:	e01a      	b.n	80045ca <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM9)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a10      	ldr	r2, [pc, #64]	; (80045dc <HAL_TIM_Base_MspInit+0x88>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d115      	bne.n	80045ca <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800459e:	2300      	movs	r3, #0
 80045a0:	60bb      	str	r3, [r7, #8]
 80045a2:	4b0d      	ldr	r3, [pc, #52]	; (80045d8 <HAL_TIM_Base_MspInit+0x84>)
 80045a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045a6:	4a0c      	ldr	r2, [pc, #48]	; (80045d8 <HAL_TIM_Base_MspInit+0x84>)
 80045a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045ac:	6453      	str	r3, [r2, #68]	; 0x44
 80045ae:	4b0a      	ldr	r3, [pc, #40]	; (80045d8 <HAL_TIM_Base_MspInit+0x84>)
 80045b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045b6:	60bb      	str	r3, [r7, #8]
 80045b8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80045ba:	2200      	movs	r2, #0
 80045bc:	2100      	movs	r1, #0
 80045be:	2018      	movs	r0, #24
 80045c0:	f000 fccb 	bl	8004f5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80045c4:	2018      	movs	r0, #24
 80045c6:	f000 fce4 	bl	8004f92 <HAL_NVIC_EnableIRQ>
}
 80045ca:	bf00      	nop
 80045cc:	3710      	adds	r7, #16
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	40001000 	.word	0x40001000
 80045d8:	40023800 	.word	0x40023800
 80045dc:	40014000 	.word	0x40014000

080045e0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b08a      	sub	sp, #40	; 0x28
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045e8:	f107 0314 	add.w	r3, r7, #20
 80045ec:	2200      	movs	r2, #0
 80045ee:	601a      	str	r2, [r3, #0]
 80045f0:	605a      	str	r2, [r3, #4]
 80045f2:	609a      	str	r2, [r3, #8]
 80045f4:	60da      	str	r2, [r3, #12]
 80045f6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a33      	ldr	r2, [pc, #204]	; (80046cc <HAL_TIM_MspPostInit+0xec>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d13c      	bne.n	800467c <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004602:	2300      	movs	r3, #0
 8004604:	613b      	str	r3, [r7, #16]
 8004606:	4b32      	ldr	r3, [pc, #200]	; (80046d0 <HAL_TIM_MspPostInit+0xf0>)
 8004608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800460a:	4a31      	ldr	r2, [pc, #196]	; (80046d0 <HAL_TIM_MspPostInit+0xf0>)
 800460c:	f043 0301 	orr.w	r3, r3, #1
 8004610:	6313      	str	r3, [r2, #48]	; 0x30
 8004612:	4b2f      	ldr	r3, [pc, #188]	; (80046d0 <HAL_TIM_MspPostInit+0xf0>)
 8004614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004616:	f003 0301 	and.w	r3, r3, #1
 800461a:	613b      	str	r3, [r7, #16]
 800461c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800461e:	2300      	movs	r3, #0
 8004620:	60fb      	str	r3, [r7, #12]
 8004622:	4b2b      	ldr	r3, [pc, #172]	; (80046d0 <HAL_TIM_MspPostInit+0xf0>)
 8004624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004626:	4a2a      	ldr	r2, [pc, #168]	; (80046d0 <HAL_TIM_MspPostInit+0xf0>)
 8004628:	f043 0302 	orr.w	r3, r3, #2
 800462c:	6313      	str	r3, [r2, #48]	; 0x30
 800462e:	4b28      	ldr	r3, [pc, #160]	; (80046d0 <HAL_TIM_MspPostInit+0xf0>)
 8004630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004632:	f003 0302 	and.w	r3, r3, #2
 8004636:	60fb      	str	r3, [r7, #12]
 8004638:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800463a:	23c0      	movs	r3, #192	; 0xc0
 800463c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800463e:	2302      	movs	r3, #2
 8004640:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004642:	2300      	movs	r3, #0
 8004644:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004646:	2300      	movs	r3, #0
 8004648:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800464a:	2302      	movs	r3, #2
 800464c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800464e:	f107 0314 	add.w	r3, r7, #20
 8004652:	4619      	mov	r1, r3
 8004654:	481f      	ldr	r0, [pc, #124]	; (80046d4 <HAL_TIM_MspPostInit+0xf4>)
 8004656:	f001 f8b9 	bl	80057cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800465a:	2303      	movs	r3, #3
 800465c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800465e:	2302      	movs	r3, #2
 8004660:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004662:	2300      	movs	r3, #0
 8004664:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004666:	2300      	movs	r3, #0
 8004668:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800466a:	2302      	movs	r3, #2
 800466c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800466e:	f107 0314 	add.w	r3, r7, #20
 8004672:	4619      	mov	r1, r3
 8004674:	4818      	ldr	r0, [pc, #96]	; (80046d8 <HAL_TIM_MspPostInit+0xf8>)
 8004676:	f001 f8a9 	bl	80057cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 800467a:	e022      	b.n	80046c2 <HAL_TIM_MspPostInit+0xe2>
  else if(timHandle->Instance==TIM9)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a16      	ldr	r2, [pc, #88]	; (80046dc <HAL_TIM_MspPostInit+0xfc>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d11d      	bne.n	80046c2 <HAL_TIM_MspPostInit+0xe2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004686:	2300      	movs	r3, #0
 8004688:	60bb      	str	r3, [r7, #8]
 800468a:	4b11      	ldr	r3, [pc, #68]	; (80046d0 <HAL_TIM_MspPostInit+0xf0>)
 800468c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800468e:	4a10      	ldr	r2, [pc, #64]	; (80046d0 <HAL_TIM_MspPostInit+0xf0>)
 8004690:	f043 0301 	orr.w	r3, r3, #1
 8004694:	6313      	str	r3, [r2, #48]	; 0x30
 8004696:	4b0e      	ldr	r3, [pc, #56]	; (80046d0 <HAL_TIM_MspPostInit+0xf0>)
 8004698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800469a:	f003 0301 	and.w	r3, r3, #1
 800469e:	60bb      	str	r3, [r7, #8]
 80046a0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80046a2:	230c      	movs	r3, #12
 80046a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046a6:	2302      	movs	r3, #2
 80046a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046aa:	2300      	movs	r3, #0
 80046ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046ae:	2300      	movs	r3, #0
 80046b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80046b2:	2303      	movs	r3, #3
 80046b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046b6:	f107 0314 	add.w	r3, r7, #20
 80046ba:	4619      	mov	r1, r3
 80046bc:	4805      	ldr	r0, [pc, #20]	; (80046d4 <HAL_TIM_MspPostInit+0xf4>)
 80046be:	f001 f885 	bl	80057cc <HAL_GPIO_Init>
}
 80046c2:	bf00      	nop
 80046c4:	3728      	adds	r7, #40	; 0x28
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	bf00      	nop
 80046cc:	40000400 	.word	0x40000400
 80046d0:	40023800 	.word	0x40023800
 80046d4:	40020000 	.word	0x40020000
 80046d8:	40020400 	.word	0x40020400
 80046dc:	40014000 	.word	0x40014000

080046e0 <MX_UART5_Init>:
DMA_HandleTypeDef hdma_usart1_rx;
DMA_HandleTypeDef hdma_usart2_rx;

/* UART5 init function */
void MX_UART5_Init(void)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80046e4:	4b13      	ldr	r3, [pc, #76]	; (8004734 <MX_UART5_Init+0x54>)
 80046e6:	4a14      	ldr	r2, [pc, #80]	; (8004738 <MX_UART5_Init+0x58>)
 80046e8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80046ea:	4b12      	ldr	r3, [pc, #72]	; (8004734 <MX_UART5_Init+0x54>)
 80046ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80046f0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80046f2:	4b10      	ldr	r3, [pc, #64]	; (8004734 <MX_UART5_Init+0x54>)
 80046f4:	2200      	movs	r2, #0
 80046f6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80046f8:	4b0e      	ldr	r3, [pc, #56]	; (8004734 <MX_UART5_Init+0x54>)
 80046fa:	2200      	movs	r2, #0
 80046fc:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80046fe:	4b0d      	ldr	r3, [pc, #52]	; (8004734 <MX_UART5_Init+0x54>)
 8004700:	2200      	movs	r2, #0
 8004702:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8004704:	4b0b      	ldr	r3, [pc, #44]	; (8004734 <MX_UART5_Init+0x54>)
 8004706:	220c      	movs	r2, #12
 8004708:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800470a:	4b0a      	ldr	r3, [pc, #40]	; (8004734 <MX_UART5_Init+0x54>)
 800470c:	2200      	movs	r2, #0
 800470e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8004710:	4b08      	ldr	r3, [pc, #32]	; (8004734 <MX_UART5_Init+0x54>)
 8004712:	2200      	movs	r2, #0
 8004714:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8004716:	4807      	ldr	r0, [pc, #28]	; (8004734 <MX_UART5_Init+0x54>)
 8004718:	f003 fdda 	bl	80082d0 <HAL_UART_Init>
 800471c:	4603      	mov	r3, r0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d001      	beq.n	8004726 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8004722:	f7ff f853 	bl	80037cc <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */
//  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);  // 使能串口空闲中断
//   HAL_UART_Receive_DMA(&huart1, (uint8_t*)receive_buff, 8); //设置DMA传输，将串口1的数据搬运到
  HAL_UART_Receive_IT(&huart5, (uint8_t *)&ReceiveTrackBufferIt, 4);
 8004726:	2204      	movs	r2, #4
 8004728:	4904      	ldr	r1, [pc, #16]	; (800473c <MX_UART5_Init+0x5c>)
 800472a:	4802      	ldr	r0, [pc, #8]	; (8004734 <MX_UART5_Init+0x54>)
 800472c:	f003 fe1d 	bl	800836a <HAL_UART_Receive_IT>
  /* USER CODE END UART5_Init 2 */

}
 8004730:	bf00      	nop
 8004732:	bd80      	pop	{r7, pc}
 8004734:	20000ca4 	.word	0x20000ca4
 8004738:	40005000 	.word	0x40005000
 800473c:	20000db4 	.word	0x20000db4

08004740 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004744:	4b11      	ldr	r3, [pc, #68]	; (800478c <MX_USART1_UART_Init+0x4c>)
 8004746:	4a12      	ldr	r2, [pc, #72]	; (8004790 <MX_USART1_UART_Init+0x50>)
 8004748:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800474a:	4b10      	ldr	r3, [pc, #64]	; (800478c <MX_USART1_UART_Init+0x4c>)
 800474c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004750:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004752:	4b0e      	ldr	r3, [pc, #56]	; (800478c <MX_USART1_UART_Init+0x4c>)
 8004754:	2200      	movs	r2, #0
 8004756:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004758:	4b0c      	ldr	r3, [pc, #48]	; (800478c <MX_USART1_UART_Init+0x4c>)
 800475a:	2200      	movs	r2, #0
 800475c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800475e:	4b0b      	ldr	r3, [pc, #44]	; (800478c <MX_USART1_UART_Init+0x4c>)
 8004760:	2200      	movs	r2, #0
 8004762:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004764:	4b09      	ldr	r3, [pc, #36]	; (800478c <MX_USART1_UART_Init+0x4c>)
 8004766:	220c      	movs	r2, #12
 8004768:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800476a:	4b08      	ldr	r3, [pc, #32]	; (800478c <MX_USART1_UART_Init+0x4c>)
 800476c:	2200      	movs	r2, #0
 800476e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004770:	4b06      	ldr	r3, [pc, #24]	; (800478c <MX_USART1_UART_Init+0x4c>)
 8004772:	2200      	movs	r2, #0
 8004774:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004776:	4805      	ldr	r0, [pc, #20]	; (800478c <MX_USART1_UART_Init+0x4c>)
 8004778:	f003 fdaa 	bl	80082d0 <HAL_UART_Init>
 800477c:	4603      	mov	r3, r0
 800477e:	2b00      	cmp	r3, #0
 8004780:	d001      	beq.n	8004786 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004782:	f7ff f823 	bl	80037cc <Error_Handler>
//	HAL_UART_Receive_DMA(&huart1, (uint8_t*)ReceiveTrackBuffer, 8);
	//设置DMA传输，将串口1的数据搬运到recvive_buff中，每次8个字�??????????

  /* USER CODE END USART1_Init 2 */

}
 8004786:	bf00      	nop
 8004788:	bd80      	pop	{r7, pc}
 800478a:	bf00      	nop
 800478c:	20000c1c 	.word	0x20000c1c
 8004790:	40011000 	.word	0x40011000

08004794 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004798:	4b1a      	ldr	r3, [pc, #104]	; (8004804 <MX_USART2_UART_Init+0x70>)
 800479a:	4a1b      	ldr	r2, [pc, #108]	; (8004808 <MX_USART2_UART_Init+0x74>)
 800479c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800479e:	4b19      	ldr	r3, [pc, #100]	; (8004804 <MX_USART2_UART_Init+0x70>)
 80047a0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80047a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80047a6:	4b17      	ldr	r3, [pc, #92]	; (8004804 <MX_USART2_UART_Init+0x70>)
 80047a8:	2200      	movs	r2, #0
 80047aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80047ac:	4b15      	ldr	r3, [pc, #84]	; (8004804 <MX_USART2_UART_Init+0x70>)
 80047ae:	2200      	movs	r2, #0
 80047b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80047b2:	4b14      	ldr	r3, [pc, #80]	; (8004804 <MX_USART2_UART_Init+0x70>)
 80047b4:	2200      	movs	r2, #0
 80047b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80047b8:	4b12      	ldr	r3, [pc, #72]	; (8004804 <MX_USART2_UART_Init+0x70>)
 80047ba:	220c      	movs	r2, #12
 80047bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80047be:	4b11      	ldr	r3, [pc, #68]	; (8004804 <MX_USART2_UART_Init+0x70>)
 80047c0:	2200      	movs	r2, #0
 80047c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80047c4:	4b0f      	ldr	r3, [pc, #60]	; (8004804 <MX_USART2_UART_Init+0x70>)
 80047c6:	2200      	movs	r2, #0
 80047c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80047ca:	480e      	ldr	r0, [pc, #56]	; (8004804 <MX_USART2_UART_Init+0x70>)
 80047cc:	f003 fd80 	bl	80082d0 <HAL_UART_Init>
 80047d0:	4603      	mov	r3, r0
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d001      	beq.n	80047da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80047d6:	f7fe fff9 	bl	80037cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
	HAL_UART_Receive_IT(&huart2, (uint8_t *)&aRxBuffer, 3);
 80047da:	2203      	movs	r2, #3
 80047dc:	490b      	ldr	r1, [pc, #44]	; (800480c <MX_USART2_UART_Init+0x78>)
 80047de:	4809      	ldr	r0, [pc, #36]	; (8004804 <MX_USART2_UART_Init+0x70>)
 80047e0:	f003 fdc3 	bl	800836a <HAL_UART_Receive_IT>
  __HAL_UART_ENABLE_IT(&huart2,UART_IT_IDLE);
 80047e4:	4b07      	ldr	r3, [pc, #28]	; (8004804 <MX_USART2_UART_Init+0x70>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	68da      	ldr	r2, [r3, #12]
 80047ea:	4b06      	ldr	r3, [pc, #24]	; (8004804 <MX_USART2_UART_Init+0x70>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f042 0210 	orr.w	r2, r2, #16
 80047f2:	60da      	str	r2, [r3, #12]
  HAL_UART_Receive_DMA(&huart2,JY901_data.RxBuffer,RXBUFFER_LEN);
 80047f4:	2263      	movs	r2, #99	; 0x63
 80047f6:	4906      	ldr	r1, [pc, #24]	; (8004810 <MX_USART2_UART_Init+0x7c>)
 80047f8:	4802      	ldr	r0, [pc, #8]	; (8004804 <MX_USART2_UART_Init+0x70>)
 80047fa:	f003 fde6 	bl	80083ca <HAL_UART_Receive_DMA>
  /* USER CODE END USART2_Init 2 */

}
 80047fe:	bf00      	nop
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop
 8004804:	20000c60 	.word	0x20000c60
 8004808:	40004400 	.word	0x40004400
 800480c:	20000d50 	.word	0x20000d50
 8004810:	20000743 	.word	0x20000743

08004814 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b08e      	sub	sp, #56	; 0x38
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800481c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004820:	2200      	movs	r2, #0
 8004822:	601a      	str	r2, [r3, #0]
 8004824:	605a      	str	r2, [r3, #4]
 8004826:	609a      	str	r2, [r3, #8]
 8004828:	60da      	str	r2, [r3, #12]
 800482a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a74      	ldr	r2, [pc, #464]	; (8004a04 <HAL_UART_MspInit+0x1f0>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d17a      	bne.n	800492c <HAL_UART_MspInit+0x118>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8004836:	2300      	movs	r3, #0
 8004838:	623b      	str	r3, [r7, #32]
 800483a:	4b73      	ldr	r3, [pc, #460]	; (8004a08 <HAL_UART_MspInit+0x1f4>)
 800483c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483e:	4a72      	ldr	r2, [pc, #456]	; (8004a08 <HAL_UART_MspInit+0x1f4>)
 8004840:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004844:	6413      	str	r3, [r2, #64]	; 0x40
 8004846:	4b70      	ldr	r3, [pc, #448]	; (8004a08 <HAL_UART_MspInit+0x1f4>)
 8004848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800484e:	623b      	str	r3, [r7, #32]
 8004850:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004852:	2300      	movs	r3, #0
 8004854:	61fb      	str	r3, [r7, #28]
 8004856:	4b6c      	ldr	r3, [pc, #432]	; (8004a08 <HAL_UART_MspInit+0x1f4>)
 8004858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800485a:	4a6b      	ldr	r2, [pc, #428]	; (8004a08 <HAL_UART_MspInit+0x1f4>)
 800485c:	f043 0304 	orr.w	r3, r3, #4
 8004860:	6313      	str	r3, [r2, #48]	; 0x30
 8004862:	4b69      	ldr	r3, [pc, #420]	; (8004a08 <HAL_UART_MspInit+0x1f4>)
 8004864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004866:	f003 0304 	and.w	r3, r3, #4
 800486a:	61fb      	str	r3, [r7, #28]
 800486c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800486e:	2300      	movs	r3, #0
 8004870:	61bb      	str	r3, [r7, #24]
 8004872:	4b65      	ldr	r3, [pc, #404]	; (8004a08 <HAL_UART_MspInit+0x1f4>)
 8004874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004876:	4a64      	ldr	r2, [pc, #400]	; (8004a08 <HAL_UART_MspInit+0x1f4>)
 8004878:	f043 0308 	orr.w	r3, r3, #8
 800487c:	6313      	str	r3, [r2, #48]	; 0x30
 800487e:	4b62      	ldr	r3, [pc, #392]	; (8004a08 <HAL_UART_MspInit+0x1f4>)
 8004880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004882:	f003 0308 	and.w	r3, r3, #8
 8004886:	61bb      	str	r3, [r7, #24]
 8004888:	69bb      	ldr	r3, [r7, #24]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800488a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800488e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004890:	2302      	movs	r3, #2
 8004892:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004894:	2301      	movs	r3, #1
 8004896:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004898:	2303      	movs	r3, #3
 800489a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800489c:	2308      	movs	r3, #8
 800489e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80048a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80048a4:	4619      	mov	r1, r3
 80048a6:	4859      	ldr	r0, [pc, #356]	; (8004a0c <HAL_UART_MspInit+0x1f8>)
 80048a8:	f000 ff90 	bl	80057cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80048ac:	2304      	movs	r3, #4
 80048ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048b0:	2302      	movs	r3, #2
 80048b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80048b4:	2301      	movs	r3, #1
 80048b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048b8:	2303      	movs	r3, #3
 80048ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80048bc:	2308      	movs	r3, #8
 80048be:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80048c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80048c4:	4619      	mov	r1, r3
 80048c6:	4852      	ldr	r0, [pc, #328]	; (8004a10 <HAL_UART_MspInit+0x1fc>)
 80048c8:	f000 ff80 	bl	80057cc <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream0;
 80048cc:	4b51      	ldr	r3, [pc, #324]	; (8004a14 <HAL_UART_MspInit+0x200>)
 80048ce:	4a52      	ldr	r2, [pc, #328]	; (8004a18 <HAL_UART_MspInit+0x204>)
 80048d0:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 80048d2:	4b50      	ldr	r3, [pc, #320]	; (8004a14 <HAL_UART_MspInit+0x200>)
 80048d4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80048d8:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80048da:	4b4e      	ldr	r3, [pc, #312]	; (8004a14 <HAL_UART_MspInit+0x200>)
 80048dc:	2200      	movs	r2, #0
 80048de:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80048e0:	4b4c      	ldr	r3, [pc, #304]	; (8004a14 <HAL_UART_MspInit+0x200>)
 80048e2:	2200      	movs	r2, #0
 80048e4:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80048e6:	4b4b      	ldr	r3, [pc, #300]	; (8004a14 <HAL_UART_MspInit+0x200>)
 80048e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80048ec:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80048ee:	4b49      	ldr	r3, [pc, #292]	; (8004a14 <HAL_UART_MspInit+0x200>)
 80048f0:	2200      	movs	r2, #0
 80048f2:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80048f4:	4b47      	ldr	r3, [pc, #284]	; (8004a14 <HAL_UART_MspInit+0x200>)
 80048f6:	2200      	movs	r2, #0
 80048f8:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 80048fa:	4b46      	ldr	r3, [pc, #280]	; (8004a14 <HAL_UART_MspInit+0x200>)
 80048fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004900:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004902:	4b44      	ldr	r3, [pc, #272]	; (8004a14 <HAL_UART_MspInit+0x200>)
 8004904:	2200      	movs	r2, #0
 8004906:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004908:	4b42      	ldr	r3, [pc, #264]	; (8004a14 <HAL_UART_MspInit+0x200>)
 800490a:	2200      	movs	r2, #0
 800490c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 800490e:	4841      	ldr	r0, [pc, #260]	; (8004a14 <HAL_UART_MspInit+0x200>)
 8004910:	f000 fb5a 	bl	8004fc8 <HAL_DMA_Init>
 8004914:	4603      	mov	r3, r0
 8004916:	2b00      	cmp	r3, #0
 8004918:	d001      	beq.n	800491e <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 800491a:	f7fe ff57 	bl	80037cc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a3c      	ldr	r2, [pc, #240]	; (8004a14 <HAL_UART_MspInit+0x200>)
 8004922:	639a      	str	r2, [r3, #56]	; 0x38
 8004924:	4a3b      	ldr	r2, [pc, #236]	; (8004a14 <HAL_UART_MspInit+0x200>)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800492a:	e0e7      	b.n	8004afc <HAL_UART_MspInit+0x2e8>
  else if(uartHandle->Instance==USART1)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a3a      	ldr	r2, [pc, #232]	; (8004a1c <HAL_UART_MspInit+0x208>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d17a      	bne.n	8004a2c <HAL_UART_MspInit+0x218>
    __HAL_RCC_USART1_CLK_ENABLE();
 8004936:	2300      	movs	r3, #0
 8004938:	617b      	str	r3, [r7, #20]
 800493a:	4b33      	ldr	r3, [pc, #204]	; (8004a08 <HAL_UART_MspInit+0x1f4>)
 800493c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800493e:	4a32      	ldr	r2, [pc, #200]	; (8004a08 <HAL_UART_MspInit+0x1f4>)
 8004940:	f043 0310 	orr.w	r3, r3, #16
 8004944:	6453      	str	r3, [r2, #68]	; 0x44
 8004946:	4b30      	ldr	r3, [pc, #192]	; (8004a08 <HAL_UART_MspInit+0x1f4>)
 8004948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800494a:	f003 0310 	and.w	r3, r3, #16
 800494e:	617b      	str	r3, [r7, #20]
 8004950:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004952:	2300      	movs	r3, #0
 8004954:	613b      	str	r3, [r7, #16]
 8004956:	4b2c      	ldr	r3, [pc, #176]	; (8004a08 <HAL_UART_MspInit+0x1f4>)
 8004958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800495a:	4a2b      	ldr	r2, [pc, #172]	; (8004a08 <HAL_UART_MspInit+0x1f4>)
 800495c:	f043 0301 	orr.w	r3, r3, #1
 8004960:	6313      	str	r3, [r2, #48]	; 0x30
 8004962:	4b29      	ldr	r3, [pc, #164]	; (8004a08 <HAL_UART_MspInit+0x1f4>)
 8004964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004966:	f003 0301 	and.w	r3, r3, #1
 800496a:	613b      	str	r3, [r7, #16]
 800496c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800496e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004972:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004974:	2302      	movs	r3, #2
 8004976:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004978:	2300      	movs	r3, #0
 800497a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800497c:	2303      	movs	r3, #3
 800497e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004980:	2307      	movs	r3, #7
 8004982:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004984:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004988:	4619      	mov	r1, r3
 800498a:	4825      	ldr	r0, [pc, #148]	; (8004a20 <HAL_UART_MspInit+0x20c>)
 800498c:	f000 ff1e 	bl	80057cc <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8004990:	4b24      	ldr	r3, [pc, #144]	; (8004a24 <HAL_UART_MspInit+0x210>)
 8004992:	4a25      	ldr	r2, [pc, #148]	; (8004a28 <HAL_UART_MspInit+0x214>)
 8004994:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8004996:	4b23      	ldr	r3, [pc, #140]	; (8004a24 <HAL_UART_MspInit+0x210>)
 8004998:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800499c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800499e:	4b21      	ldr	r3, [pc, #132]	; (8004a24 <HAL_UART_MspInit+0x210>)
 80049a0:	2200      	movs	r2, #0
 80049a2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80049a4:	4b1f      	ldr	r3, [pc, #124]	; (8004a24 <HAL_UART_MspInit+0x210>)
 80049a6:	2200      	movs	r2, #0
 80049a8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80049aa:	4b1e      	ldr	r3, [pc, #120]	; (8004a24 <HAL_UART_MspInit+0x210>)
 80049ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80049b0:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80049b2:	4b1c      	ldr	r3, [pc, #112]	; (8004a24 <HAL_UART_MspInit+0x210>)
 80049b4:	2200      	movs	r2, #0
 80049b6:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80049b8:	4b1a      	ldr	r3, [pc, #104]	; (8004a24 <HAL_UART_MspInit+0x210>)
 80049ba:	2200      	movs	r2, #0
 80049bc:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80049be:	4b19      	ldr	r3, [pc, #100]	; (8004a24 <HAL_UART_MspInit+0x210>)
 80049c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80049c4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80049c6:	4b17      	ldr	r3, [pc, #92]	; (8004a24 <HAL_UART_MspInit+0x210>)
 80049c8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80049cc:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80049ce:	4b15      	ldr	r3, [pc, #84]	; (8004a24 <HAL_UART_MspInit+0x210>)
 80049d0:	2200      	movs	r2, #0
 80049d2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80049d4:	4813      	ldr	r0, [pc, #76]	; (8004a24 <HAL_UART_MspInit+0x210>)
 80049d6:	f000 faf7 	bl	8004fc8 <HAL_DMA_Init>
 80049da:	4603      	mov	r3, r0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d001      	beq.n	80049e4 <HAL_UART_MspInit+0x1d0>
      Error_Handler();
 80049e0:	f7fe fef4 	bl	80037cc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	4a0f      	ldr	r2, [pc, #60]	; (8004a24 <HAL_UART_MspInit+0x210>)
 80049e8:	639a      	str	r2, [r3, #56]	; 0x38
 80049ea:	4a0e      	ldr	r2, [pc, #56]	; (8004a24 <HAL_UART_MspInit+0x210>)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80049f0:	2200      	movs	r2, #0
 80049f2:	2100      	movs	r1, #0
 80049f4:	2025      	movs	r0, #37	; 0x25
 80049f6:	f000 fab0 	bl	8004f5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80049fa:	2025      	movs	r0, #37	; 0x25
 80049fc:	f000 fac9 	bl	8004f92 <HAL_NVIC_EnableIRQ>
}
 8004a00:	e07c      	b.n	8004afc <HAL_UART_MspInit+0x2e8>
 8004a02:	bf00      	nop
 8004a04:	40005000 	.word	0x40005000
 8004a08:	40023800 	.word	0x40023800
 8004a0c:	40020800 	.word	0x40020800
 8004a10:	40020c00 	.word	0x40020c00
 8004a14:	20000b5c 	.word	0x20000b5c
 8004a18:	40026010 	.word	0x40026010
 8004a1c:	40011000 	.word	0x40011000
 8004a20:	40020000 	.word	0x40020000
 8004a24:	20000bbc 	.word	0x20000bbc
 8004a28:	40026440 	.word	0x40026440
  else if(uartHandle->Instance==USART2)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a34      	ldr	r2, [pc, #208]	; (8004b04 <HAL_UART_MspInit+0x2f0>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d162      	bne.n	8004afc <HAL_UART_MspInit+0x2e8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004a36:	2300      	movs	r3, #0
 8004a38:	60fb      	str	r3, [r7, #12]
 8004a3a:	4b33      	ldr	r3, [pc, #204]	; (8004b08 <HAL_UART_MspInit+0x2f4>)
 8004a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3e:	4a32      	ldr	r2, [pc, #200]	; (8004b08 <HAL_UART_MspInit+0x2f4>)
 8004a40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a44:	6413      	str	r3, [r2, #64]	; 0x40
 8004a46:	4b30      	ldr	r3, [pc, #192]	; (8004b08 <HAL_UART_MspInit+0x2f4>)
 8004a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a4e:	60fb      	str	r3, [r7, #12]
 8004a50:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004a52:	2300      	movs	r3, #0
 8004a54:	60bb      	str	r3, [r7, #8]
 8004a56:	4b2c      	ldr	r3, [pc, #176]	; (8004b08 <HAL_UART_MspInit+0x2f4>)
 8004a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a5a:	4a2b      	ldr	r2, [pc, #172]	; (8004b08 <HAL_UART_MspInit+0x2f4>)
 8004a5c:	f043 0308 	orr.w	r3, r3, #8
 8004a60:	6313      	str	r3, [r2, #48]	; 0x30
 8004a62:	4b29      	ldr	r3, [pc, #164]	; (8004b08 <HAL_UART_MspInit+0x2f4>)
 8004a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a66:	f003 0308 	and.w	r3, r3, #8
 8004a6a:	60bb      	str	r3, [r7, #8]
 8004a6c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8004a6e:	2360      	movs	r3, #96	; 0x60
 8004a70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a72:	2302      	movs	r3, #2
 8004a74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a76:	2300      	movs	r3, #0
 8004a78:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004a7e:	2307      	movs	r3, #7
 8004a80:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004a82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a86:	4619      	mov	r1, r3
 8004a88:	4820      	ldr	r0, [pc, #128]	; (8004b0c <HAL_UART_MspInit+0x2f8>)
 8004a8a:	f000 fe9f 	bl	80057cc <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8004a8e:	4b20      	ldr	r3, [pc, #128]	; (8004b10 <HAL_UART_MspInit+0x2fc>)
 8004a90:	4a20      	ldr	r2, [pc, #128]	; (8004b14 <HAL_UART_MspInit+0x300>)
 8004a92:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8004a94:	4b1e      	ldr	r3, [pc, #120]	; (8004b10 <HAL_UART_MspInit+0x2fc>)
 8004a96:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004a9a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004a9c:	4b1c      	ldr	r3, [pc, #112]	; (8004b10 <HAL_UART_MspInit+0x2fc>)
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004aa2:	4b1b      	ldr	r3, [pc, #108]	; (8004b10 <HAL_UART_MspInit+0x2fc>)
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004aa8:	4b19      	ldr	r3, [pc, #100]	; (8004b10 <HAL_UART_MspInit+0x2fc>)
 8004aaa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004aae:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004ab0:	4b17      	ldr	r3, [pc, #92]	; (8004b10 <HAL_UART_MspInit+0x2fc>)
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004ab6:	4b16      	ldr	r3, [pc, #88]	; (8004b10 <HAL_UART_MspInit+0x2fc>)
 8004ab8:	2200      	movs	r2, #0
 8004aba:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8004abc:	4b14      	ldr	r3, [pc, #80]	; (8004b10 <HAL_UART_MspInit+0x2fc>)
 8004abe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004ac2:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004ac4:	4b12      	ldr	r3, [pc, #72]	; (8004b10 <HAL_UART_MspInit+0x2fc>)
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004aca:	4b11      	ldr	r3, [pc, #68]	; (8004b10 <HAL_UART_MspInit+0x2fc>)
 8004acc:	2200      	movs	r2, #0
 8004ace:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004ad0:	480f      	ldr	r0, [pc, #60]	; (8004b10 <HAL_UART_MspInit+0x2fc>)
 8004ad2:	f000 fa79 	bl	8004fc8 <HAL_DMA_Init>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d001      	beq.n	8004ae0 <HAL_UART_MspInit+0x2cc>
      Error_Handler();
 8004adc:	f7fe fe76 	bl	80037cc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	4a0b      	ldr	r2, [pc, #44]	; (8004b10 <HAL_UART_MspInit+0x2fc>)
 8004ae4:	639a      	str	r2, [r3, #56]	; 0x38
 8004ae6:	4a0a      	ldr	r2, [pc, #40]	; (8004b10 <HAL_UART_MspInit+0x2fc>)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004aec:	2200      	movs	r2, #0
 8004aee:	2100      	movs	r1, #0
 8004af0:	2026      	movs	r0, #38	; 0x26
 8004af2:	f000 fa32 	bl	8004f5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004af6:	2026      	movs	r0, #38	; 0x26
 8004af8:	f000 fa4b 	bl	8004f92 <HAL_NVIC_EnableIRQ>
}
 8004afc:	bf00      	nop
 8004afe:	3738      	adds	r7, #56	; 0x38
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}
 8004b04:	40004400 	.word	0x40004400
 8004b08:	40023800 	.word	0x40023800
 8004b0c:	40020c00 	.word	0x40020c00
 8004b10:	20000d54 	.word	0x20000d54
 8004b14:	40026088 	.word	0x40026088

08004b18 <__io_putchar>:
//定义_sys_exit()以避免使用半主机模式
void _sys_exit(int x) {
	x = x;
}
//重定义fputc函数
PUTCHAR_PROTOTYPE {
 8004b18:	b480      	push	{r7}
 8004b1a:	b083      	sub	sp, #12
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
	// 具体哪个串口可以更改huart2为其它串�??????????
	// HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1 , 0xffff);
	while ((USART1->SR & 0X40) == 0) {
 8004b20:	bf00      	nop
 8004b22:	4b08      	ldr	r3, [pc, #32]	; (8004b44 <__io_putchar+0x2c>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d0f9      	beq.n	8004b22 <__io_putchar+0xa>
	}; //循环发�??,直到发�?�完�??????????
	USART1->DR = (uint8_t) ch;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	b2da      	uxtb	r2, r3
 8004b32:	4b04      	ldr	r3, [pc, #16]	; (8004b44 <__io_putchar+0x2c>)
 8004b34:	605a      	str	r2, [r3, #4]

	//  while ((USART2->SR & 0X40) == 0) {
	//  }; //循环发�??,直到发�?�完�??????????
	//  USART2->DR = (uint8_t) ch;

	return ch;
 8004b36:	687b      	ldr	r3, [r7, #4]
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	370c      	adds	r7, #12
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr
 8004b44:	40011000 	.word	0x40011000

08004b48 <asc2int>:



#endif

uint16_t asc2int(uint8_t huns, uint8_t tens, uint8_t ones) {//字符串转数字
 8004b48:	b480      	push	{r7}
 8004b4a:	b085      	sub	sp, #20
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	4603      	mov	r3, r0
 8004b50:	71fb      	strb	r3, [r7, #7]
 8004b52:	460b      	mov	r3, r1
 8004b54:	71bb      	strb	r3, [r7, #6]
 8004b56:	4613      	mov	r3, r2
 8004b58:	717b      	strb	r3, [r7, #5]
	uint16_t number = (huns - 48) * 100 + (tens - 48) * 10 + (ones - 48);
 8004b5a:	79fb      	ldrb	r3, [r7, #7]
 8004b5c:	3b30      	subs	r3, #48	; 0x30
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	461a      	mov	r2, r3
 8004b62:	0092      	lsls	r2, r2, #2
 8004b64:	4413      	add	r3, r2
 8004b66:	461a      	mov	r2, r3
 8004b68:	0091      	lsls	r1, r2, #2
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	4413      	add	r3, r2
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	b29a      	uxth	r2, r3
 8004b74:	79bb      	ldrb	r3, [r7, #6]
 8004b76:	3b30      	subs	r3, #48	; 0x30
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	4619      	mov	r1, r3
 8004b7c:	0089      	lsls	r1, r1, #2
 8004b7e:	440b      	add	r3, r1
 8004b80:	005b      	lsls	r3, r3, #1
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	4413      	add	r3, r2
 8004b86:	b29a      	uxth	r2, r3
 8004b88:	797b      	ldrb	r3, [r7, #5]
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	4413      	add	r3, r2
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	3b30      	subs	r3, #48	; 0x30
 8004b92:	81fb      	strh	r3, [r7, #14]
	return number;
 8004b94:	89fb      	ldrh	r3, [r7, #14]
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3714      	adds	r7, #20
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr
	...

08004ba4 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b084      	sub	sp, #16
 8004ba8:	af02      	add	r7, sp, #8
 8004baa:	6078      	str	r0, [r7, #4]
	UNUSED(huart);
	if (USART1 == huart->Instance)//是否是串�?????????1
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a26      	ldr	r2, [pc, #152]	; (8004c4c <HAL_UART_RxCpltCallback+0xa8>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d111      	bne.n	8004bda <HAL_UART_RxCpltCallback+0x36>
	{
		btcmd_num=asc2int(aRxBuffer[0],aRxBuffer[1],aRxBuffer[2]);
 8004bb6:	4b26      	ldr	r3, [pc, #152]	; (8004c50 <HAL_UART_RxCpltCallback+0xac>)
 8004bb8:	781b      	ldrb	r3, [r3, #0]
 8004bba:	4a25      	ldr	r2, [pc, #148]	; (8004c50 <HAL_UART_RxCpltCallback+0xac>)
 8004bbc:	7851      	ldrb	r1, [r2, #1]
 8004bbe:	4a24      	ldr	r2, [pc, #144]	; (8004c50 <HAL_UART_RxCpltCallback+0xac>)
 8004bc0:	7892      	ldrb	r2, [r2, #2]
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f7ff ffc0 	bl	8004b48 <asc2int>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	461a      	mov	r2, r3
 8004bcc:	4b21      	ldr	r3, [pc, #132]	; (8004c54 <HAL_UART_RxCpltCallback+0xb0>)
 8004bce:	601a      	str	r2, [r3, #0]
		//printf("%c%c%c\n",aRxBuffer[0],aRxBuffer[1],aRxBuffer[2]);
		//printf("uart1_cmd:%d\n",btcmd_num);
		HAL_UART_Receive_IT(&huart1, (uint8_t *)&aRxBuffer, 3);   //再开启接收中�??????????
 8004bd0:	2203      	movs	r2, #3
 8004bd2:	491f      	ldr	r1, [pc, #124]	; (8004c50 <HAL_UART_RxCpltCallback+0xac>)
 8004bd4:	4820      	ldr	r0, [pc, #128]	; (8004c58 <HAL_UART_RxCpltCallback+0xb4>)
 8004bd6:	f003 fbc8 	bl	800836a <HAL_UART_Receive_IT>
	}
	if (USART2 == huart->Instance)//是否是串�?????????2
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a1f      	ldr	r2, [pc, #124]	; (8004c5c <HAL_UART_RxCpltCallback+0xb8>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d111      	bne.n	8004c08 <HAL_UART_RxCpltCallback+0x64>
	{
		btcmd_num=asc2int(aRxBuffer[0],aRxBuffer[1],aRxBuffer[2]);//存储命令
 8004be4:	4b1a      	ldr	r3, [pc, #104]	; (8004c50 <HAL_UART_RxCpltCallback+0xac>)
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	4a19      	ldr	r2, [pc, #100]	; (8004c50 <HAL_UART_RxCpltCallback+0xac>)
 8004bea:	7851      	ldrb	r1, [r2, #1]
 8004bec:	4a18      	ldr	r2, [pc, #96]	; (8004c50 <HAL_UART_RxCpltCallback+0xac>)
 8004bee:	7892      	ldrb	r2, [r2, #2]
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f7ff ffa9 	bl	8004b48 <asc2int>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	4b16      	ldr	r3, [pc, #88]	; (8004c54 <HAL_UART_RxCpltCallback+0xb0>)
 8004bfc:	601a      	str	r2, [r3, #0]
		//printf("%c%c%c\n",aRxBuffer[0],aRxBuffer[1],aRxBuffer[2]);
		//printf("uart2_cmd:%d\n",btcmd_num);
		HAL_UART_Receive_IT(&huart2, (uint8_t *)&aRxBuffer, 3);   //再开启接收中�??????????
 8004bfe:	2203      	movs	r2, #3
 8004c00:	4913      	ldr	r1, [pc, #76]	; (8004c50 <HAL_UART_RxCpltCallback+0xac>)
 8004c02:	4817      	ldr	r0, [pc, #92]	; (8004c60 <HAL_UART_RxCpltCallback+0xbc>)
 8004c04:	f003 fbb1 	bl	800836a <HAL_UART_Receive_IT>
	}
	if (UART5 == huart->Instance)//是否是串�?????????2
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a15      	ldr	r2, [pc, #84]	; (8004c64 <HAL_UART_RxCpltCallback+0xc0>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d117      	bne.n	8004c42 <HAL_UART_RxCpltCallback+0x9e>
	{
//		btcmd_num=asc2int(aRxBuffer[0],aRxBuffer[1],aRxBuffer[2]);//存储命令
		printf("in callback uart5 \t\n");
 8004c12:	4815      	ldr	r0, [pc, #84]	; (8004c68 <HAL_UART_RxCpltCallback+0xc4>)
 8004c14:	f004 ffd6 	bl	8009bc4 <puts>
		printf("%c%c%c%c\t\n",ReceiveTrackBufferIt[0],ReceiveTrackBufferIt[1],ReceiveTrackBufferIt[2],ReceiveTrackBufferIt[3]);
 8004c18:	4b14      	ldr	r3, [pc, #80]	; (8004c6c <HAL_UART_RxCpltCallback+0xc8>)
 8004c1a:	781b      	ldrb	r3, [r3, #0]
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	4b13      	ldr	r3, [pc, #76]	; (8004c6c <HAL_UART_RxCpltCallback+0xc8>)
 8004c20:	785b      	ldrb	r3, [r3, #1]
 8004c22:	461a      	mov	r2, r3
 8004c24:	4b11      	ldr	r3, [pc, #68]	; (8004c6c <HAL_UART_RxCpltCallback+0xc8>)
 8004c26:	789b      	ldrb	r3, [r3, #2]
 8004c28:	4618      	mov	r0, r3
 8004c2a:	4b10      	ldr	r3, [pc, #64]	; (8004c6c <HAL_UART_RxCpltCallback+0xc8>)
 8004c2c:	78db      	ldrb	r3, [r3, #3]
 8004c2e:	9300      	str	r3, [sp, #0]
 8004c30:	4603      	mov	r3, r0
 8004c32:	480f      	ldr	r0, [pc, #60]	; (8004c70 <HAL_UART_RxCpltCallback+0xcc>)
 8004c34:	f004 ff40 	bl	8009ab8 <iprintf>
//		printf("%d%d%d%d\n",ReceiveTrackBufferIt[0],ReceiveTrackBufferIt[1],ReceiveTrackBufferIt[2],ReceiveTrackBufferIt[3]);
		//printf("uart2_cmd:%d\n",btcmd_num);
		HAL_UART_Receive_IT(&huart5, (uint8_t *)&ReceiveTrackBufferIt, 4);   //再开启接收中�??????????
 8004c38:	2204      	movs	r2, #4
 8004c3a:	490c      	ldr	r1, [pc, #48]	; (8004c6c <HAL_UART_RxCpltCallback+0xc8>)
 8004c3c:	480d      	ldr	r0, [pc, #52]	; (8004c74 <HAL_UART_RxCpltCallback+0xd0>)
 8004c3e:	f003 fb94 	bl	800836a <HAL_UART_Receive_IT>
	}
}
 8004c42:	bf00      	nop
 8004c44:	3708      	adds	r7, #8
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	40011000 	.word	0x40011000
 8004c50:	20000d50 	.word	0x20000d50
 8004c54:	2000065c 	.word	0x2000065c
 8004c58:	20000c1c 	.word	0x20000c1c
 8004c5c:	40004400 	.word	0x40004400
 8004c60:	20000c60 	.word	0x20000c60
 8004c64:	40005000 	.word	0x40005000
 8004c68:	0800bce0 	.word	0x0800bce0
 8004c6c:	20000db4 	.word	0x20000db4
 8004c70:	0800bcf4 	.word	0x0800bcf4
 8004c74:	20000ca4 	.word	0x20000ca4

08004c78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004c7c:	4b0e      	ldr	r3, [pc, #56]	; (8004cb8 <HAL_Init+0x40>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a0d      	ldr	r2, [pc, #52]	; (8004cb8 <HAL_Init+0x40>)
 8004c82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004c88:	4b0b      	ldr	r3, [pc, #44]	; (8004cb8 <HAL_Init+0x40>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a0a      	ldr	r2, [pc, #40]	; (8004cb8 <HAL_Init+0x40>)
 8004c8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004c92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004c94:	4b08      	ldr	r3, [pc, #32]	; (8004cb8 <HAL_Init+0x40>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a07      	ldr	r2, [pc, #28]	; (8004cb8 <HAL_Init+0x40>)
 8004c9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004ca0:	2003      	movs	r0, #3
 8004ca2:	f000 f94f 	bl	8004f44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004ca6:	2000      	movs	r0, #0
 8004ca8:	f000 f808 	bl	8004cbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004cac:	f7fe fe32 	bl	8003914 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004cb0:	2300      	movs	r3, #0
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	bf00      	nop
 8004cb8:	40023c00 	.word	0x40023c00

08004cbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b082      	sub	sp, #8
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004cc4:	4b12      	ldr	r3, [pc, #72]	; (8004d10 <HAL_InitTick+0x54>)
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	4b12      	ldr	r3, [pc, #72]	; (8004d14 <HAL_InitTick+0x58>)
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	4619      	mov	r1, r3
 8004cce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004cd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8004cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f000 f967 	bl	8004fae <HAL_SYSTICK_Config>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d001      	beq.n	8004cea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e00e      	b.n	8004d08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2b0f      	cmp	r3, #15
 8004cee:	d80a      	bhi.n	8004d06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	6879      	ldr	r1, [r7, #4]
 8004cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8004cf8:	f000 f92f 	bl	8004f5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004cfc:	4a06      	ldr	r2, [pc, #24]	; (8004d18 <HAL_InitTick+0x5c>)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004d02:	2300      	movs	r3, #0
 8004d04:	e000      	b.n	8004d08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3708      	adds	r7, #8
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}
 8004d10:	20000030 	.word	0x20000030
 8004d14:	20000038 	.word	0x20000038
 8004d18:	20000034 	.word	0x20000034

08004d1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004d20:	4b06      	ldr	r3, [pc, #24]	; (8004d3c <HAL_IncTick+0x20>)
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	461a      	mov	r2, r3
 8004d26:	4b06      	ldr	r3, [pc, #24]	; (8004d40 <HAL_IncTick+0x24>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4413      	add	r3, r2
 8004d2c:	4a04      	ldr	r2, [pc, #16]	; (8004d40 <HAL_IncTick+0x24>)
 8004d2e:	6013      	str	r3, [r2, #0]
}
 8004d30:	bf00      	nop
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr
 8004d3a:	bf00      	nop
 8004d3c:	20000038 	.word	0x20000038
 8004d40:	20000db8 	.word	0x20000db8

08004d44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004d44:	b480      	push	{r7}
 8004d46:	af00      	add	r7, sp, #0
  return uwTick;
 8004d48:	4b03      	ldr	r3, [pc, #12]	; (8004d58 <HAL_GetTick+0x14>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr
 8004d56:	bf00      	nop
 8004d58:	20000db8 	.word	0x20000db8

08004d5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b084      	sub	sp, #16
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004d64:	f7ff ffee 	bl	8004d44 <HAL_GetTick>
 8004d68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d74:	d005      	beq.n	8004d82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004d76:	4b0a      	ldr	r3, [pc, #40]	; (8004da0 <HAL_Delay+0x44>)
 8004d78:	781b      	ldrb	r3, [r3, #0]
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	4413      	add	r3, r2
 8004d80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004d82:	bf00      	nop
 8004d84:	f7ff ffde 	bl	8004d44 <HAL_GetTick>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	68fa      	ldr	r2, [r7, #12]
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d8f7      	bhi.n	8004d84 <HAL_Delay+0x28>
  {
  }
}
 8004d94:	bf00      	nop
 8004d96:	bf00      	nop
 8004d98:	3710      	adds	r7, #16
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	20000038 	.word	0x20000038

08004da4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b085      	sub	sp, #20
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f003 0307 	and.w	r3, r3, #7
 8004db2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004db4:	4b0c      	ldr	r3, [pc, #48]	; (8004de8 <__NVIC_SetPriorityGrouping+0x44>)
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004dba:	68ba      	ldr	r2, [r7, #8]
 8004dbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004dcc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004dd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004dd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004dd6:	4a04      	ldr	r2, [pc, #16]	; (8004de8 <__NVIC_SetPriorityGrouping+0x44>)
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	60d3      	str	r3, [r2, #12]
}
 8004ddc:	bf00      	nop
 8004dde:	3714      	adds	r7, #20
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr
 8004de8:	e000ed00 	.word	0xe000ed00

08004dec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004dec:	b480      	push	{r7}
 8004dee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004df0:	4b04      	ldr	r3, [pc, #16]	; (8004e04 <__NVIC_GetPriorityGrouping+0x18>)
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	0a1b      	lsrs	r3, r3, #8
 8004df6:	f003 0307 	and.w	r3, r3, #7
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr
 8004e04:	e000ed00 	.word	0xe000ed00

08004e08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b083      	sub	sp, #12
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	4603      	mov	r3, r0
 8004e10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	db0b      	blt.n	8004e32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e1a:	79fb      	ldrb	r3, [r7, #7]
 8004e1c:	f003 021f 	and.w	r2, r3, #31
 8004e20:	4907      	ldr	r1, [pc, #28]	; (8004e40 <__NVIC_EnableIRQ+0x38>)
 8004e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e26:	095b      	lsrs	r3, r3, #5
 8004e28:	2001      	movs	r0, #1
 8004e2a:	fa00 f202 	lsl.w	r2, r0, r2
 8004e2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004e32:	bf00      	nop
 8004e34:	370c      	adds	r7, #12
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr
 8004e3e:	bf00      	nop
 8004e40:	e000e100 	.word	0xe000e100

08004e44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	6039      	str	r1, [r7, #0]
 8004e4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	db0a      	blt.n	8004e6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	b2da      	uxtb	r2, r3
 8004e5c:	490c      	ldr	r1, [pc, #48]	; (8004e90 <__NVIC_SetPriority+0x4c>)
 8004e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e62:	0112      	lsls	r2, r2, #4
 8004e64:	b2d2      	uxtb	r2, r2
 8004e66:	440b      	add	r3, r1
 8004e68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004e6c:	e00a      	b.n	8004e84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	b2da      	uxtb	r2, r3
 8004e72:	4908      	ldr	r1, [pc, #32]	; (8004e94 <__NVIC_SetPriority+0x50>)
 8004e74:	79fb      	ldrb	r3, [r7, #7]
 8004e76:	f003 030f 	and.w	r3, r3, #15
 8004e7a:	3b04      	subs	r3, #4
 8004e7c:	0112      	lsls	r2, r2, #4
 8004e7e:	b2d2      	uxtb	r2, r2
 8004e80:	440b      	add	r3, r1
 8004e82:	761a      	strb	r2, [r3, #24]
}
 8004e84:	bf00      	nop
 8004e86:	370c      	adds	r7, #12
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr
 8004e90:	e000e100 	.word	0xe000e100
 8004e94:	e000ed00 	.word	0xe000ed00

08004e98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b089      	sub	sp, #36	; 0x24
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	60f8      	str	r0, [r7, #12]
 8004ea0:	60b9      	str	r1, [r7, #8]
 8004ea2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f003 0307 	and.w	r3, r3, #7
 8004eaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004eac:	69fb      	ldr	r3, [r7, #28]
 8004eae:	f1c3 0307 	rsb	r3, r3, #7
 8004eb2:	2b04      	cmp	r3, #4
 8004eb4:	bf28      	it	cs
 8004eb6:	2304      	movcs	r3, #4
 8004eb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004eba:	69fb      	ldr	r3, [r7, #28]
 8004ebc:	3304      	adds	r3, #4
 8004ebe:	2b06      	cmp	r3, #6
 8004ec0:	d902      	bls.n	8004ec8 <NVIC_EncodePriority+0x30>
 8004ec2:	69fb      	ldr	r3, [r7, #28]
 8004ec4:	3b03      	subs	r3, #3
 8004ec6:	e000      	b.n	8004eca <NVIC_EncodePriority+0x32>
 8004ec8:	2300      	movs	r3, #0
 8004eca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8004ed0:	69bb      	ldr	r3, [r7, #24]
 8004ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed6:	43da      	mvns	r2, r3
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	401a      	ands	r2, r3
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ee0:	f04f 31ff 	mov.w	r1, #4294967295
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8004eea:	43d9      	mvns	r1, r3
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ef0:	4313      	orrs	r3, r2
         );
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3724      	adds	r7, #36	; 0x24
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr
	...

08004f00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b082      	sub	sp, #8
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	3b01      	subs	r3, #1
 8004f0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f10:	d301      	bcc.n	8004f16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004f12:	2301      	movs	r3, #1
 8004f14:	e00f      	b.n	8004f36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004f16:	4a0a      	ldr	r2, [pc, #40]	; (8004f40 <SysTick_Config+0x40>)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	3b01      	subs	r3, #1
 8004f1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004f1e:	210f      	movs	r1, #15
 8004f20:	f04f 30ff 	mov.w	r0, #4294967295
 8004f24:	f7ff ff8e 	bl	8004e44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004f28:	4b05      	ldr	r3, [pc, #20]	; (8004f40 <SysTick_Config+0x40>)
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004f2e:	4b04      	ldr	r3, [pc, #16]	; (8004f40 <SysTick_Config+0x40>)
 8004f30:	2207      	movs	r2, #7
 8004f32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004f34:	2300      	movs	r3, #0
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3708      	adds	r7, #8
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	e000e010 	.word	0xe000e010

08004f44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b082      	sub	sp, #8
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f7ff ff29 	bl	8004da4 <__NVIC_SetPriorityGrouping>
}
 8004f52:	bf00      	nop
 8004f54:	3708      	adds	r7, #8
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}

08004f5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004f5a:	b580      	push	{r7, lr}
 8004f5c:	b086      	sub	sp, #24
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	4603      	mov	r3, r0
 8004f62:	60b9      	str	r1, [r7, #8]
 8004f64:	607a      	str	r2, [r7, #4]
 8004f66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004f6c:	f7ff ff3e 	bl	8004dec <__NVIC_GetPriorityGrouping>
 8004f70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	68b9      	ldr	r1, [r7, #8]
 8004f76:	6978      	ldr	r0, [r7, #20]
 8004f78:	f7ff ff8e 	bl	8004e98 <NVIC_EncodePriority>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f82:	4611      	mov	r1, r2
 8004f84:	4618      	mov	r0, r3
 8004f86:	f7ff ff5d 	bl	8004e44 <__NVIC_SetPriority>
}
 8004f8a:	bf00      	nop
 8004f8c:	3718      	adds	r7, #24
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}

08004f92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f92:	b580      	push	{r7, lr}
 8004f94:	b082      	sub	sp, #8
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	4603      	mov	r3, r0
 8004f9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004f9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f7ff ff31 	bl	8004e08 <__NVIC_EnableIRQ>
}
 8004fa6:	bf00      	nop
 8004fa8:	3708      	adds	r7, #8
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}

08004fae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004fae:	b580      	push	{r7, lr}
 8004fb0:	b082      	sub	sp, #8
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f7ff ffa2 	bl	8004f00 <SysTick_Config>
 8004fbc:	4603      	mov	r3, r0
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3708      	adds	r7, #8
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
	...

08004fc8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b086      	sub	sp, #24
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004fd4:	f7ff feb6 	bl	8004d44 <HAL_GetTick>
 8004fd8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d101      	bne.n	8004fe4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e099      	b.n	8005118 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2202      	movs	r2, #2
 8004ff0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f022 0201 	bic.w	r2, r2, #1
 8005002:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005004:	e00f      	b.n	8005026 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005006:	f7ff fe9d 	bl	8004d44 <HAL_GetTick>
 800500a:	4602      	mov	r2, r0
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	1ad3      	subs	r3, r2, r3
 8005010:	2b05      	cmp	r3, #5
 8005012:	d908      	bls.n	8005026 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2220      	movs	r2, #32
 8005018:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2203      	movs	r2, #3
 800501e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005022:	2303      	movs	r3, #3
 8005024:	e078      	b.n	8005118 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f003 0301 	and.w	r3, r3, #1
 8005030:	2b00      	cmp	r3, #0
 8005032:	d1e8      	bne.n	8005006 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800503c:	697a      	ldr	r2, [r7, #20]
 800503e:	4b38      	ldr	r3, [pc, #224]	; (8005120 <HAL_DMA_Init+0x158>)
 8005040:	4013      	ands	r3, r2
 8005042:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	685a      	ldr	r2, [r3, #4]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005052:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	691b      	ldr	r3, [r3, #16]
 8005058:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800505e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	699b      	ldr	r3, [r3, #24]
 8005064:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800506a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6a1b      	ldr	r3, [r3, #32]
 8005070:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005072:	697a      	ldr	r2, [r7, #20]
 8005074:	4313      	orrs	r3, r2
 8005076:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507c:	2b04      	cmp	r3, #4
 800507e:	d107      	bne.n	8005090 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005088:	4313      	orrs	r3, r2
 800508a:	697a      	ldr	r2, [r7, #20]
 800508c:	4313      	orrs	r3, r2
 800508e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	697a      	ldr	r2, [r7, #20]
 8005096:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	695b      	ldr	r3, [r3, #20]
 800509e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	f023 0307 	bic.w	r3, r3, #7
 80050a6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ac:	697a      	ldr	r2, [r7, #20]
 80050ae:	4313      	orrs	r3, r2
 80050b0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b6:	2b04      	cmp	r3, #4
 80050b8:	d117      	bne.n	80050ea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050be:	697a      	ldr	r2, [r7, #20]
 80050c0:	4313      	orrs	r3, r2
 80050c2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d00e      	beq.n	80050ea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f000 fb01 	bl	80056d4 <DMA_CheckFifoParam>
 80050d2:	4603      	mov	r3, r0
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d008      	beq.n	80050ea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2240      	movs	r2, #64	; 0x40
 80050dc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2201      	movs	r2, #1
 80050e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80050e6:	2301      	movs	r3, #1
 80050e8:	e016      	b.n	8005118 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	697a      	ldr	r2, [r7, #20]
 80050f0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f000 fab8 	bl	8005668 <DMA_CalcBaseAndBitshift>
 80050f8:	4603      	mov	r3, r0
 80050fa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005100:	223f      	movs	r2, #63	; 0x3f
 8005102:	409a      	lsls	r2, r3
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2201      	movs	r2, #1
 8005112:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005116:	2300      	movs	r3, #0
}
 8005118:	4618      	mov	r0, r3
 800511a:	3718      	adds	r7, #24
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}
 8005120:	f010803f 	.word	0xf010803f

08005124 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b086      	sub	sp, #24
 8005128:	af00      	add	r7, sp, #0
 800512a:	60f8      	str	r0, [r7, #12]
 800512c:	60b9      	str	r1, [r7, #8]
 800512e:	607a      	str	r2, [r7, #4]
 8005130:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005132:	2300      	movs	r3, #0
 8005134:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800513a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005142:	2b01      	cmp	r3, #1
 8005144:	d101      	bne.n	800514a <HAL_DMA_Start_IT+0x26>
 8005146:	2302      	movs	r3, #2
 8005148:	e040      	b.n	80051cc <HAL_DMA_Start_IT+0xa8>
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2201      	movs	r2, #1
 800514e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005158:	b2db      	uxtb	r3, r3
 800515a:	2b01      	cmp	r3, #1
 800515c:	d12f      	bne.n	80051be <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2202      	movs	r2, #2
 8005162:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2200      	movs	r2, #0
 800516a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	68b9      	ldr	r1, [r7, #8]
 8005172:	68f8      	ldr	r0, [r7, #12]
 8005174:	f000 fa4a 	bl	800560c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800517c:	223f      	movs	r2, #63	; 0x3f
 800517e:	409a      	lsls	r2, r3
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f042 0216 	orr.w	r2, r2, #22
 8005192:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005198:	2b00      	cmp	r3, #0
 800519a:	d007      	beq.n	80051ac <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f042 0208 	orr.w	r2, r2, #8
 80051aa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f042 0201 	orr.w	r2, r2, #1
 80051ba:	601a      	str	r2, [r3, #0]
 80051bc:	e005      	b.n	80051ca <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2200      	movs	r2, #0
 80051c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80051c6:	2302      	movs	r3, #2
 80051c8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80051ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3718      	adds	r7, #24
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}

080051d4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b084      	sub	sp, #16
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051e0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80051e2:	f7ff fdaf 	bl	8004d44 <HAL_GetTick>
 80051e6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	2b02      	cmp	r3, #2
 80051f2:	d008      	beq.n	8005206 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2280      	movs	r2, #128	; 0x80
 80051f8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2200      	movs	r2, #0
 80051fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e052      	b.n	80052ac <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f022 0216 	bic.w	r2, r2, #22
 8005214:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	695a      	ldr	r2, [r3, #20]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005224:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522a:	2b00      	cmp	r3, #0
 800522c:	d103      	bne.n	8005236 <HAL_DMA_Abort+0x62>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005232:	2b00      	cmp	r3, #0
 8005234:	d007      	beq.n	8005246 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f022 0208 	bic.w	r2, r2, #8
 8005244:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f022 0201 	bic.w	r2, r2, #1
 8005254:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005256:	e013      	b.n	8005280 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005258:	f7ff fd74 	bl	8004d44 <HAL_GetTick>
 800525c:	4602      	mov	r2, r0
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	1ad3      	subs	r3, r2, r3
 8005262:	2b05      	cmp	r3, #5
 8005264:	d90c      	bls.n	8005280 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2220      	movs	r2, #32
 800526a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2200      	movs	r2, #0
 8005270:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2203      	movs	r2, #3
 8005278:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 800527c:	2303      	movs	r3, #3
 800527e:	e015      	b.n	80052ac <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f003 0301 	and.w	r3, r3, #1
 800528a:	2b00      	cmp	r3, #0
 800528c:	d1e4      	bne.n	8005258 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005292:	223f      	movs	r2, #63	; 0x3f
 8005294:	409a      	lsls	r2, r3
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2201      	movs	r2, #1
 80052a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80052aa:	2300      	movs	r3, #0
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3710      	adds	r7, #16
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}

080052b4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b083      	sub	sp, #12
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80052c2:	b2db      	uxtb	r3, r3
 80052c4:	2b02      	cmp	r3, #2
 80052c6:	d004      	beq.n	80052d2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2280      	movs	r2, #128	; 0x80
 80052cc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e00c      	b.n	80052ec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2205      	movs	r2, #5
 80052d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f022 0201 	bic.w	r2, r2, #1
 80052e8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80052ea:	2300      	movs	r3, #0
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	370c      	adds	r7, #12
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr

080052f8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b086      	sub	sp, #24
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005300:	2300      	movs	r3, #0
 8005302:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005304:	4b92      	ldr	r3, [pc, #584]	; (8005550 <HAL_DMA_IRQHandler+0x258>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a92      	ldr	r2, [pc, #584]	; (8005554 <HAL_DMA_IRQHandler+0x25c>)
 800530a:	fba2 2303 	umull	r2, r3, r2, r3
 800530e:	0a9b      	lsrs	r3, r3, #10
 8005310:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005316:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005322:	2208      	movs	r2, #8
 8005324:	409a      	lsls	r2, r3
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	4013      	ands	r3, r2
 800532a:	2b00      	cmp	r3, #0
 800532c:	d01a      	beq.n	8005364 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f003 0304 	and.w	r3, r3, #4
 8005338:	2b00      	cmp	r3, #0
 800533a:	d013      	beq.n	8005364 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f022 0204 	bic.w	r2, r2, #4
 800534a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005350:	2208      	movs	r2, #8
 8005352:	409a      	lsls	r2, r3
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800535c:	f043 0201 	orr.w	r2, r3, #1
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005368:	2201      	movs	r2, #1
 800536a:	409a      	lsls	r2, r3
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	4013      	ands	r3, r2
 8005370:	2b00      	cmp	r3, #0
 8005372:	d012      	beq.n	800539a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	695b      	ldr	r3, [r3, #20]
 800537a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800537e:	2b00      	cmp	r3, #0
 8005380:	d00b      	beq.n	800539a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005386:	2201      	movs	r2, #1
 8005388:	409a      	lsls	r2, r3
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005392:	f043 0202 	orr.w	r2, r3, #2
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800539e:	2204      	movs	r2, #4
 80053a0:	409a      	lsls	r2, r3
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	4013      	ands	r3, r2
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d012      	beq.n	80053d0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 0302 	and.w	r3, r3, #2
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d00b      	beq.n	80053d0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053bc:	2204      	movs	r2, #4
 80053be:	409a      	lsls	r2, r3
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053c8:	f043 0204 	orr.w	r2, r3, #4
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053d4:	2210      	movs	r2, #16
 80053d6:	409a      	lsls	r2, r3
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	4013      	ands	r3, r2
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d043      	beq.n	8005468 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 0308 	and.w	r3, r3, #8
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d03c      	beq.n	8005468 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053f2:	2210      	movs	r2, #16
 80053f4:	409a      	lsls	r2, r3
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005404:	2b00      	cmp	r3, #0
 8005406:	d018      	beq.n	800543a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005412:	2b00      	cmp	r3, #0
 8005414:	d108      	bne.n	8005428 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800541a:	2b00      	cmp	r3, #0
 800541c:	d024      	beq.n	8005468 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	4798      	blx	r3
 8005426:	e01f      	b.n	8005468 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800542c:	2b00      	cmp	r3, #0
 800542e:	d01b      	beq.n	8005468 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	4798      	blx	r3
 8005438:	e016      	b.n	8005468 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005444:	2b00      	cmp	r3, #0
 8005446:	d107      	bne.n	8005458 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f022 0208 	bic.w	r2, r2, #8
 8005456:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545c:	2b00      	cmp	r3, #0
 800545e:	d003      	beq.n	8005468 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800546c:	2220      	movs	r2, #32
 800546e:	409a      	lsls	r2, r3
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	4013      	ands	r3, r2
 8005474:	2b00      	cmp	r3, #0
 8005476:	f000 808e 	beq.w	8005596 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f003 0310 	and.w	r3, r3, #16
 8005484:	2b00      	cmp	r3, #0
 8005486:	f000 8086 	beq.w	8005596 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800548e:	2220      	movs	r2, #32
 8005490:	409a      	lsls	r2, r3
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800549c:	b2db      	uxtb	r3, r3
 800549e:	2b05      	cmp	r3, #5
 80054a0:	d136      	bne.n	8005510 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f022 0216 	bic.w	r2, r2, #22
 80054b0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	695a      	ldr	r2, [r3, #20]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80054c0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d103      	bne.n	80054d2 <HAL_DMA_IRQHandler+0x1da>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d007      	beq.n	80054e2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f022 0208 	bic.w	r2, r2, #8
 80054e0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054e6:	223f      	movs	r2, #63	; 0x3f
 80054e8:	409a      	lsls	r2, r3
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2201      	movs	r2, #1
 80054fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005502:	2b00      	cmp	r3, #0
 8005504:	d07d      	beq.n	8005602 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	4798      	blx	r3
        }
        return;
 800550e:	e078      	b.n	8005602 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800551a:	2b00      	cmp	r3, #0
 800551c:	d01c      	beq.n	8005558 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005528:	2b00      	cmp	r3, #0
 800552a:	d108      	bne.n	800553e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005530:	2b00      	cmp	r3, #0
 8005532:	d030      	beq.n	8005596 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	4798      	blx	r3
 800553c:	e02b      	b.n	8005596 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005542:	2b00      	cmp	r3, #0
 8005544:	d027      	beq.n	8005596 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	4798      	blx	r3
 800554e:	e022      	b.n	8005596 <HAL_DMA_IRQHandler+0x29e>
 8005550:	20000030 	.word	0x20000030
 8005554:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005562:	2b00      	cmp	r3, #0
 8005564:	d10f      	bne.n	8005586 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f022 0210 	bic.w	r2, r2, #16
 8005574:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2201      	movs	r2, #1
 8005582:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800558a:	2b00      	cmp	r3, #0
 800558c:	d003      	beq.n	8005596 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800559a:	2b00      	cmp	r3, #0
 800559c:	d032      	beq.n	8005604 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055a2:	f003 0301 	and.w	r3, r3, #1
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d022      	beq.n	80055f0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2205      	movs	r2, #5
 80055ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f022 0201 	bic.w	r2, r2, #1
 80055c0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	3301      	adds	r3, #1
 80055c6:	60bb      	str	r3, [r7, #8]
 80055c8:	697a      	ldr	r2, [r7, #20]
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d307      	bcc.n	80055de <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 0301 	and.w	r3, r3, #1
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d1f2      	bne.n	80055c2 <HAL_DMA_IRQHandler+0x2ca>
 80055dc:	e000      	b.n	80055e0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80055de:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2200      	movs	r2, #0
 80055e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d005      	beq.n	8005604 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	4798      	blx	r3
 8005600:	e000      	b.n	8005604 <HAL_DMA_IRQHandler+0x30c>
        return;
 8005602:	bf00      	nop
    }
  }
}
 8005604:	3718      	adds	r7, #24
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}
 800560a:	bf00      	nop

0800560c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800560c:	b480      	push	{r7}
 800560e:	b085      	sub	sp, #20
 8005610:	af00      	add	r7, sp, #0
 8005612:	60f8      	str	r0, [r7, #12]
 8005614:	60b9      	str	r1, [r7, #8]
 8005616:	607a      	str	r2, [r7, #4]
 8005618:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005628:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	683a      	ldr	r2, [r7, #0]
 8005630:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	2b40      	cmp	r3, #64	; 0x40
 8005638:	d108      	bne.n	800564c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	68ba      	ldr	r2, [r7, #8]
 8005648:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800564a:	e007      	b.n	800565c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	68ba      	ldr	r2, [r7, #8]
 8005652:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	687a      	ldr	r2, [r7, #4]
 800565a:	60da      	str	r2, [r3, #12]
}
 800565c:	bf00      	nop
 800565e:	3714      	adds	r7, #20
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr

08005668 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005668:	b480      	push	{r7}
 800566a:	b085      	sub	sp, #20
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	b2db      	uxtb	r3, r3
 8005676:	3b10      	subs	r3, #16
 8005678:	4a14      	ldr	r2, [pc, #80]	; (80056cc <DMA_CalcBaseAndBitshift+0x64>)
 800567a:	fba2 2303 	umull	r2, r3, r2, r3
 800567e:	091b      	lsrs	r3, r3, #4
 8005680:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005682:	4a13      	ldr	r2, [pc, #76]	; (80056d0 <DMA_CalcBaseAndBitshift+0x68>)
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	4413      	add	r3, r2
 8005688:	781b      	ldrb	r3, [r3, #0]
 800568a:	461a      	mov	r2, r3
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2b03      	cmp	r3, #3
 8005694:	d909      	bls.n	80056aa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800569e:	f023 0303 	bic.w	r3, r3, #3
 80056a2:	1d1a      	adds	r2, r3, #4
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	659a      	str	r2, [r3, #88]	; 0x58
 80056a8:	e007      	b.n	80056ba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80056b2:	f023 0303 	bic.w	r3, r3, #3
 80056b6:	687a      	ldr	r2, [r7, #4]
 80056b8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3714      	adds	r7, #20
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr
 80056ca:	bf00      	nop
 80056cc:	aaaaaaab 	.word	0xaaaaaaab
 80056d0:	0800bd18 	.word	0x0800bd18

080056d4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b085      	sub	sp, #20
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056dc:	2300      	movs	r3, #0
 80056de:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056e4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	699b      	ldr	r3, [r3, #24]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d11f      	bne.n	800572e <DMA_CheckFifoParam+0x5a>
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	2b03      	cmp	r3, #3
 80056f2:	d856      	bhi.n	80057a2 <DMA_CheckFifoParam+0xce>
 80056f4:	a201      	add	r2, pc, #4	; (adr r2, 80056fc <DMA_CheckFifoParam+0x28>)
 80056f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056fa:	bf00      	nop
 80056fc:	0800570d 	.word	0x0800570d
 8005700:	0800571f 	.word	0x0800571f
 8005704:	0800570d 	.word	0x0800570d
 8005708:	080057a3 	.word	0x080057a3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005710:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005714:	2b00      	cmp	r3, #0
 8005716:	d046      	beq.n	80057a6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800571c:	e043      	b.n	80057a6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005722:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005726:	d140      	bne.n	80057aa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800572c:	e03d      	b.n	80057aa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	699b      	ldr	r3, [r3, #24]
 8005732:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005736:	d121      	bne.n	800577c <DMA_CheckFifoParam+0xa8>
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	2b03      	cmp	r3, #3
 800573c:	d837      	bhi.n	80057ae <DMA_CheckFifoParam+0xda>
 800573e:	a201      	add	r2, pc, #4	; (adr r2, 8005744 <DMA_CheckFifoParam+0x70>)
 8005740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005744:	08005755 	.word	0x08005755
 8005748:	0800575b 	.word	0x0800575b
 800574c:	08005755 	.word	0x08005755
 8005750:	0800576d 	.word	0x0800576d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	73fb      	strb	r3, [r7, #15]
      break;
 8005758:	e030      	b.n	80057bc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800575e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005762:	2b00      	cmp	r3, #0
 8005764:	d025      	beq.n	80057b2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800576a:	e022      	b.n	80057b2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005770:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005774:	d11f      	bne.n	80057b6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800577a:	e01c      	b.n	80057b6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	2b02      	cmp	r3, #2
 8005780:	d903      	bls.n	800578a <DMA_CheckFifoParam+0xb6>
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	2b03      	cmp	r3, #3
 8005786:	d003      	beq.n	8005790 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005788:	e018      	b.n	80057bc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	73fb      	strb	r3, [r7, #15]
      break;
 800578e:	e015      	b.n	80057bc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005794:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005798:	2b00      	cmp	r3, #0
 800579a:	d00e      	beq.n	80057ba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800579c:	2301      	movs	r3, #1
 800579e:	73fb      	strb	r3, [r7, #15]
      break;
 80057a0:	e00b      	b.n	80057ba <DMA_CheckFifoParam+0xe6>
      break;
 80057a2:	bf00      	nop
 80057a4:	e00a      	b.n	80057bc <DMA_CheckFifoParam+0xe8>
      break;
 80057a6:	bf00      	nop
 80057a8:	e008      	b.n	80057bc <DMA_CheckFifoParam+0xe8>
      break;
 80057aa:	bf00      	nop
 80057ac:	e006      	b.n	80057bc <DMA_CheckFifoParam+0xe8>
      break;
 80057ae:	bf00      	nop
 80057b0:	e004      	b.n	80057bc <DMA_CheckFifoParam+0xe8>
      break;
 80057b2:	bf00      	nop
 80057b4:	e002      	b.n	80057bc <DMA_CheckFifoParam+0xe8>
      break;   
 80057b6:	bf00      	nop
 80057b8:	e000      	b.n	80057bc <DMA_CheckFifoParam+0xe8>
      break;
 80057ba:	bf00      	nop
    }
  } 
  
  return status; 
 80057bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3714      	adds	r7, #20
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr
 80057ca:	bf00      	nop

080057cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b089      	sub	sp, #36	; 0x24
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80057d6:	2300      	movs	r3, #0
 80057d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80057da:	2300      	movs	r3, #0
 80057dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80057de:	2300      	movs	r3, #0
 80057e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80057e2:	2300      	movs	r3, #0
 80057e4:	61fb      	str	r3, [r7, #28]
 80057e6:	e16b      	b.n	8005ac0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80057e8:	2201      	movs	r2, #1
 80057ea:	69fb      	ldr	r3, [r7, #28]
 80057ec:	fa02 f303 	lsl.w	r3, r2, r3
 80057f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	697a      	ldr	r2, [r7, #20]
 80057f8:	4013      	ands	r3, r2
 80057fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80057fc:	693a      	ldr	r2, [r7, #16]
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	429a      	cmp	r2, r3
 8005802:	f040 815a 	bne.w	8005aba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	f003 0303 	and.w	r3, r3, #3
 800580e:	2b01      	cmp	r3, #1
 8005810:	d005      	beq.n	800581e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800581a:	2b02      	cmp	r3, #2
 800581c:	d130      	bne.n	8005880 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005824:	69fb      	ldr	r3, [r7, #28]
 8005826:	005b      	lsls	r3, r3, #1
 8005828:	2203      	movs	r2, #3
 800582a:	fa02 f303 	lsl.w	r3, r2, r3
 800582e:	43db      	mvns	r3, r3
 8005830:	69ba      	ldr	r2, [r7, #24]
 8005832:	4013      	ands	r3, r2
 8005834:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	68da      	ldr	r2, [r3, #12]
 800583a:	69fb      	ldr	r3, [r7, #28]
 800583c:	005b      	lsls	r3, r3, #1
 800583e:	fa02 f303 	lsl.w	r3, r2, r3
 8005842:	69ba      	ldr	r2, [r7, #24]
 8005844:	4313      	orrs	r3, r2
 8005846:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	69ba      	ldr	r2, [r7, #24]
 800584c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005854:	2201      	movs	r2, #1
 8005856:	69fb      	ldr	r3, [r7, #28]
 8005858:	fa02 f303 	lsl.w	r3, r2, r3
 800585c:	43db      	mvns	r3, r3
 800585e:	69ba      	ldr	r2, [r7, #24]
 8005860:	4013      	ands	r3, r2
 8005862:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	091b      	lsrs	r3, r3, #4
 800586a:	f003 0201 	and.w	r2, r3, #1
 800586e:	69fb      	ldr	r3, [r7, #28]
 8005870:	fa02 f303 	lsl.w	r3, r2, r3
 8005874:	69ba      	ldr	r2, [r7, #24]
 8005876:	4313      	orrs	r3, r2
 8005878:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	69ba      	ldr	r2, [r7, #24]
 800587e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	f003 0303 	and.w	r3, r3, #3
 8005888:	2b03      	cmp	r3, #3
 800588a:	d017      	beq.n	80058bc <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005892:	69fb      	ldr	r3, [r7, #28]
 8005894:	005b      	lsls	r3, r3, #1
 8005896:	2203      	movs	r2, #3
 8005898:	fa02 f303 	lsl.w	r3, r2, r3
 800589c:	43db      	mvns	r3, r3
 800589e:	69ba      	ldr	r2, [r7, #24]
 80058a0:	4013      	ands	r3, r2
 80058a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	689a      	ldr	r2, [r3, #8]
 80058a8:	69fb      	ldr	r3, [r7, #28]
 80058aa:	005b      	lsls	r3, r3, #1
 80058ac:	fa02 f303 	lsl.w	r3, r2, r3
 80058b0:	69ba      	ldr	r2, [r7, #24]
 80058b2:	4313      	orrs	r3, r2
 80058b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	69ba      	ldr	r2, [r7, #24]
 80058ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	f003 0303 	and.w	r3, r3, #3
 80058c4:	2b02      	cmp	r3, #2
 80058c6:	d123      	bne.n	8005910 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80058c8:	69fb      	ldr	r3, [r7, #28]
 80058ca:	08da      	lsrs	r2, r3, #3
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	3208      	adds	r2, #8
 80058d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80058d6:	69fb      	ldr	r3, [r7, #28]
 80058d8:	f003 0307 	and.w	r3, r3, #7
 80058dc:	009b      	lsls	r3, r3, #2
 80058de:	220f      	movs	r2, #15
 80058e0:	fa02 f303 	lsl.w	r3, r2, r3
 80058e4:	43db      	mvns	r3, r3
 80058e6:	69ba      	ldr	r2, [r7, #24]
 80058e8:	4013      	ands	r3, r2
 80058ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	691a      	ldr	r2, [r3, #16]
 80058f0:	69fb      	ldr	r3, [r7, #28]
 80058f2:	f003 0307 	and.w	r3, r3, #7
 80058f6:	009b      	lsls	r3, r3, #2
 80058f8:	fa02 f303 	lsl.w	r3, r2, r3
 80058fc:	69ba      	ldr	r2, [r7, #24]
 80058fe:	4313      	orrs	r3, r2
 8005900:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005902:	69fb      	ldr	r3, [r7, #28]
 8005904:	08da      	lsrs	r2, r3, #3
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	3208      	adds	r2, #8
 800590a:	69b9      	ldr	r1, [r7, #24]
 800590c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	005b      	lsls	r3, r3, #1
 800591a:	2203      	movs	r2, #3
 800591c:	fa02 f303 	lsl.w	r3, r2, r3
 8005920:	43db      	mvns	r3, r3
 8005922:	69ba      	ldr	r2, [r7, #24]
 8005924:	4013      	ands	r3, r2
 8005926:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	f003 0203 	and.w	r2, r3, #3
 8005930:	69fb      	ldr	r3, [r7, #28]
 8005932:	005b      	lsls	r3, r3, #1
 8005934:	fa02 f303 	lsl.w	r3, r2, r3
 8005938:	69ba      	ldr	r2, [r7, #24]
 800593a:	4313      	orrs	r3, r2
 800593c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	69ba      	ldr	r2, [r7, #24]
 8005942:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800594c:	2b00      	cmp	r3, #0
 800594e:	f000 80b4 	beq.w	8005aba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005952:	2300      	movs	r3, #0
 8005954:	60fb      	str	r3, [r7, #12]
 8005956:	4b60      	ldr	r3, [pc, #384]	; (8005ad8 <HAL_GPIO_Init+0x30c>)
 8005958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800595a:	4a5f      	ldr	r2, [pc, #380]	; (8005ad8 <HAL_GPIO_Init+0x30c>)
 800595c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005960:	6453      	str	r3, [r2, #68]	; 0x44
 8005962:	4b5d      	ldr	r3, [pc, #372]	; (8005ad8 <HAL_GPIO_Init+0x30c>)
 8005964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005966:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800596a:	60fb      	str	r3, [r7, #12]
 800596c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800596e:	4a5b      	ldr	r2, [pc, #364]	; (8005adc <HAL_GPIO_Init+0x310>)
 8005970:	69fb      	ldr	r3, [r7, #28]
 8005972:	089b      	lsrs	r3, r3, #2
 8005974:	3302      	adds	r3, #2
 8005976:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800597a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800597c:	69fb      	ldr	r3, [r7, #28]
 800597e:	f003 0303 	and.w	r3, r3, #3
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	220f      	movs	r2, #15
 8005986:	fa02 f303 	lsl.w	r3, r2, r3
 800598a:	43db      	mvns	r3, r3
 800598c:	69ba      	ldr	r2, [r7, #24]
 800598e:	4013      	ands	r3, r2
 8005990:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	4a52      	ldr	r2, [pc, #328]	; (8005ae0 <HAL_GPIO_Init+0x314>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d02b      	beq.n	80059f2 <HAL_GPIO_Init+0x226>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	4a51      	ldr	r2, [pc, #324]	; (8005ae4 <HAL_GPIO_Init+0x318>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d025      	beq.n	80059ee <HAL_GPIO_Init+0x222>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4a50      	ldr	r2, [pc, #320]	; (8005ae8 <HAL_GPIO_Init+0x31c>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d01f      	beq.n	80059ea <HAL_GPIO_Init+0x21e>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4a4f      	ldr	r2, [pc, #316]	; (8005aec <HAL_GPIO_Init+0x320>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d019      	beq.n	80059e6 <HAL_GPIO_Init+0x21a>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4a4e      	ldr	r2, [pc, #312]	; (8005af0 <HAL_GPIO_Init+0x324>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d013      	beq.n	80059e2 <HAL_GPIO_Init+0x216>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4a4d      	ldr	r2, [pc, #308]	; (8005af4 <HAL_GPIO_Init+0x328>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d00d      	beq.n	80059de <HAL_GPIO_Init+0x212>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	4a4c      	ldr	r2, [pc, #304]	; (8005af8 <HAL_GPIO_Init+0x32c>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d007      	beq.n	80059da <HAL_GPIO_Init+0x20e>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4a4b      	ldr	r2, [pc, #300]	; (8005afc <HAL_GPIO_Init+0x330>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d101      	bne.n	80059d6 <HAL_GPIO_Init+0x20a>
 80059d2:	2307      	movs	r3, #7
 80059d4:	e00e      	b.n	80059f4 <HAL_GPIO_Init+0x228>
 80059d6:	2308      	movs	r3, #8
 80059d8:	e00c      	b.n	80059f4 <HAL_GPIO_Init+0x228>
 80059da:	2306      	movs	r3, #6
 80059dc:	e00a      	b.n	80059f4 <HAL_GPIO_Init+0x228>
 80059de:	2305      	movs	r3, #5
 80059e0:	e008      	b.n	80059f4 <HAL_GPIO_Init+0x228>
 80059e2:	2304      	movs	r3, #4
 80059e4:	e006      	b.n	80059f4 <HAL_GPIO_Init+0x228>
 80059e6:	2303      	movs	r3, #3
 80059e8:	e004      	b.n	80059f4 <HAL_GPIO_Init+0x228>
 80059ea:	2302      	movs	r3, #2
 80059ec:	e002      	b.n	80059f4 <HAL_GPIO_Init+0x228>
 80059ee:	2301      	movs	r3, #1
 80059f0:	e000      	b.n	80059f4 <HAL_GPIO_Init+0x228>
 80059f2:	2300      	movs	r3, #0
 80059f4:	69fa      	ldr	r2, [r7, #28]
 80059f6:	f002 0203 	and.w	r2, r2, #3
 80059fa:	0092      	lsls	r2, r2, #2
 80059fc:	4093      	lsls	r3, r2
 80059fe:	69ba      	ldr	r2, [r7, #24]
 8005a00:	4313      	orrs	r3, r2
 8005a02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005a04:	4935      	ldr	r1, [pc, #212]	; (8005adc <HAL_GPIO_Init+0x310>)
 8005a06:	69fb      	ldr	r3, [r7, #28]
 8005a08:	089b      	lsrs	r3, r3, #2
 8005a0a:	3302      	adds	r3, #2
 8005a0c:	69ba      	ldr	r2, [r7, #24]
 8005a0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005a12:	4b3b      	ldr	r3, [pc, #236]	; (8005b00 <HAL_GPIO_Init+0x334>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	43db      	mvns	r3, r3
 8005a1c:	69ba      	ldr	r2, [r7, #24]
 8005a1e:	4013      	ands	r3, r2
 8005a20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d003      	beq.n	8005a36 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005a2e:	69ba      	ldr	r2, [r7, #24]
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	4313      	orrs	r3, r2
 8005a34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005a36:	4a32      	ldr	r2, [pc, #200]	; (8005b00 <HAL_GPIO_Init+0x334>)
 8005a38:	69bb      	ldr	r3, [r7, #24]
 8005a3a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005a3c:	4b30      	ldr	r3, [pc, #192]	; (8005b00 <HAL_GPIO_Init+0x334>)
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	43db      	mvns	r3, r3
 8005a46:	69ba      	ldr	r2, [r7, #24]
 8005a48:	4013      	ands	r3, r2
 8005a4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d003      	beq.n	8005a60 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005a58:	69ba      	ldr	r2, [r7, #24]
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005a60:	4a27      	ldr	r2, [pc, #156]	; (8005b00 <HAL_GPIO_Init+0x334>)
 8005a62:	69bb      	ldr	r3, [r7, #24]
 8005a64:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005a66:	4b26      	ldr	r3, [pc, #152]	; (8005b00 <HAL_GPIO_Init+0x334>)
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	43db      	mvns	r3, r3
 8005a70:	69ba      	ldr	r2, [r7, #24]
 8005a72:	4013      	ands	r3, r2
 8005a74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d003      	beq.n	8005a8a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005a82:	69ba      	ldr	r2, [r7, #24]
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	4313      	orrs	r3, r2
 8005a88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005a8a:	4a1d      	ldr	r2, [pc, #116]	; (8005b00 <HAL_GPIO_Init+0x334>)
 8005a8c:	69bb      	ldr	r3, [r7, #24]
 8005a8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005a90:	4b1b      	ldr	r3, [pc, #108]	; (8005b00 <HAL_GPIO_Init+0x334>)
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	43db      	mvns	r3, r3
 8005a9a:	69ba      	ldr	r2, [r7, #24]
 8005a9c:	4013      	ands	r3, r2
 8005a9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d003      	beq.n	8005ab4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005aac:	69ba      	ldr	r2, [r7, #24]
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005ab4:	4a12      	ldr	r2, [pc, #72]	; (8005b00 <HAL_GPIO_Init+0x334>)
 8005ab6:	69bb      	ldr	r3, [r7, #24]
 8005ab8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005aba:	69fb      	ldr	r3, [r7, #28]
 8005abc:	3301      	adds	r3, #1
 8005abe:	61fb      	str	r3, [r7, #28]
 8005ac0:	69fb      	ldr	r3, [r7, #28]
 8005ac2:	2b0f      	cmp	r3, #15
 8005ac4:	f67f ae90 	bls.w	80057e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005ac8:	bf00      	nop
 8005aca:	bf00      	nop
 8005acc:	3724      	adds	r7, #36	; 0x24
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad4:	4770      	bx	lr
 8005ad6:	bf00      	nop
 8005ad8:	40023800 	.word	0x40023800
 8005adc:	40013800 	.word	0x40013800
 8005ae0:	40020000 	.word	0x40020000
 8005ae4:	40020400 	.word	0x40020400
 8005ae8:	40020800 	.word	0x40020800
 8005aec:	40020c00 	.word	0x40020c00
 8005af0:	40021000 	.word	0x40021000
 8005af4:	40021400 	.word	0x40021400
 8005af8:	40021800 	.word	0x40021800
 8005afc:	40021c00 	.word	0x40021c00
 8005b00:	40013c00 	.word	0x40013c00

08005b04 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b085      	sub	sp, #20
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	460b      	mov	r3, r1
 8005b0e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	691a      	ldr	r2, [r3, #16]
 8005b14:	887b      	ldrh	r3, [r7, #2]
 8005b16:	4013      	ands	r3, r2
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d002      	beq.n	8005b22 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	73fb      	strb	r3, [r7, #15]
 8005b20:	e001      	b.n	8005b26 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005b22:	2300      	movs	r3, #0
 8005b24:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3714      	adds	r7, #20
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr

08005b34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b083      	sub	sp, #12
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	460b      	mov	r3, r1
 8005b3e:	807b      	strh	r3, [r7, #2]
 8005b40:	4613      	mov	r3, r2
 8005b42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005b44:	787b      	ldrb	r3, [r7, #1]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d003      	beq.n	8005b52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005b4a:	887a      	ldrh	r2, [r7, #2]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005b50:	e003      	b.n	8005b5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005b52:	887b      	ldrh	r3, [r7, #2]
 8005b54:	041a      	lsls	r2, r3, #16
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	619a      	str	r2, [r3, #24]
}
 8005b5a:	bf00      	nop
 8005b5c:	370c      	adds	r7, #12
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr
	...

08005b68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b084      	sub	sp, #16
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d101      	bne.n	8005b7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	e12b      	b.n	8005dd2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b80:	b2db      	uxtb	r3, r3
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d106      	bne.n	8005b94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f7fd fd40 	bl	8003614 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2224      	movs	r2, #36	; 0x24
 8005b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f022 0201 	bic.w	r2, r2, #1
 8005baa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005bba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	681a      	ldr	r2, [r3, #0]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005bca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005bcc:	f000 fd5c 	bl	8006688 <HAL_RCC_GetPCLK1Freq>
 8005bd0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	4a81      	ldr	r2, [pc, #516]	; (8005ddc <HAL_I2C_Init+0x274>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d807      	bhi.n	8005bec <HAL_I2C_Init+0x84>
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	4a80      	ldr	r2, [pc, #512]	; (8005de0 <HAL_I2C_Init+0x278>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	bf94      	ite	ls
 8005be4:	2301      	movls	r3, #1
 8005be6:	2300      	movhi	r3, #0
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	e006      	b.n	8005bfa <HAL_I2C_Init+0x92>
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	4a7d      	ldr	r2, [pc, #500]	; (8005de4 <HAL_I2C_Init+0x27c>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	bf94      	ite	ls
 8005bf4:	2301      	movls	r3, #1
 8005bf6:	2300      	movhi	r3, #0
 8005bf8:	b2db      	uxtb	r3, r3
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d001      	beq.n	8005c02 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e0e7      	b.n	8005dd2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	4a78      	ldr	r2, [pc, #480]	; (8005de8 <HAL_I2C_Init+0x280>)
 8005c06:	fba2 2303 	umull	r2, r3, r2, r3
 8005c0a:	0c9b      	lsrs	r3, r3, #18
 8005c0c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	68ba      	ldr	r2, [r7, #8]
 8005c1e:	430a      	orrs	r2, r1
 8005c20:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	6a1b      	ldr	r3, [r3, #32]
 8005c28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	4a6a      	ldr	r2, [pc, #424]	; (8005ddc <HAL_I2C_Init+0x274>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d802      	bhi.n	8005c3c <HAL_I2C_Init+0xd4>
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	3301      	adds	r3, #1
 8005c3a:	e009      	b.n	8005c50 <HAL_I2C_Init+0xe8>
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005c42:	fb02 f303 	mul.w	r3, r2, r3
 8005c46:	4a69      	ldr	r2, [pc, #420]	; (8005dec <HAL_I2C_Init+0x284>)
 8005c48:	fba2 2303 	umull	r2, r3, r2, r3
 8005c4c:	099b      	lsrs	r3, r3, #6
 8005c4e:	3301      	adds	r3, #1
 8005c50:	687a      	ldr	r2, [r7, #4]
 8005c52:	6812      	ldr	r2, [r2, #0]
 8005c54:	430b      	orrs	r3, r1
 8005c56:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	69db      	ldr	r3, [r3, #28]
 8005c5e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005c62:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	495c      	ldr	r1, [pc, #368]	; (8005ddc <HAL_I2C_Init+0x274>)
 8005c6c:	428b      	cmp	r3, r1
 8005c6e:	d819      	bhi.n	8005ca4 <HAL_I2C_Init+0x13c>
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	1e59      	subs	r1, r3, #1
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	005b      	lsls	r3, r3, #1
 8005c7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8005c7e:	1c59      	adds	r1, r3, #1
 8005c80:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005c84:	400b      	ands	r3, r1
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d00a      	beq.n	8005ca0 <HAL_I2C_Init+0x138>
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	1e59      	subs	r1, r3, #1
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	005b      	lsls	r3, r3, #1
 8005c94:	fbb1 f3f3 	udiv	r3, r1, r3
 8005c98:	3301      	adds	r3, #1
 8005c9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c9e:	e051      	b.n	8005d44 <HAL_I2C_Init+0x1dc>
 8005ca0:	2304      	movs	r3, #4
 8005ca2:	e04f      	b.n	8005d44 <HAL_I2C_Init+0x1dc>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d111      	bne.n	8005cd0 <HAL_I2C_Init+0x168>
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	1e58      	subs	r0, r3, #1
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6859      	ldr	r1, [r3, #4]
 8005cb4:	460b      	mov	r3, r1
 8005cb6:	005b      	lsls	r3, r3, #1
 8005cb8:	440b      	add	r3, r1
 8005cba:	fbb0 f3f3 	udiv	r3, r0, r3
 8005cbe:	3301      	adds	r3, #1
 8005cc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	bf0c      	ite	eq
 8005cc8:	2301      	moveq	r3, #1
 8005cca:	2300      	movne	r3, #0
 8005ccc:	b2db      	uxtb	r3, r3
 8005cce:	e012      	b.n	8005cf6 <HAL_I2C_Init+0x18e>
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	1e58      	subs	r0, r3, #1
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6859      	ldr	r1, [r3, #4]
 8005cd8:	460b      	mov	r3, r1
 8005cda:	009b      	lsls	r3, r3, #2
 8005cdc:	440b      	add	r3, r1
 8005cde:	0099      	lsls	r1, r3, #2
 8005ce0:	440b      	add	r3, r1
 8005ce2:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ce6:	3301      	adds	r3, #1
 8005ce8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	bf0c      	ite	eq
 8005cf0:	2301      	moveq	r3, #1
 8005cf2:	2300      	movne	r3, #0
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d001      	beq.n	8005cfe <HAL_I2C_Init+0x196>
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	e022      	b.n	8005d44 <HAL_I2C_Init+0x1dc>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	689b      	ldr	r3, [r3, #8]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d10e      	bne.n	8005d24 <HAL_I2C_Init+0x1bc>
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	1e58      	subs	r0, r3, #1
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6859      	ldr	r1, [r3, #4]
 8005d0e:	460b      	mov	r3, r1
 8005d10:	005b      	lsls	r3, r3, #1
 8005d12:	440b      	add	r3, r1
 8005d14:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d18:	3301      	adds	r3, #1
 8005d1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d22:	e00f      	b.n	8005d44 <HAL_I2C_Init+0x1dc>
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	1e58      	subs	r0, r3, #1
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6859      	ldr	r1, [r3, #4]
 8005d2c:	460b      	mov	r3, r1
 8005d2e:	009b      	lsls	r3, r3, #2
 8005d30:	440b      	add	r3, r1
 8005d32:	0099      	lsls	r1, r3, #2
 8005d34:	440b      	add	r3, r1
 8005d36:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d3a:	3301      	adds	r3, #1
 8005d3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d44:	6879      	ldr	r1, [r7, #4]
 8005d46:	6809      	ldr	r1, [r1, #0]
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	69da      	ldr	r2, [r3, #28]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6a1b      	ldr	r3, [r3, #32]
 8005d5e:	431a      	orrs	r2, r3
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	430a      	orrs	r2, r1
 8005d66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005d72:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005d76:	687a      	ldr	r2, [r7, #4]
 8005d78:	6911      	ldr	r1, [r2, #16]
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	68d2      	ldr	r2, [r2, #12]
 8005d7e:	4311      	orrs	r1, r2
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	6812      	ldr	r2, [r2, #0]
 8005d84:	430b      	orrs	r3, r1
 8005d86:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	68db      	ldr	r3, [r3, #12]
 8005d8e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	695a      	ldr	r2, [r3, #20]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	699b      	ldr	r3, [r3, #24]
 8005d9a:	431a      	orrs	r2, r3
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	430a      	orrs	r2, r1
 8005da2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f042 0201 	orr.w	r2, r2, #1
 8005db2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2200      	movs	r2, #0
 8005db8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2220      	movs	r2, #32
 8005dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005dd0:	2300      	movs	r3, #0
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3710      	adds	r7, #16
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
 8005dda:	bf00      	nop
 8005ddc:	000186a0 	.word	0x000186a0
 8005de0:	001e847f 	.word	0x001e847f
 8005de4:	003d08ff 	.word	0x003d08ff
 8005de8:	431bde83 	.word	0x431bde83
 8005dec:	10624dd3 	.word	0x10624dd3

08005df0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b086      	sub	sp, #24
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d101      	bne.n	8005e02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	e264      	b.n	80062cc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f003 0301 	and.w	r3, r3, #1
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d075      	beq.n	8005efa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005e0e:	4ba3      	ldr	r3, [pc, #652]	; (800609c <HAL_RCC_OscConfig+0x2ac>)
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	f003 030c 	and.w	r3, r3, #12
 8005e16:	2b04      	cmp	r3, #4
 8005e18:	d00c      	beq.n	8005e34 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e1a:	4ba0      	ldr	r3, [pc, #640]	; (800609c <HAL_RCC_OscConfig+0x2ac>)
 8005e1c:	689b      	ldr	r3, [r3, #8]
 8005e1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005e22:	2b08      	cmp	r3, #8
 8005e24:	d112      	bne.n	8005e4c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e26:	4b9d      	ldr	r3, [pc, #628]	; (800609c <HAL_RCC_OscConfig+0x2ac>)
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e32:	d10b      	bne.n	8005e4c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e34:	4b99      	ldr	r3, [pc, #612]	; (800609c <HAL_RCC_OscConfig+0x2ac>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d05b      	beq.n	8005ef8 <HAL_RCC_OscConfig+0x108>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d157      	bne.n	8005ef8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	e23f      	b.n	80062cc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e54:	d106      	bne.n	8005e64 <HAL_RCC_OscConfig+0x74>
 8005e56:	4b91      	ldr	r3, [pc, #580]	; (800609c <HAL_RCC_OscConfig+0x2ac>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a90      	ldr	r2, [pc, #576]	; (800609c <HAL_RCC_OscConfig+0x2ac>)
 8005e5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e60:	6013      	str	r3, [r2, #0]
 8005e62:	e01d      	b.n	8005ea0 <HAL_RCC_OscConfig+0xb0>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e6c:	d10c      	bne.n	8005e88 <HAL_RCC_OscConfig+0x98>
 8005e6e:	4b8b      	ldr	r3, [pc, #556]	; (800609c <HAL_RCC_OscConfig+0x2ac>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a8a      	ldr	r2, [pc, #552]	; (800609c <HAL_RCC_OscConfig+0x2ac>)
 8005e74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e78:	6013      	str	r3, [r2, #0]
 8005e7a:	4b88      	ldr	r3, [pc, #544]	; (800609c <HAL_RCC_OscConfig+0x2ac>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a87      	ldr	r2, [pc, #540]	; (800609c <HAL_RCC_OscConfig+0x2ac>)
 8005e80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e84:	6013      	str	r3, [r2, #0]
 8005e86:	e00b      	b.n	8005ea0 <HAL_RCC_OscConfig+0xb0>
 8005e88:	4b84      	ldr	r3, [pc, #528]	; (800609c <HAL_RCC_OscConfig+0x2ac>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a83      	ldr	r2, [pc, #524]	; (800609c <HAL_RCC_OscConfig+0x2ac>)
 8005e8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e92:	6013      	str	r3, [r2, #0]
 8005e94:	4b81      	ldr	r3, [pc, #516]	; (800609c <HAL_RCC_OscConfig+0x2ac>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a80      	ldr	r2, [pc, #512]	; (800609c <HAL_RCC_OscConfig+0x2ac>)
 8005e9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d013      	beq.n	8005ed0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ea8:	f7fe ff4c 	bl	8004d44 <HAL_GetTick>
 8005eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005eae:	e008      	b.n	8005ec2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005eb0:	f7fe ff48 	bl	8004d44 <HAL_GetTick>
 8005eb4:	4602      	mov	r2, r0
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	1ad3      	subs	r3, r2, r3
 8005eba:	2b64      	cmp	r3, #100	; 0x64
 8005ebc:	d901      	bls.n	8005ec2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005ebe:	2303      	movs	r3, #3
 8005ec0:	e204      	b.n	80062cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ec2:	4b76      	ldr	r3, [pc, #472]	; (800609c <HAL_RCC_OscConfig+0x2ac>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d0f0      	beq.n	8005eb0 <HAL_RCC_OscConfig+0xc0>
 8005ece:	e014      	b.n	8005efa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ed0:	f7fe ff38 	bl	8004d44 <HAL_GetTick>
 8005ed4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ed6:	e008      	b.n	8005eea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ed8:	f7fe ff34 	bl	8004d44 <HAL_GetTick>
 8005edc:	4602      	mov	r2, r0
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	1ad3      	subs	r3, r2, r3
 8005ee2:	2b64      	cmp	r3, #100	; 0x64
 8005ee4:	d901      	bls.n	8005eea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005ee6:	2303      	movs	r3, #3
 8005ee8:	e1f0      	b.n	80062cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005eea:	4b6c      	ldr	r3, [pc, #432]	; (800609c <HAL_RCC_OscConfig+0x2ac>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d1f0      	bne.n	8005ed8 <HAL_RCC_OscConfig+0xe8>
 8005ef6:	e000      	b.n	8005efa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ef8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f003 0302 	and.w	r3, r3, #2
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d063      	beq.n	8005fce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005f06:	4b65      	ldr	r3, [pc, #404]	; (800609c <HAL_RCC_OscConfig+0x2ac>)
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	f003 030c 	and.w	r3, r3, #12
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d00b      	beq.n	8005f2a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f12:	4b62      	ldr	r3, [pc, #392]	; (800609c <HAL_RCC_OscConfig+0x2ac>)
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005f1a:	2b08      	cmp	r3, #8
 8005f1c:	d11c      	bne.n	8005f58 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f1e:	4b5f      	ldr	r3, [pc, #380]	; (800609c <HAL_RCC_OscConfig+0x2ac>)
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d116      	bne.n	8005f58 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f2a:	4b5c      	ldr	r3, [pc, #368]	; (800609c <HAL_RCC_OscConfig+0x2ac>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f003 0302 	and.w	r3, r3, #2
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d005      	beq.n	8005f42 <HAL_RCC_OscConfig+0x152>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	68db      	ldr	r3, [r3, #12]
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d001      	beq.n	8005f42 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e1c4      	b.n	80062cc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f42:	4b56      	ldr	r3, [pc, #344]	; (800609c <HAL_RCC_OscConfig+0x2ac>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	691b      	ldr	r3, [r3, #16]
 8005f4e:	00db      	lsls	r3, r3, #3
 8005f50:	4952      	ldr	r1, [pc, #328]	; (800609c <HAL_RCC_OscConfig+0x2ac>)
 8005f52:	4313      	orrs	r3, r2
 8005f54:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f56:	e03a      	b.n	8005fce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d020      	beq.n	8005fa2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f60:	4b4f      	ldr	r3, [pc, #316]	; (80060a0 <HAL_RCC_OscConfig+0x2b0>)
 8005f62:	2201      	movs	r2, #1
 8005f64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f66:	f7fe feed 	bl	8004d44 <HAL_GetTick>
 8005f6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f6c:	e008      	b.n	8005f80 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f6e:	f7fe fee9 	bl	8004d44 <HAL_GetTick>
 8005f72:	4602      	mov	r2, r0
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	1ad3      	subs	r3, r2, r3
 8005f78:	2b02      	cmp	r3, #2
 8005f7a:	d901      	bls.n	8005f80 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005f7c:	2303      	movs	r3, #3
 8005f7e:	e1a5      	b.n	80062cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f80:	4b46      	ldr	r3, [pc, #280]	; (800609c <HAL_RCC_OscConfig+0x2ac>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f003 0302 	and.w	r3, r3, #2
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d0f0      	beq.n	8005f6e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f8c:	4b43      	ldr	r3, [pc, #268]	; (800609c <HAL_RCC_OscConfig+0x2ac>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	691b      	ldr	r3, [r3, #16]
 8005f98:	00db      	lsls	r3, r3, #3
 8005f9a:	4940      	ldr	r1, [pc, #256]	; (800609c <HAL_RCC_OscConfig+0x2ac>)
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	600b      	str	r3, [r1, #0]
 8005fa0:	e015      	b.n	8005fce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005fa2:	4b3f      	ldr	r3, [pc, #252]	; (80060a0 <HAL_RCC_OscConfig+0x2b0>)
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fa8:	f7fe fecc 	bl	8004d44 <HAL_GetTick>
 8005fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005fae:	e008      	b.n	8005fc2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005fb0:	f7fe fec8 	bl	8004d44 <HAL_GetTick>
 8005fb4:	4602      	mov	r2, r0
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	1ad3      	subs	r3, r2, r3
 8005fba:	2b02      	cmp	r3, #2
 8005fbc:	d901      	bls.n	8005fc2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005fbe:	2303      	movs	r3, #3
 8005fc0:	e184      	b.n	80062cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005fc2:	4b36      	ldr	r3, [pc, #216]	; (800609c <HAL_RCC_OscConfig+0x2ac>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f003 0302 	and.w	r3, r3, #2
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d1f0      	bne.n	8005fb0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f003 0308 	and.w	r3, r3, #8
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d030      	beq.n	800603c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	695b      	ldr	r3, [r3, #20]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d016      	beq.n	8006010 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005fe2:	4b30      	ldr	r3, [pc, #192]	; (80060a4 <HAL_RCC_OscConfig+0x2b4>)
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fe8:	f7fe feac 	bl	8004d44 <HAL_GetTick>
 8005fec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fee:	e008      	b.n	8006002 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ff0:	f7fe fea8 	bl	8004d44 <HAL_GetTick>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	1ad3      	subs	r3, r2, r3
 8005ffa:	2b02      	cmp	r3, #2
 8005ffc:	d901      	bls.n	8006002 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005ffe:	2303      	movs	r3, #3
 8006000:	e164      	b.n	80062cc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006002:	4b26      	ldr	r3, [pc, #152]	; (800609c <HAL_RCC_OscConfig+0x2ac>)
 8006004:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006006:	f003 0302 	and.w	r3, r3, #2
 800600a:	2b00      	cmp	r3, #0
 800600c:	d0f0      	beq.n	8005ff0 <HAL_RCC_OscConfig+0x200>
 800600e:	e015      	b.n	800603c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006010:	4b24      	ldr	r3, [pc, #144]	; (80060a4 <HAL_RCC_OscConfig+0x2b4>)
 8006012:	2200      	movs	r2, #0
 8006014:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006016:	f7fe fe95 	bl	8004d44 <HAL_GetTick>
 800601a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800601c:	e008      	b.n	8006030 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800601e:	f7fe fe91 	bl	8004d44 <HAL_GetTick>
 8006022:	4602      	mov	r2, r0
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	1ad3      	subs	r3, r2, r3
 8006028:	2b02      	cmp	r3, #2
 800602a:	d901      	bls.n	8006030 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800602c:	2303      	movs	r3, #3
 800602e:	e14d      	b.n	80062cc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006030:	4b1a      	ldr	r3, [pc, #104]	; (800609c <HAL_RCC_OscConfig+0x2ac>)
 8006032:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006034:	f003 0302 	and.w	r3, r3, #2
 8006038:	2b00      	cmp	r3, #0
 800603a:	d1f0      	bne.n	800601e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f003 0304 	and.w	r3, r3, #4
 8006044:	2b00      	cmp	r3, #0
 8006046:	f000 80a0 	beq.w	800618a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800604a:	2300      	movs	r3, #0
 800604c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800604e:	4b13      	ldr	r3, [pc, #76]	; (800609c <HAL_RCC_OscConfig+0x2ac>)
 8006050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006056:	2b00      	cmp	r3, #0
 8006058:	d10f      	bne.n	800607a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800605a:	2300      	movs	r3, #0
 800605c:	60bb      	str	r3, [r7, #8]
 800605e:	4b0f      	ldr	r3, [pc, #60]	; (800609c <HAL_RCC_OscConfig+0x2ac>)
 8006060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006062:	4a0e      	ldr	r2, [pc, #56]	; (800609c <HAL_RCC_OscConfig+0x2ac>)
 8006064:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006068:	6413      	str	r3, [r2, #64]	; 0x40
 800606a:	4b0c      	ldr	r3, [pc, #48]	; (800609c <HAL_RCC_OscConfig+0x2ac>)
 800606c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800606e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006072:	60bb      	str	r3, [r7, #8]
 8006074:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006076:	2301      	movs	r3, #1
 8006078:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800607a:	4b0b      	ldr	r3, [pc, #44]	; (80060a8 <HAL_RCC_OscConfig+0x2b8>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006082:	2b00      	cmp	r3, #0
 8006084:	d121      	bne.n	80060ca <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006086:	4b08      	ldr	r3, [pc, #32]	; (80060a8 <HAL_RCC_OscConfig+0x2b8>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a07      	ldr	r2, [pc, #28]	; (80060a8 <HAL_RCC_OscConfig+0x2b8>)
 800608c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006090:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006092:	f7fe fe57 	bl	8004d44 <HAL_GetTick>
 8006096:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006098:	e011      	b.n	80060be <HAL_RCC_OscConfig+0x2ce>
 800609a:	bf00      	nop
 800609c:	40023800 	.word	0x40023800
 80060a0:	42470000 	.word	0x42470000
 80060a4:	42470e80 	.word	0x42470e80
 80060a8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060ac:	f7fe fe4a 	bl	8004d44 <HAL_GetTick>
 80060b0:	4602      	mov	r2, r0
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	1ad3      	subs	r3, r2, r3
 80060b6:	2b02      	cmp	r3, #2
 80060b8:	d901      	bls.n	80060be <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80060ba:	2303      	movs	r3, #3
 80060bc:	e106      	b.n	80062cc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060be:	4b85      	ldr	r3, [pc, #532]	; (80062d4 <HAL_RCC_OscConfig+0x4e4>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d0f0      	beq.n	80060ac <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d106      	bne.n	80060e0 <HAL_RCC_OscConfig+0x2f0>
 80060d2:	4b81      	ldr	r3, [pc, #516]	; (80062d8 <HAL_RCC_OscConfig+0x4e8>)
 80060d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060d6:	4a80      	ldr	r2, [pc, #512]	; (80062d8 <HAL_RCC_OscConfig+0x4e8>)
 80060d8:	f043 0301 	orr.w	r3, r3, #1
 80060dc:	6713      	str	r3, [r2, #112]	; 0x70
 80060de:	e01c      	b.n	800611a <HAL_RCC_OscConfig+0x32a>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	689b      	ldr	r3, [r3, #8]
 80060e4:	2b05      	cmp	r3, #5
 80060e6:	d10c      	bne.n	8006102 <HAL_RCC_OscConfig+0x312>
 80060e8:	4b7b      	ldr	r3, [pc, #492]	; (80062d8 <HAL_RCC_OscConfig+0x4e8>)
 80060ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ec:	4a7a      	ldr	r2, [pc, #488]	; (80062d8 <HAL_RCC_OscConfig+0x4e8>)
 80060ee:	f043 0304 	orr.w	r3, r3, #4
 80060f2:	6713      	str	r3, [r2, #112]	; 0x70
 80060f4:	4b78      	ldr	r3, [pc, #480]	; (80062d8 <HAL_RCC_OscConfig+0x4e8>)
 80060f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060f8:	4a77      	ldr	r2, [pc, #476]	; (80062d8 <HAL_RCC_OscConfig+0x4e8>)
 80060fa:	f043 0301 	orr.w	r3, r3, #1
 80060fe:	6713      	str	r3, [r2, #112]	; 0x70
 8006100:	e00b      	b.n	800611a <HAL_RCC_OscConfig+0x32a>
 8006102:	4b75      	ldr	r3, [pc, #468]	; (80062d8 <HAL_RCC_OscConfig+0x4e8>)
 8006104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006106:	4a74      	ldr	r2, [pc, #464]	; (80062d8 <HAL_RCC_OscConfig+0x4e8>)
 8006108:	f023 0301 	bic.w	r3, r3, #1
 800610c:	6713      	str	r3, [r2, #112]	; 0x70
 800610e:	4b72      	ldr	r3, [pc, #456]	; (80062d8 <HAL_RCC_OscConfig+0x4e8>)
 8006110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006112:	4a71      	ldr	r2, [pc, #452]	; (80062d8 <HAL_RCC_OscConfig+0x4e8>)
 8006114:	f023 0304 	bic.w	r3, r3, #4
 8006118:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	689b      	ldr	r3, [r3, #8]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d015      	beq.n	800614e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006122:	f7fe fe0f 	bl	8004d44 <HAL_GetTick>
 8006126:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006128:	e00a      	b.n	8006140 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800612a:	f7fe fe0b 	bl	8004d44 <HAL_GetTick>
 800612e:	4602      	mov	r2, r0
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	1ad3      	subs	r3, r2, r3
 8006134:	f241 3288 	movw	r2, #5000	; 0x1388
 8006138:	4293      	cmp	r3, r2
 800613a:	d901      	bls.n	8006140 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800613c:	2303      	movs	r3, #3
 800613e:	e0c5      	b.n	80062cc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006140:	4b65      	ldr	r3, [pc, #404]	; (80062d8 <HAL_RCC_OscConfig+0x4e8>)
 8006142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006144:	f003 0302 	and.w	r3, r3, #2
 8006148:	2b00      	cmp	r3, #0
 800614a:	d0ee      	beq.n	800612a <HAL_RCC_OscConfig+0x33a>
 800614c:	e014      	b.n	8006178 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800614e:	f7fe fdf9 	bl	8004d44 <HAL_GetTick>
 8006152:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006154:	e00a      	b.n	800616c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006156:	f7fe fdf5 	bl	8004d44 <HAL_GetTick>
 800615a:	4602      	mov	r2, r0
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	1ad3      	subs	r3, r2, r3
 8006160:	f241 3288 	movw	r2, #5000	; 0x1388
 8006164:	4293      	cmp	r3, r2
 8006166:	d901      	bls.n	800616c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006168:	2303      	movs	r3, #3
 800616a:	e0af      	b.n	80062cc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800616c:	4b5a      	ldr	r3, [pc, #360]	; (80062d8 <HAL_RCC_OscConfig+0x4e8>)
 800616e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006170:	f003 0302 	and.w	r3, r3, #2
 8006174:	2b00      	cmp	r3, #0
 8006176:	d1ee      	bne.n	8006156 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006178:	7dfb      	ldrb	r3, [r7, #23]
 800617a:	2b01      	cmp	r3, #1
 800617c:	d105      	bne.n	800618a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800617e:	4b56      	ldr	r3, [pc, #344]	; (80062d8 <HAL_RCC_OscConfig+0x4e8>)
 8006180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006182:	4a55      	ldr	r2, [pc, #340]	; (80062d8 <HAL_RCC_OscConfig+0x4e8>)
 8006184:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006188:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	699b      	ldr	r3, [r3, #24]
 800618e:	2b00      	cmp	r3, #0
 8006190:	f000 809b 	beq.w	80062ca <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006194:	4b50      	ldr	r3, [pc, #320]	; (80062d8 <HAL_RCC_OscConfig+0x4e8>)
 8006196:	689b      	ldr	r3, [r3, #8]
 8006198:	f003 030c 	and.w	r3, r3, #12
 800619c:	2b08      	cmp	r3, #8
 800619e:	d05c      	beq.n	800625a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	699b      	ldr	r3, [r3, #24]
 80061a4:	2b02      	cmp	r3, #2
 80061a6:	d141      	bne.n	800622c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061a8:	4b4c      	ldr	r3, [pc, #304]	; (80062dc <HAL_RCC_OscConfig+0x4ec>)
 80061aa:	2200      	movs	r2, #0
 80061ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061ae:	f7fe fdc9 	bl	8004d44 <HAL_GetTick>
 80061b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061b4:	e008      	b.n	80061c8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061b6:	f7fe fdc5 	bl	8004d44 <HAL_GetTick>
 80061ba:	4602      	mov	r2, r0
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	1ad3      	subs	r3, r2, r3
 80061c0:	2b02      	cmp	r3, #2
 80061c2:	d901      	bls.n	80061c8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80061c4:	2303      	movs	r3, #3
 80061c6:	e081      	b.n	80062cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061c8:	4b43      	ldr	r3, [pc, #268]	; (80062d8 <HAL_RCC_OscConfig+0x4e8>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d1f0      	bne.n	80061b6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	69da      	ldr	r2, [r3, #28]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6a1b      	ldr	r3, [r3, #32]
 80061dc:	431a      	orrs	r2, r3
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e2:	019b      	lsls	r3, r3, #6
 80061e4:	431a      	orrs	r2, r3
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ea:	085b      	lsrs	r3, r3, #1
 80061ec:	3b01      	subs	r3, #1
 80061ee:	041b      	lsls	r3, r3, #16
 80061f0:	431a      	orrs	r2, r3
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061f6:	061b      	lsls	r3, r3, #24
 80061f8:	4937      	ldr	r1, [pc, #220]	; (80062d8 <HAL_RCC_OscConfig+0x4e8>)
 80061fa:	4313      	orrs	r3, r2
 80061fc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80061fe:	4b37      	ldr	r3, [pc, #220]	; (80062dc <HAL_RCC_OscConfig+0x4ec>)
 8006200:	2201      	movs	r2, #1
 8006202:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006204:	f7fe fd9e 	bl	8004d44 <HAL_GetTick>
 8006208:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800620a:	e008      	b.n	800621e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800620c:	f7fe fd9a 	bl	8004d44 <HAL_GetTick>
 8006210:	4602      	mov	r2, r0
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	1ad3      	subs	r3, r2, r3
 8006216:	2b02      	cmp	r3, #2
 8006218:	d901      	bls.n	800621e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800621a:	2303      	movs	r3, #3
 800621c:	e056      	b.n	80062cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800621e:	4b2e      	ldr	r3, [pc, #184]	; (80062d8 <HAL_RCC_OscConfig+0x4e8>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006226:	2b00      	cmp	r3, #0
 8006228:	d0f0      	beq.n	800620c <HAL_RCC_OscConfig+0x41c>
 800622a:	e04e      	b.n	80062ca <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800622c:	4b2b      	ldr	r3, [pc, #172]	; (80062dc <HAL_RCC_OscConfig+0x4ec>)
 800622e:	2200      	movs	r2, #0
 8006230:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006232:	f7fe fd87 	bl	8004d44 <HAL_GetTick>
 8006236:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006238:	e008      	b.n	800624c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800623a:	f7fe fd83 	bl	8004d44 <HAL_GetTick>
 800623e:	4602      	mov	r2, r0
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	1ad3      	subs	r3, r2, r3
 8006244:	2b02      	cmp	r3, #2
 8006246:	d901      	bls.n	800624c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006248:	2303      	movs	r3, #3
 800624a:	e03f      	b.n	80062cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800624c:	4b22      	ldr	r3, [pc, #136]	; (80062d8 <HAL_RCC_OscConfig+0x4e8>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006254:	2b00      	cmp	r3, #0
 8006256:	d1f0      	bne.n	800623a <HAL_RCC_OscConfig+0x44a>
 8006258:	e037      	b.n	80062ca <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	699b      	ldr	r3, [r3, #24]
 800625e:	2b01      	cmp	r3, #1
 8006260:	d101      	bne.n	8006266 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	e032      	b.n	80062cc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006266:	4b1c      	ldr	r3, [pc, #112]	; (80062d8 <HAL_RCC_OscConfig+0x4e8>)
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	699b      	ldr	r3, [r3, #24]
 8006270:	2b01      	cmp	r3, #1
 8006272:	d028      	beq.n	80062c6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800627e:	429a      	cmp	r2, r3
 8006280:	d121      	bne.n	80062c6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800628c:	429a      	cmp	r2, r3
 800628e:	d11a      	bne.n	80062c6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006290:	68fa      	ldr	r2, [r7, #12]
 8006292:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006296:	4013      	ands	r3, r2
 8006298:	687a      	ldr	r2, [r7, #4]
 800629a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800629c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800629e:	4293      	cmp	r3, r2
 80062a0:	d111      	bne.n	80062c6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ac:	085b      	lsrs	r3, r3, #1
 80062ae:	3b01      	subs	r3, #1
 80062b0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80062b2:	429a      	cmp	r2, r3
 80062b4:	d107      	bne.n	80062c6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062c0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80062c2:	429a      	cmp	r2, r3
 80062c4:	d001      	beq.n	80062ca <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80062c6:	2301      	movs	r3, #1
 80062c8:	e000      	b.n	80062cc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80062ca:	2300      	movs	r3, #0
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3718      	adds	r7, #24
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}
 80062d4:	40007000 	.word	0x40007000
 80062d8:	40023800 	.word	0x40023800
 80062dc:	42470060 	.word	0x42470060

080062e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b084      	sub	sp, #16
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d101      	bne.n	80062f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80062f0:	2301      	movs	r3, #1
 80062f2:	e0cc      	b.n	800648e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80062f4:	4b68      	ldr	r3, [pc, #416]	; (8006498 <HAL_RCC_ClockConfig+0x1b8>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f003 0307 	and.w	r3, r3, #7
 80062fc:	683a      	ldr	r2, [r7, #0]
 80062fe:	429a      	cmp	r2, r3
 8006300:	d90c      	bls.n	800631c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006302:	4b65      	ldr	r3, [pc, #404]	; (8006498 <HAL_RCC_ClockConfig+0x1b8>)
 8006304:	683a      	ldr	r2, [r7, #0]
 8006306:	b2d2      	uxtb	r2, r2
 8006308:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800630a:	4b63      	ldr	r3, [pc, #396]	; (8006498 <HAL_RCC_ClockConfig+0x1b8>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f003 0307 	and.w	r3, r3, #7
 8006312:	683a      	ldr	r2, [r7, #0]
 8006314:	429a      	cmp	r2, r3
 8006316:	d001      	beq.n	800631c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006318:	2301      	movs	r3, #1
 800631a:	e0b8      	b.n	800648e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f003 0302 	and.w	r3, r3, #2
 8006324:	2b00      	cmp	r3, #0
 8006326:	d020      	beq.n	800636a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f003 0304 	and.w	r3, r3, #4
 8006330:	2b00      	cmp	r3, #0
 8006332:	d005      	beq.n	8006340 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006334:	4b59      	ldr	r3, [pc, #356]	; (800649c <HAL_RCC_ClockConfig+0x1bc>)
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	4a58      	ldr	r2, [pc, #352]	; (800649c <HAL_RCC_ClockConfig+0x1bc>)
 800633a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800633e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f003 0308 	and.w	r3, r3, #8
 8006348:	2b00      	cmp	r3, #0
 800634a:	d005      	beq.n	8006358 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800634c:	4b53      	ldr	r3, [pc, #332]	; (800649c <HAL_RCC_ClockConfig+0x1bc>)
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	4a52      	ldr	r2, [pc, #328]	; (800649c <HAL_RCC_ClockConfig+0x1bc>)
 8006352:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006356:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006358:	4b50      	ldr	r3, [pc, #320]	; (800649c <HAL_RCC_ClockConfig+0x1bc>)
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	494d      	ldr	r1, [pc, #308]	; (800649c <HAL_RCC_ClockConfig+0x1bc>)
 8006366:	4313      	orrs	r3, r2
 8006368:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f003 0301 	and.w	r3, r3, #1
 8006372:	2b00      	cmp	r3, #0
 8006374:	d044      	beq.n	8006400 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	2b01      	cmp	r3, #1
 800637c:	d107      	bne.n	800638e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800637e:	4b47      	ldr	r3, [pc, #284]	; (800649c <HAL_RCC_ClockConfig+0x1bc>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006386:	2b00      	cmp	r3, #0
 8006388:	d119      	bne.n	80063be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800638a:	2301      	movs	r3, #1
 800638c:	e07f      	b.n	800648e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	2b02      	cmp	r3, #2
 8006394:	d003      	beq.n	800639e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800639a:	2b03      	cmp	r3, #3
 800639c:	d107      	bne.n	80063ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800639e:	4b3f      	ldr	r3, [pc, #252]	; (800649c <HAL_RCC_ClockConfig+0x1bc>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d109      	bne.n	80063be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063aa:	2301      	movs	r3, #1
 80063ac:	e06f      	b.n	800648e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063ae:	4b3b      	ldr	r3, [pc, #236]	; (800649c <HAL_RCC_ClockConfig+0x1bc>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f003 0302 	and.w	r3, r3, #2
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d101      	bne.n	80063be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063ba:	2301      	movs	r3, #1
 80063bc:	e067      	b.n	800648e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80063be:	4b37      	ldr	r3, [pc, #220]	; (800649c <HAL_RCC_ClockConfig+0x1bc>)
 80063c0:	689b      	ldr	r3, [r3, #8]
 80063c2:	f023 0203 	bic.w	r2, r3, #3
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	4934      	ldr	r1, [pc, #208]	; (800649c <HAL_RCC_ClockConfig+0x1bc>)
 80063cc:	4313      	orrs	r3, r2
 80063ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80063d0:	f7fe fcb8 	bl	8004d44 <HAL_GetTick>
 80063d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063d6:	e00a      	b.n	80063ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063d8:	f7fe fcb4 	bl	8004d44 <HAL_GetTick>
 80063dc:	4602      	mov	r2, r0
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	1ad3      	subs	r3, r2, r3
 80063e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d901      	bls.n	80063ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80063ea:	2303      	movs	r3, #3
 80063ec:	e04f      	b.n	800648e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063ee:	4b2b      	ldr	r3, [pc, #172]	; (800649c <HAL_RCC_ClockConfig+0x1bc>)
 80063f0:	689b      	ldr	r3, [r3, #8]
 80063f2:	f003 020c 	and.w	r2, r3, #12
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	009b      	lsls	r3, r3, #2
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d1eb      	bne.n	80063d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006400:	4b25      	ldr	r3, [pc, #148]	; (8006498 <HAL_RCC_ClockConfig+0x1b8>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f003 0307 	and.w	r3, r3, #7
 8006408:	683a      	ldr	r2, [r7, #0]
 800640a:	429a      	cmp	r2, r3
 800640c:	d20c      	bcs.n	8006428 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800640e:	4b22      	ldr	r3, [pc, #136]	; (8006498 <HAL_RCC_ClockConfig+0x1b8>)
 8006410:	683a      	ldr	r2, [r7, #0]
 8006412:	b2d2      	uxtb	r2, r2
 8006414:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006416:	4b20      	ldr	r3, [pc, #128]	; (8006498 <HAL_RCC_ClockConfig+0x1b8>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f003 0307 	and.w	r3, r3, #7
 800641e:	683a      	ldr	r2, [r7, #0]
 8006420:	429a      	cmp	r2, r3
 8006422:	d001      	beq.n	8006428 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006424:	2301      	movs	r3, #1
 8006426:	e032      	b.n	800648e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f003 0304 	and.w	r3, r3, #4
 8006430:	2b00      	cmp	r3, #0
 8006432:	d008      	beq.n	8006446 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006434:	4b19      	ldr	r3, [pc, #100]	; (800649c <HAL_RCC_ClockConfig+0x1bc>)
 8006436:	689b      	ldr	r3, [r3, #8]
 8006438:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	68db      	ldr	r3, [r3, #12]
 8006440:	4916      	ldr	r1, [pc, #88]	; (800649c <HAL_RCC_ClockConfig+0x1bc>)
 8006442:	4313      	orrs	r3, r2
 8006444:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f003 0308 	and.w	r3, r3, #8
 800644e:	2b00      	cmp	r3, #0
 8006450:	d009      	beq.n	8006466 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006452:	4b12      	ldr	r3, [pc, #72]	; (800649c <HAL_RCC_ClockConfig+0x1bc>)
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	691b      	ldr	r3, [r3, #16]
 800645e:	00db      	lsls	r3, r3, #3
 8006460:	490e      	ldr	r1, [pc, #56]	; (800649c <HAL_RCC_ClockConfig+0x1bc>)
 8006462:	4313      	orrs	r3, r2
 8006464:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006466:	f000 f821 	bl	80064ac <HAL_RCC_GetSysClockFreq>
 800646a:	4602      	mov	r2, r0
 800646c:	4b0b      	ldr	r3, [pc, #44]	; (800649c <HAL_RCC_ClockConfig+0x1bc>)
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	091b      	lsrs	r3, r3, #4
 8006472:	f003 030f 	and.w	r3, r3, #15
 8006476:	490a      	ldr	r1, [pc, #40]	; (80064a0 <HAL_RCC_ClockConfig+0x1c0>)
 8006478:	5ccb      	ldrb	r3, [r1, r3]
 800647a:	fa22 f303 	lsr.w	r3, r2, r3
 800647e:	4a09      	ldr	r2, [pc, #36]	; (80064a4 <HAL_RCC_ClockConfig+0x1c4>)
 8006480:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006482:	4b09      	ldr	r3, [pc, #36]	; (80064a8 <HAL_RCC_ClockConfig+0x1c8>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4618      	mov	r0, r3
 8006488:	f7fe fc18 	bl	8004cbc <HAL_InitTick>

  return HAL_OK;
 800648c:	2300      	movs	r3, #0
}
 800648e:	4618      	mov	r0, r3
 8006490:	3710      	adds	r7, #16
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}
 8006496:	bf00      	nop
 8006498:	40023c00 	.word	0x40023c00
 800649c:	40023800 	.word	0x40023800
 80064a0:	0800bd00 	.word	0x0800bd00
 80064a4:	20000030 	.word	0x20000030
 80064a8:	20000034 	.word	0x20000034

080064ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80064ac:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80064b0:	b084      	sub	sp, #16
 80064b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80064b4:	2300      	movs	r3, #0
 80064b6:	607b      	str	r3, [r7, #4]
 80064b8:	2300      	movs	r3, #0
 80064ba:	60fb      	str	r3, [r7, #12]
 80064bc:	2300      	movs	r3, #0
 80064be:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80064c0:	2300      	movs	r3, #0
 80064c2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80064c4:	4b67      	ldr	r3, [pc, #412]	; (8006664 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	f003 030c 	and.w	r3, r3, #12
 80064cc:	2b08      	cmp	r3, #8
 80064ce:	d00d      	beq.n	80064ec <HAL_RCC_GetSysClockFreq+0x40>
 80064d0:	2b08      	cmp	r3, #8
 80064d2:	f200 80bd 	bhi.w	8006650 <HAL_RCC_GetSysClockFreq+0x1a4>
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d002      	beq.n	80064e0 <HAL_RCC_GetSysClockFreq+0x34>
 80064da:	2b04      	cmp	r3, #4
 80064dc:	d003      	beq.n	80064e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80064de:	e0b7      	b.n	8006650 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80064e0:	4b61      	ldr	r3, [pc, #388]	; (8006668 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80064e2:	60bb      	str	r3, [r7, #8]
       break;
 80064e4:	e0b7      	b.n	8006656 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80064e6:	4b61      	ldr	r3, [pc, #388]	; (800666c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80064e8:	60bb      	str	r3, [r7, #8]
      break;
 80064ea:	e0b4      	b.n	8006656 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80064ec:	4b5d      	ldr	r3, [pc, #372]	; (8006664 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80064f4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80064f6:	4b5b      	ldr	r3, [pc, #364]	; (8006664 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d04d      	beq.n	800659e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006502:	4b58      	ldr	r3, [pc, #352]	; (8006664 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	099b      	lsrs	r3, r3, #6
 8006508:	461a      	mov	r2, r3
 800650a:	f04f 0300 	mov.w	r3, #0
 800650e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006512:	f04f 0100 	mov.w	r1, #0
 8006516:	ea02 0800 	and.w	r8, r2, r0
 800651a:	ea03 0901 	and.w	r9, r3, r1
 800651e:	4640      	mov	r0, r8
 8006520:	4649      	mov	r1, r9
 8006522:	f04f 0200 	mov.w	r2, #0
 8006526:	f04f 0300 	mov.w	r3, #0
 800652a:	014b      	lsls	r3, r1, #5
 800652c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006530:	0142      	lsls	r2, r0, #5
 8006532:	4610      	mov	r0, r2
 8006534:	4619      	mov	r1, r3
 8006536:	ebb0 0008 	subs.w	r0, r0, r8
 800653a:	eb61 0109 	sbc.w	r1, r1, r9
 800653e:	f04f 0200 	mov.w	r2, #0
 8006542:	f04f 0300 	mov.w	r3, #0
 8006546:	018b      	lsls	r3, r1, #6
 8006548:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800654c:	0182      	lsls	r2, r0, #6
 800654e:	1a12      	subs	r2, r2, r0
 8006550:	eb63 0301 	sbc.w	r3, r3, r1
 8006554:	f04f 0000 	mov.w	r0, #0
 8006558:	f04f 0100 	mov.w	r1, #0
 800655c:	00d9      	lsls	r1, r3, #3
 800655e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006562:	00d0      	lsls	r0, r2, #3
 8006564:	4602      	mov	r2, r0
 8006566:	460b      	mov	r3, r1
 8006568:	eb12 0208 	adds.w	r2, r2, r8
 800656c:	eb43 0309 	adc.w	r3, r3, r9
 8006570:	f04f 0000 	mov.w	r0, #0
 8006574:	f04f 0100 	mov.w	r1, #0
 8006578:	0259      	lsls	r1, r3, #9
 800657a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800657e:	0250      	lsls	r0, r2, #9
 8006580:	4602      	mov	r2, r0
 8006582:	460b      	mov	r3, r1
 8006584:	4610      	mov	r0, r2
 8006586:	4619      	mov	r1, r3
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	461a      	mov	r2, r3
 800658c:	f04f 0300 	mov.w	r3, #0
 8006590:	f7fa fb5a 	bl	8000c48 <__aeabi_uldivmod>
 8006594:	4602      	mov	r2, r0
 8006596:	460b      	mov	r3, r1
 8006598:	4613      	mov	r3, r2
 800659a:	60fb      	str	r3, [r7, #12]
 800659c:	e04a      	b.n	8006634 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800659e:	4b31      	ldr	r3, [pc, #196]	; (8006664 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	099b      	lsrs	r3, r3, #6
 80065a4:	461a      	mov	r2, r3
 80065a6:	f04f 0300 	mov.w	r3, #0
 80065aa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80065ae:	f04f 0100 	mov.w	r1, #0
 80065b2:	ea02 0400 	and.w	r4, r2, r0
 80065b6:	ea03 0501 	and.w	r5, r3, r1
 80065ba:	4620      	mov	r0, r4
 80065bc:	4629      	mov	r1, r5
 80065be:	f04f 0200 	mov.w	r2, #0
 80065c2:	f04f 0300 	mov.w	r3, #0
 80065c6:	014b      	lsls	r3, r1, #5
 80065c8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80065cc:	0142      	lsls	r2, r0, #5
 80065ce:	4610      	mov	r0, r2
 80065d0:	4619      	mov	r1, r3
 80065d2:	1b00      	subs	r0, r0, r4
 80065d4:	eb61 0105 	sbc.w	r1, r1, r5
 80065d8:	f04f 0200 	mov.w	r2, #0
 80065dc:	f04f 0300 	mov.w	r3, #0
 80065e0:	018b      	lsls	r3, r1, #6
 80065e2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80065e6:	0182      	lsls	r2, r0, #6
 80065e8:	1a12      	subs	r2, r2, r0
 80065ea:	eb63 0301 	sbc.w	r3, r3, r1
 80065ee:	f04f 0000 	mov.w	r0, #0
 80065f2:	f04f 0100 	mov.w	r1, #0
 80065f6:	00d9      	lsls	r1, r3, #3
 80065f8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80065fc:	00d0      	lsls	r0, r2, #3
 80065fe:	4602      	mov	r2, r0
 8006600:	460b      	mov	r3, r1
 8006602:	1912      	adds	r2, r2, r4
 8006604:	eb45 0303 	adc.w	r3, r5, r3
 8006608:	f04f 0000 	mov.w	r0, #0
 800660c:	f04f 0100 	mov.w	r1, #0
 8006610:	0299      	lsls	r1, r3, #10
 8006612:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006616:	0290      	lsls	r0, r2, #10
 8006618:	4602      	mov	r2, r0
 800661a:	460b      	mov	r3, r1
 800661c:	4610      	mov	r0, r2
 800661e:	4619      	mov	r1, r3
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	461a      	mov	r2, r3
 8006624:	f04f 0300 	mov.w	r3, #0
 8006628:	f7fa fb0e 	bl	8000c48 <__aeabi_uldivmod>
 800662c:	4602      	mov	r2, r0
 800662e:	460b      	mov	r3, r1
 8006630:	4613      	mov	r3, r2
 8006632:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006634:	4b0b      	ldr	r3, [pc, #44]	; (8006664 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	0c1b      	lsrs	r3, r3, #16
 800663a:	f003 0303 	and.w	r3, r3, #3
 800663e:	3301      	adds	r3, #1
 8006640:	005b      	lsls	r3, r3, #1
 8006642:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006644:	68fa      	ldr	r2, [r7, #12]
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	fbb2 f3f3 	udiv	r3, r2, r3
 800664c:	60bb      	str	r3, [r7, #8]
      break;
 800664e:	e002      	b.n	8006656 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006650:	4b05      	ldr	r3, [pc, #20]	; (8006668 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006652:	60bb      	str	r3, [r7, #8]
      break;
 8006654:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006656:	68bb      	ldr	r3, [r7, #8]
}
 8006658:	4618      	mov	r0, r3
 800665a:	3710      	adds	r7, #16
 800665c:	46bd      	mov	sp, r7
 800665e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006662:	bf00      	nop
 8006664:	40023800 	.word	0x40023800
 8006668:	00f42400 	.word	0x00f42400
 800666c:	007a1200 	.word	0x007a1200

08006670 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006670:	b480      	push	{r7}
 8006672:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006674:	4b03      	ldr	r3, [pc, #12]	; (8006684 <HAL_RCC_GetHCLKFreq+0x14>)
 8006676:	681b      	ldr	r3, [r3, #0]
}
 8006678:	4618      	mov	r0, r3
 800667a:	46bd      	mov	sp, r7
 800667c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006680:	4770      	bx	lr
 8006682:	bf00      	nop
 8006684:	20000030 	.word	0x20000030

08006688 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800668c:	f7ff fff0 	bl	8006670 <HAL_RCC_GetHCLKFreq>
 8006690:	4602      	mov	r2, r0
 8006692:	4b05      	ldr	r3, [pc, #20]	; (80066a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006694:	689b      	ldr	r3, [r3, #8]
 8006696:	0a9b      	lsrs	r3, r3, #10
 8006698:	f003 0307 	and.w	r3, r3, #7
 800669c:	4903      	ldr	r1, [pc, #12]	; (80066ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800669e:	5ccb      	ldrb	r3, [r1, r3]
 80066a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	bd80      	pop	{r7, pc}
 80066a8:	40023800 	.word	0x40023800
 80066ac:	0800bd10 	.word	0x0800bd10

080066b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80066b4:	f7ff ffdc 	bl	8006670 <HAL_RCC_GetHCLKFreq>
 80066b8:	4602      	mov	r2, r0
 80066ba:	4b05      	ldr	r3, [pc, #20]	; (80066d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80066bc:	689b      	ldr	r3, [r3, #8]
 80066be:	0b5b      	lsrs	r3, r3, #13
 80066c0:	f003 0307 	and.w	r3, r3, #7
 80066c4:	4903      	ldr	r1, [pc, #12]	; (80066d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80066c6:	5ccb      	ldrb	r3, [r1, r3]
 80066c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	bd80      	pop	{r7, pc}
 80066d0:	40023800 	.word	0x40023800
 80066d4:	0800bd10 	.word	0x0800bd10

080066d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b082      	sub	sp, #8
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d101      	bne.n	80066ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80066e6:	2301      	movs	r3, #1
 80066e8:	e07b      	b.n	80067e2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d108      	bne.n	8006704 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066fa:	d009      	beq.n	8006710 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2200      	movs	r2, #0
 8006700:	61da      	str	r2, [r3, #28]
 8006702:	e005      	b.n	8006710 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2200      	movs	r2, #0
 8006708:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2200      	movs	r2, #0
 800670e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2200      	movs	r2, #0
 8006714:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800671c:	b2db      	uxtb	r3, r3
 800671e:	2b00      	cmp	r3, #0
 8006720:	d106      	bne.n	8006730 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2200      	movs	r2, #0
 8006726:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f7fd f88a 	bl	8003844 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2202      	movs	r2, #2
 8006734:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	681a      	ldr	r2, [r3, #0]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006746:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	689b      	ldr	r3, [r3, #8]
 8006754:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006758:	431a      	orrs	r2, r3
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	68db      	ldr	r3, [r3, #12]
 800675e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006762:	431a      	orrs	r2, r3
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	691b      	ldr	r3, [r3, #16]
 8006768:	f003 0302 	and.w	r3, r3, #2
 800676c:	431a      	orrs	r2, r3
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	695b      	ldr	r3, [r3, #20]
 8006772:	f003 0301 	and.w	r3, r3, #1
 8006776:	431a      	orrs	r2, r3
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	699b      	ldr	r3, [r3, #24]
 800677c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006780:	431a      	orrs	r2, r3
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	69db      	ldr	r3, [r3, #28]
 8006786:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800678a:	431a      	orrs	r2, r3
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6a1b      	ldr	r3, [r3, #32]
 8006790:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006794:	ea42 0103 	orr.w	r1, r2, r3
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800679c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	430a      	orrs	r2, r1
 80067a6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	699b      	ldr	r3, [r3, #24]
 80067ac:	0c1b      	lsrs	r3, r3, #16
 80067ae:	f003 0104 	and.w	r1, r3, #4
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b6:	f003 0210 	and.w	r2, r3, #16
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	430a      	orrs	r2, r1
 80067c0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	69da      	ldr	r2, [r3, #28]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80067d0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2200      	movs	r2, #0
 80067d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2201      	movs	r2, #1
 80067dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80067e0:	2300      	movs	r3, #0
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3708      	adds	r7, #8
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}

080067ea <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067ea:	b580      	push	{r7, lr}
 80067ec:	b088      	sub	sp, #32
 80067ee:	af00      	add	r7, sp, #0
 80067f0:	60f8      	str	r0, [r7, #12]
 80067f2:	60b9      	str	r1, [r7, #8]
 80067f4:	603b      	str	r3, [r7, #0]
 80067f6:	4613      	mov	r3, r2
 80067f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80067fa:	2300      	movs	r3, #0
 80067fc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006804:	2b01      	cmp	r3, #1
 8006806:	d101      	bne.n	800680c <HAL_SPI_Transmit+0x22>
 8006808:	2302      	movs	r3, #2
 800680a:	e126      	b.n	8006a5a <HAL_SPI_Transmit+0x270>
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	2201      	movs	r2, #1
 8006810:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006814:	f7fe fa96 	bl	8004d44 <HAL_GetTick>
 8006818:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800681a:	88fb      	ldrh	r3, [r7, #6]
 800681c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006824:	b2db      	uxtb	r3, r3
 8006826:	2b01      	cmp	r3, #1
 8006828:	d002      	beq.n	8006830 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800682a:	2302      	movs	r3, #2
 800682c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800682e:	e10b      	b.n	8006a48 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d002      	beq.n	800683c <HAL_SPI_Transmit+0x52>
 8006836:	88fb      	ldrh	r3, [r7, #6]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d102      	bne.n	8006842 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800683c:	2301      	movs	r3, #1
 800683e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006840:	e102      	b.n	8006a48 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2203      	movs	r2, #3
 8006846:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2200      	movs	r2, #0
 800684e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	68ba      	ldr	r2, [r7, #8]
 8006854:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	88fa      	ldrh	r2, [r7, #6]
 800685a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	88fa      	ldrh	r2, [r7, #6]
 8006860:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2200      	movs	r2, #0
 8006866:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2200      	movs	r2, #0
 800686c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2200      	movs	r2, #0
 8006872:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2200      	movs	r2, #0
 8006878:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2200      	movs	r2, #0
 800687e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	689b      	ldr	r3, [r3, #8]
 8006884:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006888:	d10f      	bne.n	80068aa <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	681a      	ldr	r2, [r3, #0]
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006898:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	681a      	ldr	r2, [r3, #0]
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80068a8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068b4:	2b40      	cmp	r3, #64	; 0x40
 80068b6:	d007      	beq.n	80068c8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	681a      	ldr	r2, [r3, #0]
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	68db      	ldr	r3, [r3, #12]
 80068cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068d0:	d14b      	bne.n	800696a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d002      	beq.n	80068e0 <HAL_SPI_Transmit+0xf6>
 80068da:	8afb      	ldrh	r3, [r7, #22]
 80068dc:	2b01      	cmp	r3, #1
 80068de:	d13e      	bne.n	800695e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068e4:	881a      	ldrh	r2, [r3, #0]
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068f0:	1c9a      	adds	r2, r3, #2
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068fa:	b29b      	uxth	r3, r3
 80068fc:	3b01      	subs	r3, #1
 80068fe:	b29a      	uxth	r2, r3
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006904:	e02b      	b.n	800695e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	689b      	ldr	r3, [r3, #8]
 800690c:	f003 0302 	and.w	r3, r3, #2
 8006910:	2b02      	cmp	r3, #2
 8006912:	d112      	bne.n	800693a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006918:	881a      	ldrh	r2, [r3, #0]
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006924:	1c9a      	adds	r2, r3, #2
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800692e:	b29b      	uxth	r3, r3
 8006930:	3b01      	subs	r3, #1
 8006932:	b29a      	uxth	r2, r3
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	86da      	strh	r2, [r3, #54]	; 0x36
 8006938:	e011      	b.n	800695e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800693a:	f7fe fa03 	bl	8004d44 <HAL_GetTick>
 800693e:	4602      	mov	r2, r0
 8006940:	69bb      	ldr	r3, [r7, #24]
 8006942:	1ad3      	subs	r3, r2, r3
 8006944:	683a      	ldr	r2, [r7, #0]
 8006946:	429a      	cmp	r2, r3
 8006948:	d803      	bhi.n	8006952 <HAL_SPI_Transmit+0x168>
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006950:	d102      	bne.n	8006958 <HAL_SPI_Transmit+0x16e>
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d102      	bne.n	800695e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006958:	2303      	movs	r3, #3
 800695a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800695c:	e074      	b.n	8006a48 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006962:	b29b      	uxth	r3, r3
 8006964:	2b00      	cmp	r3, #0
 8006966:	d1ce      	bne.n	8006906 <HAL_SPI_Transmit+0x11c>
 8006968:	e04c      	b.n	8006a04 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d002      	beq.n	8006978 <HAL_SPI_Transmit+0x18e>
 8006972:	8afb      	ldrh	r3, [r7, #22]
 8006974:	2b01      	cmp	r3, #1
 8006976:	d140      	bne.n	80069fa <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	330c      	adds	r3, #12
 8006982:	7812      	ldrb	r2, [r2, #0]
 8006984:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800698a:	1c5a      	adds	r2, r3, #1
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006994:	b29b      	uxth	r3, r3
 8006996:	3b01      	subs	r3, #1
 8006998:	b29a      	uxth	r2, r3
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800699e:	e02c      	b.n	80069fa <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	689b      	ldr	r3, [r3, #8]
 80069a6:	f003 0302 	and.w	r3, r3, #2
 80069aa:	2b02      	cmp	r3, #2
 80069ac:	d113      	bne.n	80069d6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	330c      	adds	r3, #12
 80069b8:	7812      	ldrb	r2, [r2, #0]
 80069ba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069c0:	1c5a      	adds	r2, r3, #1
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	3b01      	subs	r3, #1
 80069ce:	b29a      	uxth	r2, r3
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	86da      	strh	r2, [r3, #54]	; 0x36
 80069d4:	e011      	b.n	80069fa <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80069d6:	f7fe f9b5 	bl	8004d44 <HAL_GetTick>
 80069da:	4602      	mov	r2, r0
 80069dc:	69bb      	ldr	r3, [r7, #24]
 80069de:	1ad3      	subs	r3, r2, r3
 80069e0:	683a      	ldr	r2, [r7, #0]
 80069e2:	429a      	cmp	r2, r3
 80069e4:	d803      	bhi.n	80069ee <HAL_SPI_Transmit+0x204>
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069ec:	d102      	bne.n	80069f4 <HAL_SPI_Transmit+0x20a>
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d102      	bne.n	80069fa <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80069f4:	2303      	movs	r3, #3
 80069f6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80069f8:	e026      	b.n	8006a48 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d1cd      	bne.n	80069a0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006a04:	69ba      	ldr	r2, [r7, #24]
 8006a06:	6839      	ldr	r1, [r7, #0]
 8006a08:	68f8      	ldr	r0, [r7, #12]
 8006a0a:	f000 f8b3 	bl	8006b74 <SPI_EndRxTxTransaction>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d002      	beq.n	8006a1a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	2220      	movs	r2, #32
 8006a18:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	689b      	ldr	r3, [r3, #8]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d10a      	bne.n	8006a38 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006a22:	2300      	movs	r3, #0
 8006a24:	613b      	str	r3, [r7, #16]
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	68db      	ldr	r3, [r3, #12]
 8006a2c:	613b      	str	r3, [r7, #16]
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	689b      	ldr	r3, [r3, #8]
 8006a34:	613b      	str	r3, [r7, #16]
 8006a36:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d002      	beq.n	8006a46 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006a40:	2301      	movs	r3, #1
 8006a42:	77fb      	strb	r3, [r7, #31]
 8006a44:	e000      	b.n	8006a48 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006a46:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	2200      	movs	r2, #0
 8006a54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006a58:	7ffb      	ldrb	r3, [r7, #31]
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	3720      	adds	r7, #32
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}
	...

08006a64 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b088      	sub	sp, #32
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	60f8      	str	r0, [r7, #12]
 8006a6c:	60b9      	str	r1, [r7, #8]
 8006a6e:	603b      	str	r3, [r7, #0]
 8006a70:	4613      	mov	r3, r2
 8006a72:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006a74:	f7fe f966 	bl	8004d44 <HAL_GetTick>
 8006a78:	4602      	mov	r2, r0
 8006a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a7c:	1a9b      	subs	r3, r3, r2
 8006a7e:	683a      	ldr	r2, [r7, #0]
 8006a80:	4413      	add	r3, r2
 8006a82:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006a84:	f7fe f95e 	bl	8004d44 <HAL_GetTick>
 8006a88:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006a8a:	4b39      	ldr	r3, [pc, #228]	; (8006b70 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	015b      	lsls	r3, r3, #5
 8006a90:	0d1b      	lsrs	r3, r3, #20
 8006a92:	69fa      	ldr	r2, [r7, #28]
 8006a94:	fb02 f303 	mul.w	r3, r2, r3
 8006a98:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006a9a:	e054      	b.n	8006b46 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aa2:	d050      	beq.n	8006b46 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006aa4:	f7fe f94e 	bl	8004d44 <HAL_GetTick>
 8006aa8:	4602      	mov	r2, r0
 8006aaa:	69bb      	ldr	r3, [r7, #24]
 8006aac:	1ad3      	subs	r3, r2, r3
 8006aae:	69fa      	ldr	r2, [r7, #28]
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d902      	bls.n	8006aba <SPI_WaitFlagStateUntilTimeout+0x56>
 8006ab4:	69fb      	ldr	r3, [r7, #28]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d13d      	bne.n	8006b36 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	685a      	ldr	r2, [r3, #4]
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006ac8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ad2:	d111      	bne.n	8006af8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006adc:	d004      	beq.n	8006ae8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	689b      	ldr	r3, [r3, #8]
 8006ae2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ae6:	d107      	bne.n	8006af8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	681a      	ldr	r2, [r3, #0]
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006af6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006afc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b00:	d10f      	bne.n	8006b22 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	681a      	ldr	r2, [r3, #0]
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006b10:	601a      	str	r2, [r3, #0]
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	681a      	ldr	r2, [r3, #0]
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006b20:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2201      	movs	r2, #1
 8006b26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006b32:	2303      	movs	r3, #3
 8006b34:	e017      	b.n	8006b66 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d101      	bne.n	8006b40 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	3b01      	subs	r3, #1
 8006b44:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	689a      	ldr	r2, [r3, #8]
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	4013      	ands	r3, r2
 8006b50:	68ba      	ldr	r2, [r7, #8]
 8006b52:	429a      	cmp	r2, r3
 8006b54:	bf0c      	ite	eq
 8006b56:	2301      	moveq	r3, #1
 8006b58:	2300      	movne	r3, #0
 8006b5a:	b2db      	uxtb	r3, r3
 8006b5c:	461a      	mov	r2, r3
 8006b5e:	79fb      	ldrb	r3, [r7, #7]
 8006b60:	429a      	cmp	r2, r3
 8006b62:	d19b      	bne.n	8006a9c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006b64:	2300      	movs	r3, #0
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3720      	adds	r7, #32
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}
 8006b6e:	bf00      	nop
 8006b70:	20000030 	.word	0x20000030

08006b74 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b088      	sub	sp, #32
 8006b78:	af02      	add	r7, sp, #8
 8006b7a:	60f8      	str	r0, [r7, #12]
 8006b7c:	60b9      	str	r1, [r7, #8]
 8006b7e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006b80:	4b1b      	ldr	r3, [pc, #108]	; (8006bf0 <SPI_EndRxTxTransaction+0x7c>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a1b      	ldr	r2, [pc, #108]	; (8006bf4 <SPI_EndRxTxTransaction+0x80>)
 8006b86:	fba2 2303 	umull	r2, r3, r2, r3
 8006b8a:	0d5b      	lsrs	r3, r3, #21
 8006b8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006b90:	fb02 f303 	mul.w	r3, r2, r3
 8006b94:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b9e:	d112      	bne.n	8006bc6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	9300      	str	r3, [sp, #0]
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	2180      	movs	r1, #128	; 0x80
 8006baa:	68f8      	ldr	r0, [r7, #12]
 8006bac:	f7ff ff5a 	bl	8006a64 <SPI_WaitFlagStateUntilTimeout>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d016      	beq.n	8006be4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bba:	f043 0220 	orr.w	r2, r3, #32
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006bc2:	2303      	movs	r3, #3
 8006bc4:	e00f      	b.n	8006be6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d00a      	beq.n	8006be2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	3b01      	subs	r3, #1
 8006bd0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	689b      	ldr	r3, [r3, #8]
 8006bd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bdc:	2b80      	cmp	r3, #128	; 0x80
 8006bde:	d0f2      	beq.n	8006bc6 <SPI_EndRxTxTransaction+0x52>
 8006be0:	e000      	b.n	8006be4 <SPI_EndRxTxTransaction+0x70>
        break;
 8006be2:	bf00      	nop
  }

  return HAL_OK;
 8006be4:	2300      	movs	r3, #0
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	3718      	adds	r7, #24
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}
 8006bee:	bf00      	nop
 8006bf0:	20000030 	.word	0x20000030
 8006bf4:	165e9f81 	.word	0x165e9f81

08006bf8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b082      	sub	sp, #8
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d101      	bne.n	8006c0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006c06:	2301      	movs	r3, #1
 8006c08:	e041      	b.n	8006c8e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c10:	b2db      	uxtb	r3, r3
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d106      	bne.n	8006c24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f7fd fc98 	bl	8004554 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2202      	movs	r2, #2
 8006c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681a      	ldr	r2, [r3, #0]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	3304      	adds	r3, #4
 8006c34:	4619      	mov	r1, r3
 8006c36:	4610      	mov	r0, r2
 8006c38:	f000 fe80 	bl	800793c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2201      	movs	r2, #1
 8006c40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2201      	movs	r2, #1
 8006c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2201      	movs	r2, #1
 8006c50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2201      	movs	r2, #1
 8006c58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2201      	movs	r2, #1
 8006c60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2201      	movs	r2, #1
 8006c68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2201      	movs	r2, #1
 8006c70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2201      	movs	r2, #1
 8006c78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2201      	movs	r2, #1
 8006c80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2201      	movs	r2, #1
 8006c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c8c:	2300      	movs	r3, #0
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3708      	adds	r7, #8
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}
	...

08006c98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b085      	sub	sp, #20
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ca6:	b2db      	uxtb	r3, r3
 8006ca8:	2b01      	cmp	r3, #1
 8006caa:	d001      	beq.n	8006cb0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006cac:	2301      	movs	r3, #1
 8006cae:	e04e      	b.n	8006d4e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2202      	movs	r2, #2
 8006cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	68da      	ldr	r2, [r3, #12]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f042 0201 	orr.w	r2, r2, #1
 8006cc6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a23      	ldr	r2, [pc, #140]	; (8006d5c <HAL_TIM_Base_Start_IT+0xc4>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d022      	beq.n	8006d18 <HAL_TIM_Base_Start_IT+0x80>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cda:	d01d      	beq.n	8006d18 <HAL_TIM_Base_Start_IT+0x80>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a1f      	ldr	r2, [pc, #124]	; (8006d60 <HAL_TIM_Base_Start_IT+0xc8>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d018      	beq.n	8006d18 <HAL_TIM_Base_Start_IT+0x80>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a1e      	ldr	r2, [pc, #120]	; (8006d64 <HAL_TIM_Base_Start_IT+0xcc>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d013      	beq.n	8006d18 <HAL_TIM_Base_Start_IT+0x80>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a1c      	ldr	r2, [pc, #112]	; (8006d68 <HAL_TIM_Base_Start_IT+0xd0>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d00e      	beq.n	8006d18 <HAL_TIM_Base_Start_IT+0x80>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a1b      	ldr	r2, [pc, #108]	; (8006d6c <HAL_TIM_Base_Start_IT+0xd4>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d009      	beq.n	8006d18 <HAL_TIM_Base_Start_IT+0x80>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a19      	ldr	r2, [pc, #100]	; (8006d70 <HAL_TIM_Base_Start_IT+0xd8>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d004      	beq.n	8006d18 <HAL_TIM_Base_Start_IT+0x80>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4a18      	ldr	r2, [pc, #96]	; (8006d74 <HAL_TIM_Base_Start_IT+0xdc>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d111      	bne.n	8006d3c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	689b      	ldr	r3, [r3, #8]
 8006d1e:	f003 0307 	and.w	r3, r3, #7
 8006d22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	2b06      	cmp	r3, #6
 8006d28:	d010      	beq.n	8006d4c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	681a      	ldr	r2, [r3, #0]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f042 0201 	orr.w	r2, r2, #1
 8006d38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d3a:	e007      	b.n	8006d4c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	681a      	ldr	r2, [r3, #0]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f042 0201 	orr.w	r2, r2, #1
 8006d4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d4c:	2300      	movs	r3, #0
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3714      	adds	r7, #20
 8006d52:	46bd      	mov	sp, r7
 8006d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d58:	4770      	bx	lr
 8006d5a:	bf00      	nop
 8006d5c:	40010000 	.word	0x40010000
 8006d60:	40000400 	.word	0x40000400
 8006d64:	40000800 	.word	0x40000800
 8006d68:	40000c00 	.word	0x40000c00
 8006d6c:	40010400 	.word	0x40010400
 8006d70:	40014000 	.word	0x40014000
 8006d74:	40001800 	.word	0x40001800

08006d78 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b082      	sub	sp, #8
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d101      	bne.n	8006d8a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006d86:	2301      	movs	r3, #1
 8006d88:	e041      	b.n	8006e0e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d90:	b2db      	uxtb	r3, r3
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d106      	bne.n	8006da4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f7fd fbb6 	bl	8004510 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2202      	movs	r2, #2
 8006da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681a      	ldr	r2, [r3, #0]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	3304      	adds	r3, #4
 8006db4:	4619      	mov	r1, r3
 8006db6:	4610      	mov	r0, r2
 8006db8:	f000 fdc0 	bl	800793c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2201      	movs	r2, #1
 8006dd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2201      	movs	r2, #1
 8006de0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2201      	movs	r2, #1
 8006de8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2201      	movs	r2, #1
 8006df0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2201      	movs	r2, #1
 8006df8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2201      	movs	r2, #1
 8006e00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2201      	movs	r2, #1
 8006e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e0c:	2300      	movs	r3, #0
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	3708      	adds	r7, #8
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}
	...

08006e18 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b084      	sub	sp, #16
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
 8006e20:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d109      	bne.n	8006e3c <HAL_TIM_PWM_Start+0x24>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e2e:	b2db      	uxtb	r3, r3
 8006e30:	2b01      	cmp	r3, #1
 8006e32:	bf14      	ite	ne
 8006e34:	2301      	movne	r3, #1
 8006e36:	2300      	moveq	r3, #0
 8006e38:	b2db      	uxtb	r3, r3
 8006e3a:	e022      	b.n	8006e82 <HAL_TIM_PWM_Start+0x6a>
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	2b04      	cmp	r3, #4
 8006e40:	d109      	bne.n	8006e56 <HAL_TIM_PWM_Start+0x3e>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006e48:	b2db      	uxtb	r3, r3
 8006e4a:	2b01      	cmp	r3, #1
 8006e4c:	bf14      	ite	ne
 8006e4e:	2301      	movne	r3, #1
 8006e50:	2300      	moveq	r3, #0
 8006e52:	b2db      	uxtb	r3, r3
 8006e54:	e015      	b.n	8006e82 <HAL_TIM_PWM_Start+0x6a>
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	2b08      	cmp	r3, #8
 8006e5a:	d109      	bne.n	8006e70 <HAL_TIM_PWM_Start+0x58>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006e62:	b2db      	uxtb	r3, r3
 8006e64:	2b01      	cmp	r3, #1
 8006e66:	bf14      	ite	ne
 8006e68:	2301      	movne	r3, #1
 8006e6a:	2300      	moveq	r3, #0
 8006e6c:	b2db      	uxtb	r3, r3
 8006e6e:	e008      	b.n	8006e82 <HAL_TIM_PWM_Start+0x6a>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e76:	b2db      	uxtb	r3, r3
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	bf14      	ite	ne
 8006e7c:	2301      	movne	r3, #1
 8006e7e:	2300      	moveq	r3, #0
 8006e80:	b2db      	uxtb	r3, r3
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d001      	beq.n	8006e8a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006e86:	2301      	movs	r3, #1
 8006e88:	e07c      	b.n	8006f84 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d104      	bne.n	8006e9a <HAL_TIM_PWM_Start+0x82>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2202      	movs	r2, #2
 8006e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e98:	e013      	b.n	8006ec2 <HAL_TIM_PWM_Start+0xaa>
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	2b04      	cmp	r3, #4
 8006e9e:	d104      	bne.n	8006eaa <HAL_TIM_PWM_Start+0x92>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2202      	movs	r2, #2
 8006ea4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ea8:	e00b      	b.n	8006ec2 <HAL_TIM_PWM_Start+0xaa>
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	2b08      	cmp	r3, #8
 8006eae:	d104      	bne.n	8006eba <HAL_TIM_PWM_Start+0xa2>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2202      	movs	r2, #2
 8006eb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006eb8:	e003      	b.n	8006ec2 <HAL_TIM_PWM_Start+0xaa>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2202      	movs	r2, #2
 8006ebe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	6839      	ldr	r1, [r7, #0]
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f001 f94a 	bl	8008164 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a2d      	ldr	r2, [pc, #180]	; (8006f8c <HAL_TIM_PWM_Start+0x174>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d004      	beq.n	8006ee4 <HAL_TIM_PWM_Start+0xcc>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4a2c      	ldr	r2, [pc, #176]	; (8006f90 <HAL_TIM_PWM_Start+0x178>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d101      	bne.n	8006ee8 <HAL_TIM_PWM_Start+0xd0>
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	e000      	b.n	8006eea <HAL_TIM_PWM_Start+0xd2>
 8006ee8:	2300      	movs	r3, #0
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d007      	beq.n	8006efe <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006efc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4a22      	ldr	r2, [pc, #136]	; (8006f8c <HAL_TIM_PWM_Start+0x174>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d022      	beq.n	8006f4e <HAL_TIM_PWM_Start+0x136>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f10:	d01d      	beq.n	8006f4e <HAL_TIM_PWM_Start+0x136>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a1f      	ldr	r2, [pc, #124]	; (8006f94 <HAL_TIM_PWM_Start+0x17c>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d018      	beq.n	8006f4e <HAL_TIM_PWM_Start+0x136>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a1d      	ldr	r2, [pc, #116]	; (8006f98 <HAL_TIM_PWM_Start+0x180>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d013      	beq.n	8006f4e <HAL_TIM_PWM_Start+0x136>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4a1c      	ldr	r2, [pc, #112]	; (8006f9c <HAL_TIM_PWM_Start+0x184>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d00e      	beq.n	8006f4e <HAL_TIM_PWM_Start+0x136>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a16      	ldr	r2, [pc, #88]	; (8006f90 <HAL_TIM_PWM_Start+0x178>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d009      	beq.n	8006f4e <HAL_TIM_PWM_Start+0x136>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4a18      	ldr	r2, [pc, #96]	; (8006fa0 <HAL_TIM_PWM_Start+0x188>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d004      	beq.n	8006f4e <HAL_TIM_PWM_Start+0x136>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4a16      	ldr	r2, [pc, #88]	; (8006fa4 <HAL_TIM_PWM_Start+0x18c>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d111      	bne.n	8006f72 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	689b      	ldr	r3, [r3, #8]
 8006f54:	f003 0307 	and.w	r3, r3, #7
 8006f58:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	2b06      	cmp	r3, #6
 8006f5e:	d010      	beq.n	8006f82 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	681a      	ldr	r2, [r3, #0]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f042 0201 	orr.w	r2, r2, #1
 8006f6e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f70:	e007      	b.n	8006f82 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	681a      	ldr	r2, [r3, #0]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f042 0201 	orr.w	r2, r2, #1
 8006f80:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006f82:	2300      	movs	r3, #0
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3710      	adds	r7, #16
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}
 8006f8c:	40010000 	.word	0x40010000
 8006f90:	40010400 	.word	0x40010400
 8006f94:	40000400 	.word	0x40000400
 8006f98:	40000800 	.word	0x40000800
 8006f9c:	40000c00 	.word	0x40000c00
 8006fa0:	40014000 	.word	0x40014000
 8006fa4:	40001800 	.word	0x40001800

08006fa8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b082      	sub	sp, #8
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d101      	bne.n	8006fba <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	e041      	b.n	800703e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fc0:	b2db      	uxtb	r3, r3
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d106      	bne.n	8006fd4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f7fd f936 	bl	8004240 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2202      	movs	r2, #2
 8006fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681a      	ldr	r2, [r3, #0]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	3304      	adds	r3, #4
 8006fe4:	4619      	mov	r1, r3
 8006fe6:	4610      	mov	r0, r2
 8006fe8:	f000 fca8 	bl	800793c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2201      	movs	r2, #1
 8006ff0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2201      	movs	r2, #1
 8007000:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2201      	movs	r2, #1
 8007008:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2201      	movs	r2, #1
 8007010:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2201      	movs	r2, #1
 8007018:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2201      	movs	r2, #1
 8007020:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2201      	movs	r2, #1
 8007028:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2201      	movs	r2, #1
 8007030:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2201      	movs	r2, #1
 8007038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800703c:	2300      	movs	r3, #0
}
 800703e:	4618      	mov	r0, r3
 8007040:	3708      	adds	r7, #8
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}

08007046 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007046:	b580      	push	{r7, lr}
 8007048:	b086      	sub	sp, #24
 800704a:	af00      	add	r7, sp, #0
 800704c:	6078      	str	r0, [r7, #4]
 800704e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d101      	bne.n	800705a <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007056:	2301      	movs	r3, #1
 8007058:	e097      	b.n	800718a <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007060:	b2db      	uxtb	r3, r3
 8007062:	2b00      	cmp	r3, #0
 8007064:	d106      	bne.n	8007074 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2200      	movs	r2, #0
 800706a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f7fd f946 	bl	8004300 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2202      	movs	r2, #2
 8007078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	689b      	ldr	r3, [r3, #8]
 8007082:	687a      	ldr	r2, [r7, #4]
 8007084:	6812      	ldr	r2, [r2, #0]
 8007086:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800708a:	f023 0307 	bic.w	r3, r3, #7
 800708e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681a      	ldr	r2, [r3, #0]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	3304      	adds	r3, #4
 8007098:	4619      	mov	r1, r3
 800709a:	4610      	mov	r0, r2
 800709c:	f000 fc4e 	bl	800793c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	689b      	ldr	r3, [r3, #8]
 80070a6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	699b      	ldr	r3, [r3, #24]
 80070ae:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	6a1b      	ldr	r3, [r3, #32]
 80070b6:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	697a      	ldr	r2, [r7, #20]
 80070be:	4313      	orrs	r3, r2
 80070c0:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070c8:	f023 0303 	bic.w	r3, r3, #3
 80070cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	689a      	ldr	r2, [r3, #8]
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	699b      	ldr	r3, [r3, #24]
 80070d6:	021b      	lsls	r3, r3, #8
 80070d8:	4313      	orrs	r3, r2
 80070da:	693a      	ldr	r2, [r7, #16]
 80070dc:	4313      	orrs	r3, r2
 80070de:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80070e0:	693b      	ldr	r3, [r7, #16]
 80070e2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80070e6:	f023 030c 	bic.w	r3, r3, #12
 80070ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80070f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80070f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	68da      	ldr	r2, [r3, #12]
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	69db      	ldr	r3, [r3, #28]
 8007100:	021b      	lsls	r3, r3, #8
 8007102:	4313      	orrs	r3, r2
 8007104:	693a      	ldr	r2, [r7, #16]
 8007106:	4313      	orrs	r3, r2
 8007108:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	691b      	ldr	r3, [r3, #16]
 800710e:	011a      	lsls	r2, r3, #4
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	6a1b      	ldr	r3, [r3, #32]
 8007114:	031b      	lsls	r3, r3, #12
 8007116:	4313      	orrs	r3, r2
 8007118:	693a      	ldr	r2, [r7, #16]
 800711a:	4313      	orrs	r3, r2
 800711c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007124:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800712c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	685a      	ldr	r2, [r3, #4]
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	695b      	ldr	r3, [r3, #20]
 8007136:	011b      	lsls	r3, r3, #4
 8007138:	4313      	orrs	r3, r2
 800713a:	68fa      	ldr	r2, [r7, #12]
 800713c:	4313      	orrs	r3, r2
 800713e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	697a      	ldr	r2, [r7, #20]
 8007146:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	693a      	ldr	r2, [r7, #16]
 800714e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	68fa      	ldr	r2, [r7, #12]
 8007156:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2201      	movs	r2, #1
 800715c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2201      	movs	r2, #1
 8007164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2201      	movs	r2, #1
 800716c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2201      	movs	r2, #1
 8007174:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2201      	movs	r2, #1
 800717c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2201      	movs	r2, #1
 8007184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007188:	2300      	movs	r3, #0
}
 800718a:	4618      	mov	r0, r3
 800718c:	3718      	adds	r7, #24
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}

08007192 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007192:	b580      	push	{r7, lr}
 8007194:	b084      	sub	sp, #16
 8007196:	af00      	add	r7, sp, #0
 8007198:	6078      	str	r0, [r7, #4]
 800719a:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80071a2:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80071aa:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80071b2:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80071ba:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d110      	bne.n	80071e4 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80071c2:	7bfb      	ldrb	r3, [r7, #15]
 80071c4:	2b01      	cmp	r3, #1
 80071c6:	d102      	bne.n	80071ce <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80071c8:	7b7b      	ldrb	r3, [r7, #13]
 80071ca:	2b01      	cmp	r3, #1
 80071cc:	d001      	beq.n	80071d2 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80071ce:	2301      	movs	r3, #1
 80071d0:	e069      	b.n	80072a6 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2202      	movs	r2, #2
 80071d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2202      	movs	r2, #2
 80071de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80071e2:	e031      	b.n	8007248 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	2b04      	cmp	r3, #4
 80071e8:	d110      	bne.n	800720c <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80071ea:	7bbb      	ldrb	r3, [r7, #14]
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	d102      	bne.n	80071f6 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80071f0:	7b3b      	ldrb	r3, [r7, #12]
 80071f2:	2b01      	cmp	r3, #1
 80071f4:	d001      	beq.n	80071fa <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80071f6:	2301      	movs	r3, #1
 80071f8:	e055      	b.n	80072a6 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2202      	movs	r2, #2
 80071fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2202      	movs	r2, #2
 8007206:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800720a:	e01d      	b.n	8007248 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800720c:	7bfb      	ldrb	r3, [r7, #15]
 800720e:	2b01      	cmp	r3, #1
 8007210:	d108      	bne.n	8007224 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007212:	7bbb      	ldrb	r3, [r7, #14]
 8007214:	2b01      	cmp	r3, #1
 8007216:	d105      	bne.n	8007224 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007218:	7b7b      	ldrb	r3, [r7, #13]
 800721a:	2b01      	cmp	r3, #1
 800721c:	d102      	bne.n	8007224 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800721e:	7b3b      	ldrb	r3, [r7, #12]
 8007220:	2b01      	cmp	r3, #1
 8007222:	d001      	beq.n	8007228 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007224:	2301      	movs	r3, #1
 8007226:	e03e      	b.n	80072a6 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2202      	movs	r2, #2
 800722c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2202      	movs	r2, #2
 8007234:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2202      	movs	r2, #2
 800723c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2202      	movs	r2, #2
 8007244:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d003      	beq.n	8007256 <HAL_TIM_Encoder_Start+0xc4>
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	2b04      	cmp	r3, #4
 8007252:	d008      	beq.n	8007266 <HAL_TIM_Encoder_Start+0xd4>
 8007254:	e00f      	b.n	8007276 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	2201      	movs	r2, #1
 800725c:	2100      	movs	r1, #0
 800725e:	4618      	mov	r0, r3
 8007260:	f000 ff80 	bl	8008164 <TIM_CCxChannelCmd>
      break;
 8007264:	e016      	b.n	8007294 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	2201      	movs	r2, #1
 800726c:	2104      	movs	r1, #4
 800726e:	4618      	mov	r0, r3
 8007270:	f000 ff78 	bl	8008164 <TIM_CCxChannelCmd>
      break;
 8007274:	e00e      	b.n	8007294 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	2201      	movs	r2, #1
 800727c:	2100      	movs	r1, #0
 800727e:	4618      	mov	r0, r3
 8007280:	f000 ff70 	bl	8008164 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	2201      	movs	r2, #1
 800728a:	2104      	movs	r1, #4
 800728c:	4618      	mov	r0, r3
 800728e:	f000 ff69 	bl	8008164 <TIM_CCxChannelCmd>
      break;
 8007292:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	681a      	ldr	r2, [r3, #0]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f042 0201 	orr.w	r2, r2, #1
 80072a2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80072a4:	2300      	movs	r3, #0
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	3710      	adds	r7, #16
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd80      	pop	{r7, pc}

080072ae <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80072ae:	b580      	push	{r7, lr}
 80072b0:	b082      	sub	sp, #8
 80072b2:	af00      	add	r7, sp, #0
 80072b4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	691b      	ldr	r3, [r3, #16]
 80072bc:	f003 0302 	and.w	r3, r3, #2
 80072c0:	2b02      	cmp	r3, #2
 80072c2:	d122      	bne.n	800730a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	68db      	ldr	r3, [r3, #12]
 80072ca:	f003 0302 	and.w	r3, r3, #2
 80072ce:	2b02      	cmp	r3, #2
 80072d0:	d11b      	bne.n	800730a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f06f 0202 	mvn.w	r2, #2
 80072da:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2201      	movs	r2, #1
 80072e0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	699b      	ldr	r3, [r3, #24]
 80072e8:	f003 0303 	and.w	r3, r3, #3
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d003      	beq.n	80072f8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f000 fb05 	bl	8007900 <HAL_TIM_IC_CaptureCallback>
 80072f6:	e005      	b.n	8007304 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f000 faf7 	bl	80078ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f000 fb08 	bl	8007914 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2200      	movs	r2, #0
 8007308:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	691b      	ldr	r3, [r3, #16]
 8007310:	f003 0304 	and.w	r3, r3, #4
 8007314:	2b04      	cmp	r3, #4
 8007316:	d122      	bne.n	800735e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	68db      	ldr	r3, [r3, #12]
 800731e:	f003 0304 	and.w	r3, r3, #4
 8007322:	2b04      	cmp	r3, #4
 8007324:	d11b      	bne.n	800735e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f06f 0204 	mvn.w	r2, #4
 800732e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2202      	movs	r2, #2
 8007334:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	699b      	ldr	r3, [r3, #24]
 800733c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007340:	2b00      	cmp	r3, #0
 8007342:	d003      	beq.n	800734c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f000 fadb 	bl	8007900 <HAL_TIM_IC_CaptureCallback>
 800734a:	e005      	b.n	8007358 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f000 facd 	bl	80078ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f000 fade 	bl	8007914 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2200      	movs	r2, #0
 800735c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	691b      	ldr	r3, [r3, #16]
 8007364:	f003 0308 	and.w	r3, r3, #8
 8007368:	2b08      	cmp	r3, #8
 800736a:	d122      	bne.n	80073b2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	68db      	ldr	r3, [r3, #12]
 8007372:	f003 0308 	and.w	r3, r3, #8
 8007376:	2b08      	cmp	r3, #8
 8007378:	d11b      	bne.n	80073b2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f06f 0208 	mvn.w	r2, #8
 8007382:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2204      	movs	r2, #4
 8007388:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	69db      	ldr	r3, [r3, #28]
 8007390:	f003 0303 	and.w	r3, r3, #3
 8007394:	2b00      	cmp	r3, #0
 8007396:	d003      	beq.n	80073a0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f000 fab1 	bl	8007900 <HAL_TIM_IC_CaptureCallback>
 800739e:	e005      	b.n	80073ac <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f000 faa3 	bl	80078ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f000 fab4 	bl	8007914 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2200      	movs	r2, #0
 80073b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	691b      	ldr	r3, [r3, #16]
 80073b8:	f003 0310 	and.w	r3, r3, #16
 80073bc:	2b10      	cmp	r3, #16
 80073be:	d122      	bne.n	8007406 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	68db      	ldr	r3, [r3, #12]
 80073c6:	f003 0310 	and.w	r3, r3, #16
 80073ca:	2b10      	cmp	r3, #16
 80073cc:	d11b      	bne.n	8007406 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f06f 0210 	mvn.w	r2, #16
 80073d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2208      	movs	r2, #8
 80073dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	69db      	ldr	r3, [r3, #28]
 80073e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d003      	beq.n	80073f4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f000 fa87 	bl	8007900 <HAL_TIM_IC_CaptureCallback>
 80073f2:	e005      	b.n	8007400 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f000 fa79 	bl	80078ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f000 fa8a 	bl	8007914 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2200      	movs	r2, #0
 8007404:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	691b      	ldr	r3, [r3, #16]
 800740c:	f003 0301 	and.w	r3, r3, #1
 8007410:	2b01      	cmp	r3, #1
 8007412:	d10e      	bne.n	8007432 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	68db      	ldr	r3, [r3, #12]
 800741a:	f003 0301 	and.w	r3, r3, #1
 800741e:	2b01      	cmp	r3, #1
 8007420:	d107      	bne.n	8007432 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f06f 0201 	mvn.w	r2, #1
 800742a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f7fa fd2f 	bl	8001e90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	691b      	ldr	r3, [r3, #16]
 8007438:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800743c:	2b80      	cmp	r3, #128	; 0x80
 800743e:	d10e      	bne.n	800745e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	68db      	ldr	r3, [r3, #12]
 8007446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800744a:	2b80      	cmp	r3, #128	; 0x80
 800744c:	d107      	bne.n	800745e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007456:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f000 ff2f 	bl	80082bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	691b      	ldr	r3, [r3, #16]
 8007464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007468:	2b40      	cmp	r3, #64	; 0x40
 800746a:	d10e      	bne.n	800748a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	68db      	ldr	r3, [r3, #12]
 8007472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007476:	2b40      	cmp	r3, #64	; 0x40
 8007478:	d107      	bne.n	800748a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007482:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f000 fa4f 	bl	8007928 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	691b      	ldr	r3, [r3, #16]
 8007490:	f003 0320 	and.w	r3, r3, #32
 8007494:	2b20      	cmp	r3, #32
 8007496:	d10e      	bne.n	80074b6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	68db      	ldr	r3, [r3, #12]
 800749e:	f003 0320 	and.w	r3, r3, #32
 80074a2:	2b20      	cmp	r3, #32
 80074a4:	d107      	bne.n	80074b6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f06f 0220 	mvn.w	r2, #32
 80074ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f000 fef9 	bl	80082a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80074b6:	bf00      	nop
 80074b8:	3708      	adds	r7, #8
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}

080074be <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80074be:	b580      	push	{r7, lr}
 80074c0:	b084      	sub	sp, #16
 80074c2:	af00      	add	r7, sp, #0
 80074c4:	60f8      	str	r0, [r7, #12]
 80074c6:	60b9      	str	r1, [r7, #8]
 80074c8:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	d101      	bne.n	80074d8 <HAL_TIM_IC_ConfigChannel+0x1a>
 80074d4:	2302      	movs	r3, #2
 80074d6:	e082      	b.n	80075de <HAL_TIM_IC_ConfigChannel+0x120>
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	2201      	movs	r2, #1
 80074dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d11b      	bne.n	800751e <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	6818      	ldr	r0, [r3, #0]
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	6819      	ldr	r1, [r3, #0]
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	685a      	ldr	r2, [r3, #4]
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	68db      	ldr	r3, [r3, #12]
 80074f6:	f000 fc71 	bl	8007ddc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	699a      	ldr	r2, [r3, #24]
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f022 020c 	bic.w	r2, r2, #12
 8007508:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	6999      	ldr	r1, [r3, #24]
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	689a      	ldr	r2, [r3, #8]
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	430a      	orrs	r2, r1
 800751a:	619a      	str	r2, [r3, #24]
 800751c:	e05a      	b.n	80075d4 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2b04      	cmp	r3, #4
 8007522:	d11c      	bne.n	800755e <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	6818      	ldr	r0, [r3, #0]
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	6819      	ldr	r1, [r3, #0]
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	685a      	ldr	r2, [r3, #4]
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	68db      	ldr	r3, [r3, #12]
 8007534:	f000 fcf5 	bl	8007f22 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	699a      	ldr	r2, [r3, #24]
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007546:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	6999      	ldr	r1, [r3, #24]
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	689b      	ldr	r3, [r3, #8]
 8007552:	021a      	lsls	r2, r3, #8
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	430a      	orrs	r2, r1
 800755a:	619a      	str	r2, [r3, #24]
 800755c:	e03a      	b.n	80075d4 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2b08      	cmp	r3, #8
 8007562:	d11b      	bne.n	800759c <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	6818      	ldr	r0, [r3, #0]
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	6819      	ldr	r1, [r3, #0]
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	685a      	ldr	r2, [r3, #4]
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	68db      	ldr	r3, [r3, #12]
 8007574:	f000 fd42 	bl	8007ffc <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	69da      	ldr	r2, [r3, #28]
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f022 020c 	bic.w	r2, r2, #12
 8007586:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	69d9      	ldr	r1, [r3, #28]
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	689a      	ldr	r2, [r3, #8]
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	430a      	orrs	r2, r1
 8007598:	61da      	str	r2, [r3, #28]
 800759a:	e01b      	b.n	80075d4 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	6818      	ldr	r0, [r3, #0]
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	6819      	ldr	r1, [r3, #0]
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	685a      	ldr	r2, [r3, #4]
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	68db      	ldr	r3, [r3, #12]
 80075ac:	f000 fd62 	bl	8008074 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	69da      	ldr	r2, [r3, #28]
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80075be:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	69d9      	ldr	r1, [r3, #28]
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	689b      	ldr	r3, [r3, #8]
 80075ca:	021a      	lsls	r2, r3, #8
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	430a      	orrs	r2, r1
 80075d2:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	2200      	movs	r2, #0
 80075d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80075dc:	2300      	movs	r3, #0
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3710      	adds	r7, #16
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}
	...

080075e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b084      	sub	sp, #16
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	60f8      	str	r0, [r7, #12]
 80075f0:	60b9      	str	r1, [r7, #8]
 80075f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075fa:	2b01      	cmp	r3, #1
 80075fc:	d101      	bne.n	8007602 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80075fe:	2302      	movs	r3, #2
 8007600:	e0ac      	b.n	800775c <HAL_TIM_PWM_ConfigChannel+0x174>
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2201      	movs	r2, #1
 8007606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2b0c      	cmp	r3, #12
 800760e:	f200 809f 	bhi.w	8007750 <HAL_TIM_PWM_ConfigChannel+0x168>
 8007612:	a201      	add	r2, pc, #4	; (adr r2, 8007618 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8007614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007618:	0800764d 	.word	0x0800764d
 800761c:	08007751 	.word	0x08007751
 8007620:	08007751 	.word	0x08007751
 8007624:	08007751 	.word	0x08007751
 8007628:	0800768d 	.word	0x0800768d
 800762c:	08007751 	.word	0x08007751
 8007630:	08007751 	.word	0x08007751
 8007634:	08007751 	.word	0x08007751
 8007638:	080076cf 	.word	0x080076cf
 800763c:	08007751 	.word	0x08007751
 8007640:	08007751 	.word	0x08007751
 8007644:	08007751 	.word	0x08007751
 8007648:	0800770f 	.word	0x0800770f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	68b9      	ldr	r1, [r7, #8]
 8007652:	4618      	mov	r0, r3
 8007654:	f000 fa12 	bl	8007a7c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	699a      	ldr	r2, [r3, #24]
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f042 0208 	orr.w	r2, r2, #8
 8007666:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	699a      	ldr	r2, [r3, #24]
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f022 0204 	bic.w	r2, r2, #4
 8007676:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	6999      	ldr	r1, [r3, #24]
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	691a      	ldr	r2, [r3, #16]
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	430a      	orrs	r2, r1
 8007688:	619a      	str	r2, [r3, #24]
      break;
 800768a:	e062      	b.n	8007752 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	68b9      	ldr	r1, [r7, #8]
 8007692:	4618      	mov	r0, r3
 8007694:	f000 fa62 	bl	8007b5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	699a      	ldr	r2, [r3, #24]
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80076a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	699a      	ldr	r2, [r3, #24]
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	6999      	ldr	r1, [r3, #24]
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	691b      	ldr	r3, [r3, #16]
 80076c2:	021a      	lsls	r2, r3, #8
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	430a      	orrs	r2, r1
 80076ca:	619a      	str	r2, [r3, #24]
      break;
 80076cc:	e041      	b.n	8007752 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	68b9      	ldr	r1, [r7, #8]
 80076d4:	4618      	mov	r0, r3
 80076d6:	f000 fab7 	bl	8007c48 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	69da      	ldr	r2, [r3, #28]
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f042 0208 	orr.w	r2, r2, #8
 80076e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	69da      	ldr	r2, [r3, #28]
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f022 0204 	bic.w	r2, r2, #4
 80076f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	69d9      	ldr	r1, [r3, #28]
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	691a      	ldr	r2, [r3, #16]
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	430a      	orrs	r2, r1
 800770a:	61da      	str	r2, [r3, #28]
      break;
 800770c:	e021      	b.n	8007752 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	68b9      	ldr	r1, [r7, #8]
 8007714:	4618      	mov	r0, r3
 8007716:	f000 fb0b 	bl	8007d30 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	69da      	ldr	r2, [r3, #28]
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007728:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	69da      	ldr	r2, [r3, #28]
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007738:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	69d9      	ldr	r1, [r3, #28]
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	691b      	ldr	r3, [r3, #16]
 8007744:	021a      	lsls	r2, r3, #8
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	430a      	orrs	r2, r1
 800774c:	61da      	str	r2, [r3, #28]
      break;
 800774e:	e000      	b.n	8007752 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8007750:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	2200      	movs	r2, #0
 8007756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800775a:	2300      	movs	r3, #0
}
 800775c:	4618      	mov	r0, r3
 800775e:	3710      	adds	r7, #16
 8007760:	46bd      	mov	sp, r7
 8007762:	bd80      	pop	{r7, pc}

08007764 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b084      	sub	sp, #16
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
 800776c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007774:	2b01      	cmp	r3, #1
 8007776:	d101      	bne.n	800777c <HAL_TIM_ConfigClockSource+0x18>
 8007778:	2302      	movs	r3, #2
 800777a:	e0b3      	b.n	80078e4 <HAL_TIM_ConfigClockSource+0x180>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2201      	movs	r2, #1
 8007780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2202      	movs	r2, #2
 8007788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	689b      	ldr	r3, [r3, #8]
 8007792:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800779a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80077a2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	68fa      	ldr	r2, [r7, #12]
 80077aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077b4:	d03e      	beq.n	8007834 <HAL_TIM_ConfigClockSource+0xd0>
 80077b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077ba:	f200 8087 	bhi.w	80078cc <HAL_TIM_ConfigClockSource+0x168>
 80077be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077c2:	f000 8085 	beq.w	80078d0 <HAL_TIM_ConfigClockSource+0x16c>
 80077c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077ca:	d87f      	bhi.n	80078cc <HAL_TIM_ConfigClockSource+0x168>
 80077cc:	2b70      	cmp	r3, #112	; 0x70
 80077ce:	d01a      	beq.n	8007806 <HAL_TIM_ConfigClockSource+0xa2>
 80077d0:	2b70      	cmp	r3, #112	; 0x70
 80077d2:	d87b      	bhi.n	80078cc <HAL_TIM_ConfigClockSource+0x168>
 80077d4:	2b60      	cmp	r3, #96	; 0x60
 80077d6:	d050      	beq.n	800787a <HAL_TIM_ConfigClockSource+0x116>
 80077d8:	2b60      	cmp	r3, #96	; 0x60
 80077da:	d877      	bhi.n	80078cc <HAL_TIM_ConfigClockSource+0x168>
 80077dc:	2b50      	cmp	r3, #80	; 0x50
 80077de:	d03c      	beq.n	800785a <HAL_TIM_ConfigClockSource+0xf6>
 80077e0:	2b50      	cmp	r3, #80	; 0x50
 80077e2:	d873      	bhi.n	80078cc <HAL_TIM_ConfigClockSource+0x168>
 80077e4:	2b40      	cmp	r3, #64	; 0x40
 80077e6:	d058      	beq.n	800789a <HAL_TIM_ConfigClockSource+0x136>
 80077e8:	2b40      	cmp	r3, #64	; 0x40
 80077ea:	d86f      	bhi.n	80078cc <HAL_TIM_ConfigClockSource+0x168>
 80077ec:	2b30      	cmp	r3, #48	; 0x30
 80077ee:	d064      	beq.n	80078ba <HAL_TIM_ConfigClockSource+0x156>
 80077f0:	2b30      	cmp	r3, #48	; 0x30
 80077f2:	d86b      	bhi.n	80078cc <HAL_TIM_ConfigClockSource+0x168>
 80077f4:	2b20      	cmp	r3, #32
 80077f6:	d060      	beq.n	80078ba <HAL_TIM_ConfigClockSource+0x156>
 80077f8:	2b20      	cmp	r3, #32
 80077fa:	d867      	bhi.n	80078cc <HAL_TIM_ConfigClockSource+0x168>
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d05c      	beq.n	80078ba <HAL_TIM_ConfigClockSource+0x156>
 8007800:	2b10      	cmp	r3, #16
 8007802:	d05a      	beq.n	80078ba <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007804:	e062      	b.n	80078cc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6818      	ldr	r0, [r3, #0]
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	6899      	ldr	r1, [r3, #8]
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	685a      	ldr	r2, [r3, #4]
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	68db      	ldr	r3, [r3, #12]
 8007816:	f000 fc85 	bl	8008124 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	689b      	ldr	r3, [r3, #8]
 8007820:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007828:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	68fa      	ldr	r2, [r7, #12]
 8007830:	609a      	str	r2, [r3, #8]
      break;
 8007832:	e04e      	b.n	80078d2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6818      	ldr	r0, [r3, #0]
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	6899      	ldr	r1, [r3, #8]
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	685a      	ldr	r2, [r3, #4]
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	68db      	ldr	r3, [r3, #12]
 8007844:	f000 fc6e 	bl	8008124 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	689a      	ldr	r2, [r3, #8]
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007856:	609a      	str	r2, [r3, #8]
      break;
 8007858:	e03b      	b.n	80078d2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6818      	ldr	r0, [r3, #0]
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	6859      	ldr	r1, [r3, #4]
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	68db      	ldr	r3, [r3, #12]
 8007866:	461a      	mov	r2, r3
 8007868:	f000 fb2c 	bl	8007ec4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	2150      	movs	r1, #80	; 0x50
 8007872:	4618      	mov	r0, r3
 8007874:	f000 fc3b 	bl	80080ee <TIM_ITRx_SetConfig>
      break;
 8007878:	e02b      	b.n	80078d2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6818      	ldr	r0, [r3, #0]
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	6859      	ldr	r1, [r3, #4]
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	68db      	ldr	r3, [r3, #12]
 8007886:	461a      	mov	r2, r3
 8007888:	f000 fb88 	bl	8007f9c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	2160      	movs	r1, #96	; 0x60
 8007892:	4618      	mov	r0, r3
 8007894:	f000 fc2b 	bl	80080ee <TIM_ITRx_SetConfig>
      break;
 8007898:	e01b      	b.n	80078d2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6818      	ldr	r0, [r3, #0]
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	6859      	ldr	r1, [r3, #4]
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	68db      	ldr	r3, [r3, #12]
 80078a6:	461a      	mov	r2, r3
 80078a8:	f000 fb0c 	bl	8007ec4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	2140      	movs	r1, #64	; 0x40
 80078b2:	4618      	mov	r0, r3
 80078b4:	f000 fc1b 	bl	80080ee <TIM_ITRx_SetConfig>
      break;
 80078b8:	e00b      	b.n	80078d2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681a      	ldr	r2, [r3, #0]
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4619      	mov	r1, r3
 80078c4:	4610      	mov	r0, r2
 80078c6:	f000 fc12 	bl	80080ee <TIM_ITRx_SetConfig>
        break;
 80078ca:	e002      	b.n	80078d2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80078cc:	bf00      	nop
 80078ce:	e000      	b.n	80078d2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80078d0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2201      	movs	r2, #1
 80078d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2200      	movs	r2, #0
 80078de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80078e2:	2300      	movs	r3, #0
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	3710      	adds	r7, #16
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}

080078ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b083      	sub	sp, #12
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80078f4:	bf00      	nop
 80078f6:	370c      	adds	r7, #12
 80078f8:	46bd      	mov	sp, r7
 80078fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fe:	4770      	bx	lr

08007900 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007900:	b480      	push	{r7}
 8007902:	b083      	sub	sp, #12
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007908:	bf00      	nop
 800790a:	370c      	adds	r7, #12
 800790c:	46bd      	mov	sp, r7
 800790e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007912:	4770      	bx	lr

08007914 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007914:	b480      	push	{r7}
 8007916:	b083      	sub	sp, #12
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800791c:	bf00      	nop
 800791e:	370c      	adds	r7, #12
 8007920:	46bd      	mov	sp, r7
 8007922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007926:	4770      	bx	lr

08007928 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007928:	b480      	push	{r7}
 800792a:	b083      	sub	sp, #12
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007930:	bf00      	nop
 8007932:	370c      	adds	r7, #12
 8007934:	46bd      	mov	sp, r7
 8007936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793a:	4770      	bx	lr

0800793c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800793c:	b480      	push	{r7}
 800793e:	b085      	sub	sp, #20
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	4a40      	ldr	r2, [pc, #256]	; (8007a50 <TIM_Base_SetConfig+0x114>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d013      	beq.n	800797c <TIM_Base_SetConfig+0x40>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800795a:	d00f      	beq.n	800797c <TIM_Base_SetConfig+0x40>
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	4a3d      	ldr	r2, [pc, #244]	; (8007a54 <TIM_Base_SetConfig+0x118>)
 8007960:	4293      	cmp	r3, r2
 8007962:	d00b      	beq.n	800797c <TIM_Base_SetConfig+0x40>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	4a3c      	ldr	r2, [pc, #240]	; (8007a58 <TIM_Base_SetConfig+0x11c>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d007      	beq.n	800797c <TIM_Base_SetConfig+0x40>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	4a3b      	ldr	r2, [pc, #236]	; (8007a5c <TIM_Base_SetConfig+0x120>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d003      	beq.n	800797c <TIM_Base_SetConfig+0x40>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	4a3a      	ldr	r2, [pc, #232]	; (8007a60 <TIM_Base_SetConfig+0x124>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d108      	bne.n	800798e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007982:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	685b      	ldr	r3, [r3, #4]
 8007988:	68fa      	ldr	r2, [r7, #12]
 800798a:	4313      	orrs	r3, r2
 800798c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	4a2f      	ldr	r2, [pc, #188]	; (8007a50 <TIM_Base_SetConfig+0x114>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d02b      	beq.n	80079ee <TIM_Base_SetConfig+0xb2>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800799c:	d027      	beq.n	80079ee <TIM_Base_SetConfig+0xb2>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	4a2c      	ldr	r2, [pc, #176]	; (8007a54 <TIM_Base_SetConfig+0x118>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d023      	beq.n	80079ee <TIM_Base_SetConfig+0xb2>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	4a2b      	ldr	r2, [pc, #172]	; (8007a58 <TIM_Base_SetConfig+0x11c>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d01f      	beq.n	80079ee <TIM_Base_SetConfig+0xb2>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	4a2a      	ldr	r2, [pc, #168]	; (8007a5c <TIM_Base_SetConfig+0x120>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d01b      	beq.n	80079ee <TIM_Base_SetConfig+0xb2>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	4a29      	ldr	r2, [pc, #164]	; (8007a60 <TIM_Base_SetConfig+0x124>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d017      	beq.n	80079ee <TIM_Base_SetConfig+0xb2>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	4a28      	ldr	r2, [pc, #160]	; (8007a64 <TIM_Base_SetConfig+0x128>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d013      	beq.n	80079ee <TIM_Base_SetConfig+0xb2>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	4a27      	ldr	r2, [pc, #156]	; (8007a68 <TIM_Base_SetConfig+0x12c>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d00f      	beq.n	80079ee <TIM_Base_SetConfig+0xb2>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	4a26      	ldr	r2, [pc, #152]	; (8007a6c <TIM_Base_SetConfig+0x130>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d00b      	beq.n	80079ee <TIM_Base_SetConfig+0xb2>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	4a25      	ldr	r2, [pc, #148]	; (8007a70 <TIM_Base_SetConfig+0x134>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d007      	beq.n	80079ee <TIM_Base_SetConfig+0xb2>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	4a24      	ldr	r2, [pc, #144]	; (8007a74 <TIM_Base_SetConfig+0x138>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d003      	beq.n	80079ee <TIM_Base_SetConfig+0xb2>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	4a23      	ldr	r2, [pc, #140]	; (8007a78 <TIM_Base_SetConfig+0x13c>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d108      	bne.n	8007a00 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	68db      	ldr	r3, [r3, #12]
 80079fa:	68fa      	ldr	r2, [r7, #12]
 80079fc:	4313      	orrs	r3, r2
 80079fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	695b      	ldr	r3, [r3, #20]
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	68fa      	ldr	r2, [r7, #12]
 8007a12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	689a      	ldr	r2, [r3, #8]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	681a      	ldr	r2, [r3, #0]
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	4a0a      	ldr	r2, [pc, #40]	; (8007a50 <TIM_Base_SetConfig+0x114>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d003      	beq.n	8007a34 <TIM_Base_SetConfig+0xf8>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	4a0c      	ldr	r2, [pc, #48]	; (8007a60 <TIM_Base_SetConfig+0x124>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d103      	bne.n	8007a3c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	691a      	ldr	r2, [r3, #16]
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2201      	movs	r2, #1
 8007a40:	615a      	str	r2, [r3, #20]
}
 8007a42:	bf00      	nop
 8007a44:	3714      	adds	r7, #20
 8007a46:	46bd      	mov	sp, r7
 8007a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4c:	4770      	bx	lr
 8007a4e:	bf00      	nop
 8007a50:	40010000 	.word	0x40010000
 8007a54:	40000400 	.word	0x40000400
 8007a58:	40000800 	.word	0x40000800
 8007a5c:	40000c00 	.word	0x40000c00
 8007a60:	40010400 	.word	0x40010400
 8007a64:	40014000 	.word	0x40014000
 8007a68:	40014400 	.word	0x40014400
 8007a6c:	40014800 	.word	0x40014800
 8007a70:	40001800 	.word	0x40001800
 8007a74:	40001c00 	.word	0x40001c00
 8007a78:	40002000 	.word	0x40002000

08007a7c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b087      	sub	sp, #28
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
 8007a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6a1b      	ldr	r3, [r3, #32]
 8007a8a:	f023 0201 	bic.w	r2, r3, #1
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6a1b      	ldr	r3, [r3, #32]
 8007a96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	685b      	ldr	r3, [r3, #4]
 8007a9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	699b      	ldr	r3, [r3, #24]
 8007aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007aaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	f023 0303 	bic.w	r3, r3, #3
 8007ab2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	68fa      	ldr	r2, [r7, #12]
 8007aba:	4313      	orrs	r3, r2
 8007abc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	f023 0302 	bic.w	r3, r3, #2
 8007ac4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	689b      	ldr	r3, [r3, #8]
 8007aca:	697a      	ldr	r2, [r7, #20]
 8007acc:	4313      	orrs	r3, r2
 8007ace:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	4a20      	ldr	r2, [pc, #128]	; (8007b54 <TIM_OC1_SetConfig+0xd8>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d003      	beq.n	8007ae0 <TIM_OC1_SetConfig+0x64>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	4a1f      	ldr	r2, [pc, #124]	; (8007b58 <TIM_OC1_SetConfig+0xdc>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d10c      	bne.n	8007afa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	f023 0308 	bic.w	r3, r3, #8
 8007ae6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	68db      	ldr	r3, [r3, #12]
 8007aec:	697a      	ldr	r2, [r7, #20]
 8007aee:	4313      	orrs	r3, r2
 8007af0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007af2:	697b      	ldr	r3, [r7, #20]
 8007af4:	f023 0304 	bic.w	r3, r3, #4
 8007af8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	4a15      	ldr	r2, [pc, #84]	; (8007b54 <TIM_OC1_SetConfig+0xd8>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d003      	beq.n	8007b0a <TIM_OC1_SetConfig+0x8e>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	4a14      	ldr	r2, [pc, #80]	; (8007b58 <TIM_OC1_SetConfig+0xdc>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d111      	bne.n	8007b2e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007b0a:	693b      	ldr	r3, [r7, #16]
 8007b0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007b18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	695b      	ldr	r3, [r3, #20]
 8007b1e:	693a      	ldr	r2, [r7, #16]
 8007b20:	4313      	orrs	r3, r2
 8007b22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	699b      	ldr	r3, [r3, #24]
 8007b28:	693a      	ldr	r2, [r7, #16]
 8007b2a:	4313      	orrs	r3, r2
 8007b2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	693a      	ldr	r2, [r7, #16]
 8007b32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	68fa      	ldr	r2, [r7, #12]
 8007b38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	685a      	ldr	r2, [r3, #4]
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	697a      	ldr	r2, [r7, #20]
 8007b46:	621a      	str	r2, [r3, #32]
}
 8007b48:	bf00      	nop
 8007b4a:	371c      	adds	r7, #28
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b52:	4770      	bx	lr
 8007b54:	40010000 	.word	0x40010000
 8007b58:	40010400 	.word	0x40010400

08007b5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b087      	sub	sp, #28
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
 8007b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6a1b      	ldr	r3, [r3, #32]
 8007b6a:	f023 0210 	bic.w	r2, r3, #16
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6a1b      	ldr	r3, [r3, #32]
 8007b76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	685b      	ldr	r3, [r3, #4]
 8007b7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	699b      	ldr	r3, [r3, #24]
 8007b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	021b      	lsls	r3, r3, #8
 8007b9a:	68fa      	ldr	r2, [r7, #12]
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007ba0:	697b      	ldr	r3, [r7, #20]
 8007ba2:	f023 0320 	bic.w	r3, r3, #32
 8007ba6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	689b      	ldr	r3, [r3, #8]
 8007bac:	011b      	lsls	r3, r3, #4
 8007bae:	697a      	ldr	r2, [r7, #20]
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	4a22      	ldr	r2, [pc, #136]	; (8007c40 <TIM_OC2_SetConfig+0xe4>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d003      	beq.n	8007bc4 <TIM_OC2_SetConfig+0x68>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	4a21      	ldr	r2, [pc, #132]	; (8007c44 <TIM_OC2_SetConfig+0xe8>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d10d      	bne.n	8007be0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007bc4:	697b      	ldr	r3, [r7, #20]
 8007bc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007bca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	68db      	ldr	r3, [r3, #12]
 8007bd0:	011b      	lsls	r3, r3, #4
 8007bd2:	697a      	ldr	r2, [r7, #20]
 8007bd4:	4313      	orrs	r3, r2
 8007bd6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007bde:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	4a17      	ldr	r2, [pc, #92]	; (8007c40 <TIM_OC2_SetConfig+0xe4>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d003      	beq.n	8007bf0 <TIM_OC2_SetConfig+0x94>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	4a16      	ldr	r2, [pc, #88]	; (8007c44 <TIM_OC2_SetConfig+0xe8>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d113      	bne.n	8007c18 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007bf6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007bf8:	693b      	ldr	r3, [r7, #16]
 8007bfa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007bfe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	695b      	ldr	r3, [r3, #20]
 8007c04:	009b      	lsls	r3, r3, #2
 8007c06:	693a      	ldr	r2, [r7, #16]
 8007c08:	4313      	orrs	r3, r2
 8007c0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	699b      	ldr	r3, [r3, #24]
 8007c10:	009b      	lsls	r3, r3, #2
 8007c12:	693a      	ldr	r2, [r7, #16]
 8007c14:	4313      	orrs	r3, r2
 8007c16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	693a      	ldr	r2, [r7, #16]
 8007c1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	68fa      	ldr	r2, [r7, #12]
 8007c22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	685a      	ldr	r2, [r3, #4]
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	697a      	ldr	r2, [r7, #20]
 8007c30:	621a      	str	r2, [r3, #32]
}
 8007c32:	bf00      	nop
 8007c34:	371c      	adds	r7, #28
 8007c36:	46bd      	mov	sp, r7
 8007c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3c:	4770      	bx	lr
 8007c3e:	bf00      	nop
 8007c40:	40010000 	.word	0x40010000
 8007c44:	40010400 	.word	0x40010400

08007c48 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b087      	sub	sp, #28
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
 8007c50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6a1b      	ldr	r3, [r3, #32]
 8007c56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6a1b      	ldr	r3, [r3, #32]
 8007c62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	685b      	ldr	r3, [r3, #4]
 8007c68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	69db      	ldr	r3, [r3, #28]
 8007c6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	f023 0303 	bic.w	r3, r3, #3
 8007c7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	68fa      	ldr	r2, [r7, #12]
 8007c86:	4313      	orrs	r3, r2
 8007c88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007c8a:	697b      	ldr	r3, [r7, #20]
 8007c8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007c90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	689b      	ldr	r3, [r3, #8]
 8007c96:	021b      	lsls	r3, r3, #8
 8007c98:	697a      	ldr	r2, [r7, #20]
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	4a21      	ldr	r2, [pc, #132]	; (8007d28 <TIM_OC3_SetConfig+0xe0>)
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d003      	beq.n	8007cae <TIM_OC3_SetConfig+0x66>
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	4a20      	ldr	r2, [pc, #128]	; (8007d2c <TIM_OC3_SetConfig+0xe4>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d10d      	bne.n	8007cca <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007cb4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	68db      	ldr	r3, [r3, #12]
 8007cba:	021b      	lsls	r3, r3, #8
 8007cbc:	697a      	ldr	r2, [r7, #20]
 8007cbe:	4313      	orrs	r3, r2
 8007cc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007cc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	4a16      	ldr	r2, [pc, #88]	; (8007d28 <TIM_OC3_SetConfig+0xe0>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d003      	beq.n	8007cda <TIM_OC3_SetConfig+0x92>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	4a15      	ldr	r2, [pc, #84]	; (8007d2c <TIM_OC3_SetConfig+0xe4>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d113      	bne.n	8007d02 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007cda:	693b      	ldr	r3, [r7, #16]
 8007cdc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ce0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007ce2:	693b      	ldr	r3, [r7, #16]
 8007ce4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007ce8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	695b      	ldr	r3, [r3, #20]
 8007cee:	011b      	lsls	r3, r3, #4
 8007cf0:	693a      	ldr	r2, [r7, #16]
 8007cf2:	4313      	orrs	r3, r2
 8007cf4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	699b      	ldr	r3, [r3, #24]
 8007cfa:	011b      	lsls	r3, r3, #4
 8007cfc:	693a      	ldr	r2, [r7, #16]
 8007cfe:	4313      	orrs	r3, r2
 8007d00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	693a      	ldr	r2, [r7, #16]
 8007d06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	68fa      	ldr	r2, [r7, #12]
 8007d0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	685a      	ldr	r2, [r3, #4]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	697a      	ldr	r2, [r7, #20]
 8007d1a:	621a      	str	r2, [r3, #32]
}
 8007d1c:	bf00      	nop
 8007d1e:	371c      	adds	r7, #28
 8007d20:	46bd      	mov	sp, r7
 8007d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d26:	4770      	bx	lr
 8007d28:	40010000 	.word	0x40010000
 8007d2c:	40010400 	.word	0x40010400

08007d30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b087      	sub	sp, #28
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6a1b      	ldr	r3, [r3, #32]
 8007d3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6a1b      	ldr	r3, [r3, #32]
 8007d4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	685b      	ldr	r3, [r3, #4]
 8007d50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	69db      	ldr	r3, [r3, #28]
 8007d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	021b      	lsls	r3, r3, #8
 8007d6e:	68fa      	ldr	r2, [r7, #12]
 8007d70:	4313      	orrs	r3, r2
 8007d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007d74:	693b      	ldr	r3, [r7, #16]
 8007d76:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007d7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	689b      	ldr	r3, [r3, #8]
 8007d80:	031b      	lsls	r3, r3, #12
 8007d82:	693a      	ldr	r2, [r7, #16]
 8007d84:	4313      	orrs	r3, r2
 8007d86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	4a12      	ldr	r2, [pc, #72]	; (8007dd4 <TIM_OC4_SetConfig+0xa4>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d003      	beq.n	8007d98 <TIM_OC4_SetConfig+0x68>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	4a11      	ldr	r2, [pc, #68]	; (8007dd8 <TIM_OC4_SetConfig+0xa8>)
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d109      	bne.n	8007dac <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	695b      	ldr	r3, [r3, #20]
 8007da4:	019b      	lsls	r3, r3, #6
 8007da6:	697a      	ldr	r2, [r7, #20]
 8007da8:	4313      	orrs	r3, r2
 8007daa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	697a      	ldr	r2, [r7, #20]
 8007db0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	68fa      	ldr	r2, [r7, #12]
 8007db6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	685a      	ldr	r2, [r3, #4]
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	693a      	ldr	r2, [r7, #16]
 8007dc4:	621a      	str	r2, [r3, #32]
}
 8007dc6:	bf00      	nop
 8007dc8:	371c      	adds	r7, #28
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd0:	4770      	bx	lr
 8007dd2:	bf00      	nop
 8007dd4:	40010000 	.word	0x40010000
 8007dd8:	40010400 	.word	0x40010400

08007ddc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b087      	sub	sp, #28
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	60f8      	str	r0, [r7, #12]
 8007de4:	60b9      	str	r1, [r7, #8]
 8007de6:	607a      	str	r2, [r7, #4]
 8007de8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	6a1b      	ldr	r3, [r3, #32]
 8007dee:	f023 0201 	bic.w	r2, r3, #1
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	699b      	ldr	r3, [r3, #24]
 8007dfa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	6a1b      	ldr	r3, [r3, #32]
 8007e00:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	4a28      	ldr	r2, [pc, #160]	; (8007ea8 <TIM_TI1_SetConfig+0xcc>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d01b      	beq.n	8007e42 <TIM_TI1_SetConfig+0x66>
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e10:	d017      	beq.n	8007e42 <TIM_TI1_SetConfig+0x66>
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	4a25      	ldr	r2, [pc, #148]	; (8007eac <TIM_TI1_SetConfig+0xd0>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d013      	beq.n	8007e42 <TIM_TI1_SetConfig+0x66>
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	4a24      	ldr	r2, [pc, #144]	; (8007eb0 <TIM_TI1_SetConfig+0xd4>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d00f      	beq.n	8007e42 <TIM_TI1_SetConfig+0x66>
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	4a23      	ldr	r2, [pc, #140]	; (8007eb4 <TIM_TI1_SetConfig+0xd8>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d00b      	beq.n	8007e42 <TIM_TI1_SetConfig+0x66>
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	4a22      	ldr	r2, [pc, #136]	; (8007eb8 <TIM_TI1_SetConfig+0xdc>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d007      	beq.n	8007e42 <TIM_TI1_SetConfig+0x66>
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	4a21      	ldr	r2, [pc, #132]	; (8007ebc <TIM_TI1_SetConfig+0xe0>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d003      	beq.n	8007e42 <TIM_TI1_SetConfig+0x66>
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	4a20      	ldr	r2, [pc, #128]	; (8007ec0 <TIM_TI1_SetConfig+0xe4>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d101      	bne.n	8007e46 <TIM_TI1_SetConfig+0x6a>
 8007e42:	2301      	movs	r3, #1
 8007e44:	e000      	b.n	8007e48 <TIM_TI1_SetConfig+0x6c>
 8007e46:	2300      	movs	r3, #0
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d008      	beq.n	8007e5e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	f023 0303 	bic.w	r3, r3, #3
 8007e52:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007e54:	697a      	ldr	r2, [r7, #20]
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	4313      	orrs	r3, r2
 8007e5a:	617b      	str	r3, [r7, #20]
 8007e5c:	e003      	b.n	8007e66 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	f043 0301 	orr.w	r3, r3, #1
 8007e64:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007e6c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	011b      	lsls	r3, r3, #4
 8007e72:	b2db      	uxtb	r3, r3
 8007e74:	697a      	ldr	r2, [r7, #20]
 8007e76:	4313      	orrs	r3, r2
 8007e78:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007e7a:	693b      	ldr	r3, [r7, #16]
 8007e7c:	f023 030a 	bic.w	r3, r3, #10
 8007e80:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	f003 030a 	and.w	r3, r3, #10
 8007e88:	693a      	ldr	r2, [r7, #16]
 8007e8a:	4313      	orrs	r3, r2
 8007e8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	697a      	ldr	r2, [r7, #20]
 8007e92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	693a      	ldr	r2, [r7, #16]
 8007e98:	621a      	str	r2, [r3, #32]
}
 8007e9a:	bf00      	nop
 8007e9c:	371c      	adds	r7, #28
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea4:	4770      	bx	lr
 8007ea6:	bf00      	nop
 8007ea8:	40010000 	.word	0x40010000
 8007eac:	40000400 	.word	0x40000400
 8007eb0:	40000800 	.word	0x40000800
 8007eb4:	40000c00 	.word	0x40000c00
 8007eb8:	40010400 	.word	0x40010400
 8007ebc:	40014000 	.word	0x40014000
 8007ec0:	40001800 	.word	0x40001800

08007ec4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b087      	sub	sp, #28
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	60f8      	str	r0, [r7, #12]
 8007ecc:	60b9      	str	r1, [r7, #8]
 8007ece:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	6a1b      	ldr	r3, [r3, #32]
 8007ed4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	6a1b      	ldr	r3, [r3, #32]
 8007eda:	f023 0201 	bic.w	r2, r3, #1
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	699b      	ldr	r3, [r3, #24]
 8007ee6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007ee8:	693b      	ldr	r3, [r7, #16]
 8007eea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007eee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	011b      	lsls	r3, r3, #4
 8007ef4:	693a      	ldr	r2, [r7, #16]
 8007ef6:	4313      	orrs	r3, r2
 8007ef8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	f023 030a 	bic.w	r3, r3, #10
 8007f00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007f02:	697a      	ldr	r2, [r7, #20]
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	4313      	orrs	r3, r2
 8007f08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	693a      	ldr	r2, [r7, #16]
 8007f0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	697a      	ldr	r2, [r7, #20]
 8007f14:	621a      	str	r2, [r3, #32]
}
 8007f16:	bf00      	nop
 8007f18:	371c      	adds	r7, #28
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f20:	4770      	bx	lr

08007f22 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007f22:	b480      	push	{r7}
 8007f24:	b087      	sub	sp, #28
 8007f26:	af00      	add	r7, sp, #0
 8007f28:	60f8      	str	r0, [r7, #12]
 8007f2a:	60b9      	str	r1, [r7, #8]
 8007f2c:	607a      	str	r2, [r7, #4]
 8007f2e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	6a1b      	ldr	r3, [r3, #32]
 8007f34:	f023 0210 	bic.w	r2, r3, #16
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	699b      	ldr	r3, [r3, #24]
 8007f40:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	6a1b      	ldr	r3, [r3, #32]
 8007f46:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f4e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	021b      	lsls	r3, r3, #8
 8007f54:	697a      	ldr	r2, [r7, #20]
 8007f56:	4313      	orrs	r3, r2
 8007f58:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007f60:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	031b      	lsls	r3, r3, #12
 8007f66:	b29b      	uxth	r3, r3
 8007f68:	697a      	ldr	r2, [r7, #20]
 8007f6a:	4313      	orrs	r3, r2
 8007f6c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007f74:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	011b      	lsls	r3, r3, #4
 8007f7a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007f7e:	693a      	ldr	r2, [r7, #16]
 8007f80:	4313      	orrs	r3, r2
 8007f82:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	697a      	ldr	r2, [r7, #20]
 8007f88:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	693a      	ldr	r2, [r7, #16]
 8007f8e:	621a      	str	r2, [r3, #32]
}
 8007f90:	bf00      	nop
 8007f92:	371c      	adds	r7, #28
 8007f94:	46bd      	mov	sp, r7
 8007f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9a:	4770      	bx	lr

08007f9c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b087      	sub	sp, #28
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	60f8      	str	r0, [r7, #12]
 8007fa4:	60b9      	str	r1, [r7, #8]
 8007fa6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	6a1b      	ldr	r3, [r3, #32]
 8007fac:	f023 0210 	bic.w	r2, r3, #16
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	699b      	ldr	r3, [r3, #24]
 8007fb8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	6a1b      	ldr	r3, [r3, #32]
 8007fbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007fc0:	697b      	ldr	r3, [r7, #20]
 8007fc2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007fc6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	031b      	lsls	r3, r3, #12
 8007fcc:	697a      	ldr	r2, [r7, #20]
 8007fce:	4313      	orrs	r3, r2
 8007fd0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007fd2:	693b      	ldr	r3, [r7, #16]
 8007fd4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007fd8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	011b      	lsls	r3, r3, #4
 8007fde:	693a      	ldr	r2, [r7, #16]
 8007fe0:	4313      	orrs	r3, r2
 8007fe2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	697a      	ldr	r2, [r7, #20]
 8007fe8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	693a      	ldr	r2, [r7, #16]
 8007fee:	621a      	str	r2, [r3, #32]
}
 8007ff0:	bf00      	nop
 8007ff2:	371c      	adds	r7, #28
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffa:	4770      	bx	lr

08007ffc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b087      	sub	sp, #28
 8008000:	af00      	add	r7, sp, #0
 8008002:	60f8      	str	r0, [r7, #12]
 8008004:	60b9      	str	r1, [r7, #8]
 8008006:	607a      	str	r2, [r7, #4]
 8008008:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	6a1b      	ldr	r3, [r3, #32]
 800800e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	69db      	ldr	r3, [r3, #28]
 800801a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	6a1b      	ldr	r3, [r3, #32]
 8008020:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008022:	697b      	ldr	r3, [r7, #20]
 8008024:	f023 0303 	bic.w	r3, r3, #3
 8008028:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800802a:	697a      	ldr	r2, [r7, #20]
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	4313      	orrs	r3, r2
 8008030:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008032:	697b      	ldr	r3, [r7, #20]
 8008034:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008038:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	011b      	lsls	r3, r3, #4
 800803e:	b2db      	uxtb	r3, r3
 8008040:	697a      	ldr	r2, [r7, #20]
 8008042:	4313      	orrs	r3, r2
 8008044:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008046:	693b      	ldr	r3, [r7, #16]
 8008048:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800804c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	021b      	lsls	r3, r3, #8
 8008052:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8008056:	693a      	ldr	r2, [r7, #16]
 8008058:	4313      	orrs	r3, r2
 800805a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	697a      	ldr	r2, [r7, #20]
 8008060:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	693a      	ldr	r2, [r7, #16]
 8008066:	621a      	str	r2, [r3, #32]
}
 8008068:	bf00      	nop
 800806a:	371c      	adds	r7, #28
 800806c:	46bd      	mov	sp, r7
 800806e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008072:	4770      	bx	lr

08008074 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008074:	b480      	push	{r7}
 8008076:	b087      	sub	sp, #28
 8008078:	af00      	add	r7, sp, #0
 800807a:	60f8      	str	r0, [r7, #12]
 800807c:	60b9      	str	r1, [r7, #8]
 800807e:	607a      	str	r2, [r7, #4]
 8008080:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	6a1b      	ldr	r3, [r3, #32]
 8008086:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	69db      	ldr	r3, [r3, #28]
 8008092:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	6a1b      	ldr	r3, [r3, #32]
 8008098:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800809a:	697b      	ldr	r3, [r7, #20]
 800809c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80080a0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	021b      	lsls	r3, r3, #8
 80080a6:	697a      	ldr	r2, [r7, #20]
 80080a8:	4313      	orrs	r3, r2
 80080aa:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80080b2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	031b      	lsls	r3, r3, #12
 80080b8:	b29b      	uxth	r3, r3
 80080ba:	697a      	ldr	r2, [r7, #20]
 80080bc:	4313      	orrs	r3, r2
 80080be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80080c0:	693b      	ldr	r3, [r7, #16]
 80080c2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80080c6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	031b      	lsls	r3, r3, #12
 80080cc:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80080d0:	693a      	ldr	r2, [r7, #16]
 80080d2:	4313      	orrs	r3, r2
 80080d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	697a      	ldr	r2, [r7, #20]
 80080da:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	693a      	ldr	r2, [r7, #16]
 80080e0:	621a      	str	r2, [r3, #32]
}
 80080e2:	bf00      	nop
 80080e4:	371c      	adds	r7, #28
 80080e6:	46bd      	mov	sp, r7
 80080e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ec:	4770      	bx	lr

080080ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80080ee:	b480      	push	{r7}
 80080f0:	b085      	sub	sp, #20
 80080f2:	af00      	add	r7, sp, #0
 80080f4:	6078      	str	r0, [r7, #4]
 80080f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	689b      	ldr	r3, [r3, #8]
 80080fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008104:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008106:	683a      	ldr	r2, [r7, #0]
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	4313      	orrs	r3, r2
 800810c:	f043 0307 	orr.w	r3, r3, #7
 8008110:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	68fa      	ldr	r2, [r7, #12]
 8008116:	609a      	str	r2, [r3, #8]
}
 8008118:	bf00      	nop
 800811a:	3714      	adds	r7, #20
 800811c:	46bd      	mov	sp, r7
 800811e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008122:	4770      	bx	lr

08008124 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008124:	b480      	push	{r7}
 8008126:	b087      	sub	sp, #28
 8008128:	af00      	add	r7, sp, #0
 800812a:	60f8      	str	r0, [r7, #12]
 800812c:	60b9      	str	r1, [r7, #8]
 800812e:	607a      	str	r2, [r7, #4]
 8008130:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	689b      	ldr	r3, [r3, #8]
 8008136:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800813e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	021a      	lsls	r2, r3, #8
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	431a      	orrs	r2, r3
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	4313      	orrs	r3, r2
 800814c:	697a      	ldr	r2, [r7, #20]
 800814e:	4313      	orrs	r3, r2
 8008150:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	697a      	ldr	r2, [r7, #20]
 8008156:	609a      	str	r2, [r3, #8]
}
 8008158:	bf00      	nop
 800815a:	371c      	adds	r7, #28
 800815c:	46bd      	mov	sp, r7
 800815e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008162:	4770      	bx	lr

08008164 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008164:	b480      	push	{r7}
 8008166:	b087      	sub	sp, #28
 8008168:	af00      	add	r7, sp, #0
 800816a:	60f8      	str	r0, [r7, #12]
 800816c:	60b9      	str	r1, [r7, #8]
 800816e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	f003 031f 	and.w	r3, r3, #31
 8008176:	2201      	movs	r2, #1
 8008178:	fa02 f303 	lsl.w	r3, r2, r3
 800817c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	6a1a      	ldr	r2, [r3, #32]
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	43db      	mvns	r3, r3
 8008186:	401a      	ands	r2, r3
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	6a1a      	ldr	r2, [r3, #32]
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	f003 031f 	and.w	r3, r3, #31
 8008196:	6879      	ldr	r1, [r7, #4]
 8008198:	fa01 f303 	lsl.w	r3, r1, r3
 800819c:	431a      	orrs	r2, r3
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	621a      	str	r2, [r3, #32]
}
 80081a2:	bf00      	nop
 80081a4:	371c      	adds	r7, #28
 80081a6:	46bd      	mov	sp, r7
 80081a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ac:	4770      	bx	lr
	...

080081b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80081b0:	b480      	push	{r7}
 80081b2:	b085      	sub	sp, #20
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
 80081b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081c0:	2b01      	cmp	r3, #1
 80081c2:	d101      	bne.n	80081c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80081c4:	2302      	movs	r3, #2
 80081c6:	e05a      	b.n	800827e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2201      	movs	r2, #1
 80081cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2202      	movs	r2, #2
 80081d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	685b      	ldr	r3, [r3, #4]
 80081de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	689b      	ldr	r3, [r3, #8]
 80081e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	68fa      	ldr	r2, [r7, #12]
 80081f6:	4313      	orrs	r3, r2
 80081f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	68fa      	ldr	r2, [r7, #12]
 8008200:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	4a21      	ldr	r2, [pc, #132]	; (800828c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d022      	beq.n	8008252 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008214:	d01d      	beq.n	8008252 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4a1d      	ldr	r2, [pc, #116]	; (8008290 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d018      	beq.n	8008252 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4a1b      	ldr	r2, [pc, #108]	; (8008294 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d013      	beq.n	8008252 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	4a1a      	ldr	r2, [pc, #104]	; (8008298 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008230:	4293      	cmp	r3, r2
 8008232:	d00e      	beq.n	8008252 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	4a18      	ldr	r2, [pc, #96]	; (800829c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d009      	beq.n	8008252 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	4a17      	ldr	r2, [pc, #92]	; (80082a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d004      	beq.n	8008252 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4a15      	ldr	r2, [pc, #84]	; (80082a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d10c      	bne.n	800826c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008258:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	685b      	ldr	r3, [r3, #4]
 800825e:	68ba      	ldr	r2, [r7, #8]
 8008260:	4313      	orrs	r3, r2
 8008262:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	68ba      	ldr	r2, [r7, #8]
 800826a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2201      	movs	r2, #1
 8008270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2200      	movs	r2, #0
 8008278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800827c:	2300      	movs	r3, #0
}
 800827e:	4618      	mov	r0, r3
 8008280:	3714      	adds	r7, #20
 8008282:	46bd      	mov	sp, r7
 8008284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008288:	4770      	bx	lr
 800828a:	bf00      	nop
 800828c:	40010000 	.word	0x40010000
 8008290:	40000400 	.word	0x40000400
 8008294:	40000800 	.word	0x40000800
 8008298:	40000c00 	.word	0x40000c00
 800829c:	40010400 	.word	0x40010400
 80082a0:	40014000 	.word	0x40014000
 80082a4:	40001800 	.word	0x40001800

080082a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80082a8:	b480      	push	{r7}
 80082aa:	b083      	sub	sp, #12
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80082b0:	bf00      	nop
 80082b2:	370c      	adds	r7, #12
 80082b4:	46bd      	mov	sp, r7
 80082b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ba:	4770      	bx	lr

080082bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80082bc:	b480      	push	{r7}
 80082be:	b083      	sub	sp, #12
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80082c4:	bf00      	nop
 80082c6:	370c      	adds	r7, #12
 80082c8:	46bd      	mov	sp, r7
 80082ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ce:	4770      	bx	lr

080082d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b082      	sub	sp, #8
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d101      	bne.n	80082e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80082de:	2301      	movs	r3, #1
 80082e0:	e03f      	b.n	8008362 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082e8:	b2db      	uxtb	r3, r3
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d106      	bne.n	80082fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2200      	movs	r2, #0
 80082f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f7fc fa8c 	bl	8004814 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2224      	movs	r2, #36	; 0x24
 8008300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	68da      	ldr	r2, [r3, #12]
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008312:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f000 fd5d 	bl	8008dd4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	691a      	ldr	r2, [r3, #16]
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008328:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	695a      	ldr	r2, [r3, #20]
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008338:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	68da      	ldr	r2, [r3, #12]
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008348:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2200      	movs	r2, #0
 800834e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2220      	movs	r2, #32
 8008354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2220      	movs	r2, #32
 800835c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008360:	2300      	movs	r3, #0
}
 8008362:	4618      	mov	r0, r3
 8008364:	3708      	adds	r7, #8
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}

0800836a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800836a:	b580      	push	{r7, lr}
 800836c:	b084      	sub	sp, #16
 800836e:	af00      	add	r7, sp, #0
 8008370:	60f8      	str	r0, [r7, #12]
 8008372:	60b9      	str	r1, [r7, #8]
 8008374:	4613      	mov	r3, r2
 8008376:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800837e:	b2db      	uxtb	r3, r3
 8008380:	2b20      	cmp	r3, #32
 8008382:	d11d      	bne.n	80083c0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d002      	beq.n	8008390 <HAL_UART_Receive_IT+0x26>
 800838a:	88fb      	ldrh	r3, [r7, #6]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d101      	bne.n	8008394 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008390:	2301      	movs	r3, #1
 8008392:	e016      	b.n	80083c2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800839a:	2b01      	cmp	r3, #1
 800839c:	d101      	bne.n	80083a2 <HAL_UART_Receive_IT+0x38>
 800839e:	2302      	movs	r3, #2
 80083a0:	e00f      	b.n	80083c2 <HAL_UART_Receive_IT+0x58>
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	2201      	movs	r2, #1
 80083a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	2200      	movs	r2, #0
 80083ae:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80083b0:	88fb      	ldrh	r3, [r7, #6]
 80083b2:	461a      	mov	r2, r3
 80083b4:	68b9      	ldr	r1, [r7, #8]
 80083b6:	68f8      	ldr	r0, [r7, #12]
 80083b8:	f000 fb18 	bl	80089ec <UART_Start_Receive_IT>
 80083bc:	4603      	mov	r3, r0
 80083be:	e000      	b.n	80083c2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80083c0:	2302      	movs	r3, #2
  }
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	3710      	adds	r7, #16
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}

080083ca <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80083ca:	b580      	push	{r7, lr}
 80083cc:	b084      	sub	sp, #16
 80083ce:	af00      	add	r7, sp, #0
 80083d0:	60f8      	str	r0, [r7, #12]
 80083d2:	60b9      	str	r1, [r7, #8]
 80083d4:	4613      	mov	r3, r2
 80083d6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80083de:	b2db      	uxtb	r3, r3
 80083e0:	2b20      	cmp	r3, #32
 80083e2:	d11d      	bne.n	8008420 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d002      	beq.n	80083f0 <HAL_UART_Receive_DMA+0x26>
 80083ea:	88fb      	ldrh	r3, [r7, #6]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d101      	bne.n	80083f4 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80083f0:	2301      	movs	r3, #1
 80083f2:	e016      	b.n	8008422 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80083fa:	2b01      	cmp	r3, #1
 80083fc:	d101      	bne.n	8008402 <HAL_UART_Receive_DMA+0x38>
 80083fe:	2302      	movs	r3, #2
 8008400:	e00f      	b.n	8008422 <HAL_UART_Receive_DMA+0x58>
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	2201      	movs	r2, #1
 8008406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	2200      	movs	r2, #0
 800840e:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8008410:	88fb      	ldrh	r3, [r7, #6]
 8008412:	461a      	mov	r2, r3
 8008414:	68b9      	ldr	r1, [r7, #8]
 8008416:	68f8      	ldr	r0, [r7, #12]
 8008418:	f000 fb22 	bl	8008a60 <UART_Start_Receive_DMA>
 800841c:	4603      	mov	r3, r0
 800841e:	e000      	b.n	8008422 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008420:	2302      	movs	r3, #2
  }
}
 8008422:	4618      	mov	r0, r3
 8008424:	3710      	adds	r7, #16
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}

0800842a <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800842a:	b580      	push	{r7, lr}
 800842c:	b084      	sub	sp, #16
 800842e:	af00      	add	r7, sp, #0
 8008430:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008432:	2300      	movs	r3, #0
 8008434:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	695b      	ldr	r3, [r3, #20]
 800843c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008440:	2b80      	cmp	r3, #128	; 0x80
 8008442:	bf0c      	ite	eq
 8008444:	2301      	moveq	r3, #1
 8008446:	2300      	movne	r3, #0
 8008448:	b2db      	uxtb	r3, r3
 800844a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008452:	b2db      	uxtb	r3, r3
 8008454:	2b21      	cmp	r3, #33	; 0x21
 8008456:	d116      	bne.n	8008486 <HAL_UART_DMAStop+0x5c>
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d013      	beq.n	8008486 <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	695a      	ldr	r2, [r3, #20]
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800846c:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008472:	2b00      	cmp	r3, #0
 8008474:	d004      	beq.n	8008480 <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800847a:	4618      	mov	r0, r3
 800847c:	f7fc feaa 	bl	80051d4 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f000 fb51 	bl	8008b28 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	695b      	ldr	r3, [r3, #20]
 800848c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008490:	2b40      	cmp	r3, #64	; 0x40
 8008492:	bf0c      	ite	eq
 8008494:	2301      	moveq	r3, #1
 8008496:	2300      	movne	r3, #0
 8008498:	b2db      	uxtb	r3, r3
 800849a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80084a2:	b2db      	uxtb	r3, r3
 80084a4:	2b22      	cmp	r3, #34	; 0x22
 80084a6:	d116      	bne.n	80084d6 <HAL_UART_DMAStop+0xac>
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d013      	beq.n	80084d6 <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	695a      	ldr	r2, [r3, #20]
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80084bc:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d004      	beq.n	80084d0 <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084ca:	4618      	mov	r0, r3
 80084cc:	f7fc fe82 	bl	80051d4 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f000 fb3f 	bl	8008b54 <UART_EndRxTransfer>
  }

  return HAL_OK;
 80084d6:	2300      	movs	r3, #0
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3710      	adds	r7, #16
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}

080084e0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b08a      	sub	sp, #40	; 0x28
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	68db      	ldr	r3, [r3, #12]
 80084f6:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	695b      	ldr	r3, [r3, #20]
 80084fe:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8008500:	2300      	movs	r3, #0
 8008502:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8008504:	2300      	movs	r3, #0
 8008506:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800850a:	f003 030f 	and.w	r3, r3, #15
 800850e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8008510:	69bb      	ldr	r3, [r7, #24]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d10d      	bne.n	8008532 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008518:	f003 0320 	and.w	r3, r3, #32
 800851c:	2b00      	cmp	r3, #0
 800851e:	d008      	beq.n	8008532 <HAL_UART_IRQHandler+0x52>
 8008520:	6a3b      	ldr	r3, [r7, #32]
 8008522:	f003 0320 	and.w	r3, r3, #32
 8008526:	2b00      	cmp	r3, #0
 8008528:	d003      	beq.n	8008532 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f000 fbbb 	bl	8008ca6 <UART_Receive_IT>
      return;
 8008530:	e17c      	b.n	800882c <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008532:	69bb      	ldr	r3, [r7, #24]
 8008534:	2b00      	cmp	r3, #0
 8008536:	f000 80b1 	beq.w	800869c <HAL_UART_IRQHandler+0x1bc>
 800853a:	69fb      	ldr	r3, [r7, #28]
 800853c:	f003 0301 	and.w	r3, r3, #1
 8008540:	2b00      	cmp	r3, #0
 8008542:	d105      	bne.n	8008550 <HAL_UART_IRQHandler+0x70>
 8008544:	6a3b      	ldr	r3, [r7, #32]
 8008546:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800854a:	2b00      	cmp	r3, #0
 800854c:	f000 80a6 	beq.w	800869c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008552:	f003 0301 	and.w	r3, r3, #1
 8008556:	2b00      	cmp	r3, #0
 8008558:	d00a      	beq.n	8008570 <HAL_UART_IRQHandler+0x90>
 800855a:	6a3b      	ldr	r3, [r7, #32]
 800855c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008560:	2b00      	cmp	r3, #0
 8008562:	d005      	beq.n	8008570 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008568:	f043 0201 	orr.w	r2, r3, #1
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008572:	f003 0304 	and.w	r3, r3, #4
 8008576:	2b00      	cmp	r3, #0
 8008578:	d00a      	beq.n	8008590 <HAL_UART_IRQHandler+0xb0>
 800857a:	69fb      	ldr	r3, [r7, #28]
 800857c:	f003 0301 	and.w	r3, r3, #1
 8008580:	2b00      	cmp	r3, #0
 8008582:	d005      	beq.n	8008590 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008588:	f043 0202 	orr.w	r2, r3, #2
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008592:	f003 0302 	and.w	r3, r3, #2
 8008596:	2b00      	cmp	r3, #0
 8008598:	d00a      	beq.n	80085b0 <HAL_UART_IRQHandler+0xd0>
 800859a:	69fb      	ldr	r3, [r7, #28]
 800859c:	f003 0301 	and.w	r3, r3, #1
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d005      	beq.n	80085b0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085a8:	f043 0204 	orr.w	r2, r3, #4
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80085b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085b2:	f003 0308 	and.w	r3, r3, #8
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d00f      	beq.n	80085da <HAL_UART_IRQHandler+0xfa>
 80085ba:	6a3b      	ldr	r3, [r7, #32]
 80085bc:	f003 0320 	and.w	r3, r3, #32
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d104      	bne.n	80085ce <HAL_UART_IRQHandler+0xee>
 80085c4:	69fb      	ldr	r3, [r7, #28]
 80085c6:	f003 0301 	and.w	r3, r3, #1
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d005      	beq.n	80085da <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085d2:	f043 0208 	orr.w	r2, r3, #8
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085de:	2b00      	cmp	r3, #0
 80085e0:	f000 811f 	beq.w	8008822 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80085e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e6:	f003 0320 	and.w	r3, r3, #32
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d007      	beq.n	80085fe <HAL_UART_IRQHandler+0x11e>
 80085ee:	6a3b      	ldr	r3, [r7, #32]
 80085f0:	f003 0320 	and.w	r3, r3, #32
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d002      	beq.n	80085fe <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f000 fb54 	bl	8008ca6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	695b      	ldr	r3, [r3, #20]
 8008604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008608:	2b40      	cmp	r3, #64	; 0x40
 800860a:	bf0c      	ite	eq
 800860c:	2301      	moveq	r3, #1
 800860e:	2300      	movne	r3, #0
 8008610:	b2db      	uxtb	r3, r3
 8008612:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008618:	f003 0308 	and.w	r3, r3, #8
 800861c:	2b00      	cmp	r3, #0
 800861e:	d102      	bne.n	8008626 <HAL_UART_IRQHandler+0x146>
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d031      	beq.n	800868a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f000 fa94 	bl	8008b54 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	695b      	ldr	r3, [r3, #20]
 8008632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008636:	2b40      	cmp	r3, #64	; 0x40
 8008638:	d123      	bne.n	8008682 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	695a      	ldr	r2, [r3, #20]
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008648:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800864e:	2b00      	cmp	r3, #0
 8008650:	d013      	beq.n	800867a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008656:	4a77      	ldr	r2, [pc, #476]	; (8008834 <HAL_UART_IRQHandler+0x354>)
 8008658:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800865e:	4618      	mov	r0, r3
 8008660:	f7fc fe28 	bl	80052b4 <HAL_DMA_Abort_IT>
 8008664:	4603      	mov	r3, r0
 8008666:	2b00      	cmp	r3, #0
 8008668:	d016      	beq.n	8008698 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800866e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008670:	687a      	ldr	r2, [r7, #4]
 8008672:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008674:	4610      	mov	r0, r2
 8008676:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008678:	e00e      	b.n	8008698 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f000 f8f0 	bl	8008860 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008680:	e00a      	b.n	8008698 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f000 f8ec 	bl	8008860 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008688:	e006      	b.n	8008698 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f000 f8e8 	bl	8008860 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2200      	movs	r2, #0
 8008694:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008696:	e0c4      	b.n	8008822 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008698:	bf00      	nop
    return;
 800869a:	e0c2      	b.n	8008822 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086a0:	2b01      	cmp	r3, #1
 80086a2:	f040 80a2 	bne.w	80087ea <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80086a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a8:	f003 0310 	and.w	r3, r3, #16
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	f000 809c 	beq.w	80087ea <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80086b2:	6a3b      	ldr	r3, [r7, #32]
 80086b4:	f003 0310 	and.w	r3, r3, #16
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	f000 8096 	beq.w	80087ea <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80086be:	2300      	movs	r3, #0
 80086c0:	60fb      	str	r3, [r7, #12]
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	60fb      	str	r3, [r7, #12]
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	685b      	ldr	r3, [r3, #4]
 80086d0:	60fb      	str	r3, [r7, #12]
 80086d2:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	695b      	ldr	r3, [r3, #20]
 80086da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086de:	2b40      	cmp	r3, #64	; 0x40
 80086e0:	d14f      	bne.n	8008782 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	685b      	ldr	r3, [r3, #4]
 80086ea:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80086ec:	8a3b      	ldrh	r3, [r7, #16]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	f000 8099 	beq.w	8008826 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80086f8:	8a3a      	ldrh	r2, [r7, #16]
 80086fa:	429a      	cmp	r2, r3
 80086fc:	f080 8093 	bcs.w	8008826 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	8a3a      	ldrh	r2, [r7, #16]
 8008704:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800870a:	69db      	ldr	r3, [r3, #28]
 800870c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008710:	d02b      	beq.n	800876a <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	68da      	ldr	r2, [r3, #12]
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008720:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	695a      	ldr	r2, [r3, #20]
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f022 0201 	bic.w	r2, r2, #1
 8008730:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	695a      	ldr	r2, [r3, #20]
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008740:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2220      	movs	r2, #32
 8008746:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2200      	movs	r2, #0
 800874e:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	68da      	ldr	r2, [r3, #12]
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f022 0210 	bic.w	r2, r2, #16
 800875e:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008764:	4618      	mov	r0, r3
 8008766:	f7fc fd35 	bl	80051d4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008772:	b29b      	uxth	r3, r3
 8008774:	1ad3      	subs	r3, r2, r3
 8008776:	b29b      	uxth	r3, r3
 8008778:	4619      	mov	r1, r3
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f000 f87a 	bl	8008874 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008780:	e051      	b.n	8008826 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800878a:	b29b      	uxth	r3, r3
 800878c:	1ad3      	subs	r3, r2, r3
 800878e:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008794:	b29b      	uxth	r3, r3
 8008796:	2b00      	cmp	r3, #0
 8008798:	d047      	beq.n	800882a <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 800879a:	8a7b      	ldrh	r3, [r7, #18]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d044      	beq.n	800882a <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	68da      	ldr	r2, [r3, #12]
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80087ae:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	695a      	ldr	r2, [r3, #20]
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f022 0201 	bic.w	r2, r2, #1
 80087be:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2220      	movs	r2, #32
 80087c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2200      	movs	r2, #0
 80087cc:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	68da      	ldr	r2, [r3, #12]
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f022 0210 	bic.w	r2, r2, #16
 80087dc:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80087de:	8a7b      	ldrh	r3, [r7, #18]
 80087e0:	4619      	mov	r1, r3
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f000 f846 	bl	8008874 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80087e8:	e01f      	b.n	800882a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80087ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d008      	beq.n	8008806 <HAL_UART_IRQHandler+0x326>
 80087f4:	6a3b      	ldr	r3, [r7, #32]
 80087f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d003      	beq.n	8008806 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f000 f9e9 	bl	8008bd6 <UART_Transmit_IT>
    return;
 8008804:	e012      	b.n	800882c <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008808:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800880c:	2b00      	cmp	r3, #0
 800880e:	d00d      	beq.n	800882c <HAL_UART_IRQHandler+0x34c>
 8008810:	6a3b      	ldr	r3, [r7, #32]
 8008812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008816:	2b00      	cmp	r3, #0
 8008818:	d008      	beq.n	800882c <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f000 fa2b 	bl	8008c76 <UART_EndTransmit_IT>
    return;
 8008820:	e004      	b.n	800882c <HAL_UART_IRQHandler+0x34c>
    return;
 8008822:	bf00      	nop
 8008824:	e002      	b.n	800882c <HAL_UART_IRQHandler+0x34c>
      return;
 8008826:	bf00      	nop
 8008828:	e000      	b.n	800882c <HAL_UART_IRQHandler+0x34c>
      return;
 800882a:	bf00      	nop
  }
}
 800882c:	3728      	adds	r7, #40	; 0x28
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}
 8008832:	bf00      	nop
 8008834:	08008baf 	.word	0x08008baf

08008838 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008838:	b480      	push	{r7}
 800883a:	b083      	sub	sp, #12
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008840:	bf00      	nop
 8008842:	370c      	adds	r7, #12
 8008844:	46bd      	mov	sp, r7
 8008846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884a:	4770      	bx	lr

0800884c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800884c:	b480      	push	{r7}
 800884e:	b083      	sub	sp, #12
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008854:	bf00      	nop
 8008856:	370c      	adds	r7, #12
 8008858:	46bd      	mov	sp, r7
 800885a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885e:	4770      	bx	lr

08008860 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008860:	b480      	push	{r7}
 8008862:	b083      	sub	sp, #12
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008868:	bf00      	nop
 800886a:	370c      	adds	r7, #12
 800886c:	46bd      	mov	sp, r7
 800886e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008872:	4770      	bx	lr

08008874 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008874:	b480      	push	{r7}
 8008876:	b083      	sub	sp, #12
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
 800887c:	460b      	mov	r3, r1
 800887e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008880:	bf00      	nop
 8008882:	370c      	adds	r7, #12
 8008884:	46bd      	mov	sp, r7
 8008886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888a:	4770      	bx	lr

0800888c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b084      	sub	sp, #16
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008898:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d12a      	bne.n	80088fe <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	2200      	movs	r2, #0
 80088ac:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	68da      	ldr	r2, [r3, #12]
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80088bc:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	695a      	ldr	r2, [r3, #20]
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f022 0201 	bic.w	r2, r2, #1
 80088cc:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	695a      	ldr	r2, [r3, #20]
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80088dc:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	2220      	movs	r2, #32
 80088e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088ea:	2b01      	cmp	r3, #1
 80088ec:	d107      	bne.n	80088fe <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	68da      	ldr	r2, [r3, #12]
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f022 0210 	bic.w	r2, r2, #16
 80088fc:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008902:	2b01      	cmp	r3, #1
 8008904:	d106      	bne.n	8008914 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800890a:	4619      	mov	r1, r3
 800890c:	68f8      	ldr	r0, [r7, #12]
 800890e:	f7ff ffb1 	bl	8008874 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008912:	e002      	b.n	800891a <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8008914:	68f8      	ldr	r0, [r7, #12]
 8008916:	f7fc f945 	bl	8004ba4 <HAL_UART_RxCpltCallback>
}
 800891a:	bf00      	nop
 800891c:	3710      	adds	r7, #16
 800891e:	46bd      	mov	sp, r7
 8008920:	bd80      	pop	{r7, pc}

08008922 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008922:	b580      	push	{r7, lr}
 8008924:	b084      	sub	sp, #16
 8008926:	af00      	add	r7, sp, #0
 8008928:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800892e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008934:	2b01      	cmp	r3, #1
 8008936:	d108      	bne.n	800894a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800893c:	085b      	lsrs	r3, r3, #1
 800893e:	b29b      	uxth	r3, r3
 8008940:	4619      	mov	r1, r3
 8008942:	68f8      	ldr	r0, [r7, #12]
 8008944:	f7ff ff96 	bl	8008874 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008948:	e002      	b.n	8008950 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800894a:	68f8      	ldr	r0, [r7, #12]
 800894c:	f7ff ff7e 	bl	800884c <HAL_UART_RxHalfCpltCallback>
}
 8008950:	bf00      	nop
 8008952:	3710      	adds	r7, #16
 8008954:	46bd      	mov	sp, r7
 8008956:	bd80      	pop	{r7, pc}

08008958 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b084      	sub	sp, #16
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008960:	2300      	movs	r3, #0
 8008962:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008968:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	695b      	ldr	r3, [r3, #20]
 8008970:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008974:	2b80      	cmp	r3, #128	; 0x80
 8008976:	bf0c      	ite	eq
 8008978:	2301      	moveq	r3, #1
 800897a:	2300      	movne	r3, #0
 800897c:	b2db      	uxtb	r3, r3
 800897e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008986:	b2db      	uxtb	r3, r3
 8008988:	2b21      	cmp	r3, #33	; 0x21
 800898a:	d108      	bne.n	800899e <UART_DMAError+0x46>
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d005      	beq.n	800899e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	2200      	movs	r2, #0
 8008996:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008998:	68b8      	ldr	r0, [r7, #8]
 800899a:	f000 f8c5 	bl	8008b28 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	695b      	ldr	r3, [r3, #20]
 80089a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089a8:	2b40      	cmp	r3, #64	; 0x40
 80089aa:	bf0c      	ite	eq
 80089ac:	2301      	moveq	r3, #1
 80089ae:	2300      	movne	r3, #0
 80089b0:	b2db      	uxtb	r3, r3
 80089b2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80089ba:	b2db      	uxtb	r3, r3
 80089bc:	2b22      	cmp	r3, #34	; 0x22
 80089be:	d108      	bne.n	80089d2 <UART_DMAError+0x7a>
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d005      	beq.n	80089d2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	2200      	movs	r2, #0
 80089ca:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80089cc:	68b8      	ldr	r0, [r7, #8]
 80089ce:	f000 f8c1 	bl	8008b54 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089d6:	f043 0210 	orr.w	r2, r3, #16
 80089da:	68bb      	ldr	r3, [r7, #8]
 80089dc:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80089de:	68b8      	ldr	r0, [r7, #8]
 80089e0:	f7ff ff3e 	bl	8008860 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80089e4:	bf00      	nop
 80089e6:	3710      	adds	r7, #16
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}

080089ec <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80089ec:	b480      	push	{r7}
 80089ee:	b085      	sub	sp, #20
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	60f8      	str	r0, [r7, #12]
 80089f4:	60b9      	str	r1, [r7, #8]
 80089f6:	4613      	mov	r3, r2
 80089f8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	68ba      	ldr	r2, [r7, #8]
 80089fe:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	88fa      	ldrh	r2, [r7, #6]
 8008a04:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	88fa      	ldrh	r2, [r7, #6]
 8008a0a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	2222      	movs	r2, #34	; 0x22
 8008a16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	68da      	ldr	r2, [r3, #12]
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008a30:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	695a      	ldr	r2, [r3, #20]
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	f042 0201 	orr.w	r2, r2, #1
 8008a40:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	68da      	ldr	r2, [r3, #12]
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f042 0220 	orr.w	r2, r2, #32
 8008a50:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008a52:	2300      	movs	r3, #0
}
 8008a54:	4618      	mov	r0, r3
 8008a56:	3714      	adds	r7, #20
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5e:	4770      	bx	lr

08008a60 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b086      	sub	sp, #24
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	60f8      	str	r0, [r7, #12]
 8008a68:	60b9      	str	r1, [r7, #8]
 8008a6a:	4613      	mov	r3, r2
 8008a6c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8008a6e:	68ba      	ldr	r2, [r7, #8]
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	88fa      	ldrh	r2, [r7, #6]
 8008a78:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	2222      	movs	r2, #34	; 0x22
 8008a84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a8c:	4a23      	ldr	r2, [pc, #140]	; (8008b1c <UART_Start_Receive_DMA+0xbc>)
 8008a8e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a94:	4a22      	ldr	r2, [pc, #136]	; (8008b20 <UART_Start_Receive_DMA+0xc0>)
 8008a96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a9c:	4a21      	ldr	r2, [pc, #132]	; (8008b24 <UART_Start_Receive_DMA+0xc4>)
 8008a9e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8008aa8:	f107 0308 	add.w	r3, r7, #8
 8008aac:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	3304      	adds	r3, #4
 8008ab8:	4619      	mov	r1, r3
 8008aba:	697b      	ldr	r3, [r7, #20]
 8008abc:	681a      	ldr	r2, [r3, #0]
 8008abe:	88fb      	ldrh	r3, [r7, #6]
 8008ac0:	f7fc fb30 	bl	8005124 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	613b      	str	r3, [r7, #16]
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	613b      	str	r3, [r7, #16]
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	685b      	ldr	r3, [r3, #4]
 8008ad6:	613b      	str	r3, [r7, #16]
 8008ad8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	2200      	movs	r2, #0
 8008ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	68da      	ldr	r2, [r3, #12]
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008af0:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	695a      	ldr	r2, [r3, #20]
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f042 0201 	orr.w	r2, r2, #1
 8008b00:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	695a      	ldr	r2, [r3, #20]
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008b10:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8008b12:	2300      	movs	r3, #0
}
 8008b14:	4618      	mov	r0, r3
 8008b16:	3718      	adds	r7, #24
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	bd80      	pop	{r7, pc}
 8008b1c:	0800888d 	.word	0x0800888d
 8008b20:	08008923 	.word	0x08008923
 8008b24:	08008959 	.word	0x08008959

08008b28 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008b28:	b480      	push	{r7}
 8008b2a:	b083      	sub	sp, #12
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	68da      	ldr	r2, [r3, #12]
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8008b3e:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2220      	movs	r2, #32
 8008b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8008b48:	bf00      	nop
 8008b4a:	370c      	adds	r7, #12
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b52:	4770      	bx	lr

08008b54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008b54:	b480      	push	{r7}
 8008b56:	b083      	sub	sp, #12
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	68da      	ldr	r2, [r3, #12]
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008b6a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	695a      	ldr	r2, [r3, #20]
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f022 0201 	bic.w	r2, r2, #1
 8008b7a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b80:	2b01      	cmp	r3, #1
 8008b82:	d107      	bne.n	8008b94 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	68da      	ldr	r2, [r3, #12]
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f022 0210 	bic.w	r2, r2, #16
 8008b92:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2220      	movs	r2, #32
 8008b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008ba2:	bf00      	nop
 8008ba4:	370c      	adds	r7, #12
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bac:	4770      	bx	lr

08008bae <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008bae:	b580      	push	{r7, lr}
 8008bb0:	b084      	sub	sp, #16
 8008bb2:	af00      	add	r7, sp, #0
 8008bb4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008bc8:	68f8      	ldr	r0, [r7, #12]
 8008bca:	f7ff fe49 	bl	8008860 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008bce:	bf00      	nop
 8008bd0:	3710      	adds	r7, #16
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bd80      	pop	{r7, pc}

08008bd6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008bd6:	b480      	push	{r7}
 8008bd8:	b085      	sub	sp, #20
 8008bda:	af00      	add	r7, sp, #0
 8008bdc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008be4:	b2db      	uxtb	r3, r3
 8008be6:	2b21      	cmp	r3, #33	; 0x21
 8008be8:	d13e      	bne.n	8008c68 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	689b      	ldr	r3, [r3, #8]
 8008bee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bf2:	d114      	bne.n	8008c1e <UART_Transmit_IT+0x48>
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	691b      	ldr	r3, [r3, #16]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d110      	bne.n	8008c1e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	6a1b      	ldr	r3, [r3, #32]
 8008c00:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	881b      	ldrh	r3, [r3, #0]
 8008c06:	461a      	mov	r2, r3
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008c10:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	6a1b      	ldr	r3, [r3, #32]
 8008c16:	1c9a      	adds	r2, r3, #2
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	621a      	str	r2, [r3, #32]
 8008c1c:	e008      	b.n	8008c30 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6a1b      	ldr	r3, [r3, #32]
 8008c22:	1c59      	adds	r1, r3, #1
 8008c24:	687a      	ldr	r2, [r7, #4]
 8008c26:	6211      	str	r1, [r2, #32]
 8008c28:	781a      	ldrb	r2, [r3, #0]
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008c34:	b29b      	uxth	r3, r3
 8008c36:	3b01      	subs	r3, #1
 8008c38:	b29b      	uxth	r3, r3
 8008c3a:	687a      	ldr	r2, [r7, #4]
 8008c3c:	4619      	mov	r1, r3
 8008c3e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d10f      	bne.n	8008c64 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	68da      	ldr	r2, [r3, #12]
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008c52:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	68da      	ldr	r2, [r3, #12]
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008c62:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008c64:	2300      	movs	r3, #0
 8008c66:	e000      	b.n	8008c6a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008c68:	2302      	movs	r3, #2
  }
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	3714      	adds	r7, #20
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c74:	4770      	bx	lr

08008c76 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008c76:	b580      	push	{r7, lr}
 8008c78:	b082      	sub	sp, #8
 8008c7a:	af00      	add	r7, sp, #0
 8008c7c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	68da      	ldr	r2, [r3, #12]
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008c8c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2220      	movs	r2, #32
 8008c92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f7ff fdce 	bl	8008838 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008c9c:	2300      	movs	r3, #0
}
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	3708      	adds	r7, #8
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bd80      	pop	{r7, pc}

08008ca6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008ca6:	b580      	push	{r7, lr}
 8008ca8:	b084      	sub	sp, #16
 8008caa:	af00      	add	r7, sp, #0
 8008cac:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008cb4:	b2db      	uxtb	r3, r3
 8008cb6:	2b22      	cmp	r3, #34	; 0x22
 8008cb8:	f040 8087 	bne.w	8008dca <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	689b      	ldr	r3, [r3, #8]
 8008cc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008cc4:	d117      	bne.n	8008cf6 <UART_Receive_IT+0x50>
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	691b      	ldr	r3, [r3, #16]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d113      	bne.n	8008cf6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008cce:	2300      	movs	r3, #0
 8008cd0:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cd6:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	685b      	ldr	r3, [r3, #4]
 8008cde:	b29b      	uxth	r3, r3
 8008ce0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ce4:	b29a      	uxth	r2, r3
 8008ce6:	68bb      	ldr	r3, [r7, #8]
 8008ce8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cee:	1c9a      	adds	r2, r3, #2
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	629a      	str	r2, [r3, #40]	; 0x28
 8008cf4:	e026      	b.n	8008d44 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cfa:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	689b      	ldr	r3, [r3, #8]
 8008d04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d08:	d007      	beq.n	8008d1a <UART_Receive_IT+0x74>
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	689b      	ldr	r3, [r3, #8]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d10a      	bne.n	8008d28 <UART_Receive_IT+0x82>
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	691b      	ldr	r3, [r3, #16]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d106      	bne.n	8008d28 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	685b      	ldr	r3, [r3, #4]
 8008d20:	b2da      	uxtb	r2, r3
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	701a      	strb	r2, [r3, #0]
 8008d26:	e008      	b.n	8008d3a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	685b      	ldr	r3, [r3, #4]
 8008d2e:	b2db      	uxtb	r3, r3
 8008d30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d34:	b2da      	uxtb	r2, r3
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d3e:	1c5a      	adds	r2, r3, #1
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008d48:	b29b      	uxth	r3, r3
 8008d4a:	3b01      	subs	r3, #1
 8008d4c:	b29b      	uxth	r3, r3
 8008d4e:	687a      	ldr	r2, [r7, #4]
 8008d50:	4619      	mov	r1, r3
 8008d52:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d136      	bne.n	8008dc6 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	68da      	ldr	r2, [r3, #12]
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f022 0220 	bic.w	r2, r2, #32
 8008d66:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	68da      	ldr	r2, [r3, #12]
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008d76:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	695a      	ldr	r2, [r3, #20]
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	f022 0201 	bic.w	r2, r2, #1
 8008d86:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2220      	movs	r2, #32
 8008d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d94:	2b01      	cmp	r3, #1
 8008d96:	d10e      	bne.n	8008db6 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	68da      	ldr	r2, [r3, #12]
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	f022 0210 	bic.w	r2, r2, #16
 8008da6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008dac:	4619      	mov	r1, r3
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f7ff fd60 	bl	8008874 <HAL_UARTEx_RxEventCallback>
 8008db4:	e002      	b.n	8008dbc <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f7fb fef4 	bl	8004ba4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	e002      	b.n	8008dcc <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	e000      	b.n	8008dcc <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8008dca:	2302      	movs	r3, #2
  }
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	3710      	adds	r7, #16
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}

08008dd4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dd8:	b09f      	sub	sp, #124	; 0x7c
 8008dda:	af00      	add	r7, sp, #0
 8008ddc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008dde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	691b      	ldr	r3, [r3, #16]
 8008de4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008de8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008dea:	68d9      	ldr	r1, [r3, #12]
 8008dec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008dee:	681a      	ldr	r2, [r3, #0]
 8008df0:	ea40 0301 	orr.w	r3, r0, r1
 8008df4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008df6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008df8:	689a      	ldr	r2, [r3, #8]
 8008dfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008dfc:	691b      	ldr	r3, [r3, #16]
 8008dfe:	431a      	orrs	r2, r3
 8008e00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e02:	695b      	ldr	r3, [r3, #20]
 8008e04:	431a      	orrs	r2, r3
 8008e06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e08:	69db      	ldr	r3, [r3, #28]
 8008e0a:	4313      	orrs	r3, r2
 8008e0c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8008e0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	68db      	ldr	r3, [r3, #12]
 8008e14:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008e18:	f021 010c 	bic.w	r1, r1, #12
 8008e1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e1e:	681a      	ldr	r2, [r3, #0]
 8008e20:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008e22:	430b      	orrs	r3, r1
 8008e24:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008e26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	695b      	ldr	r3, [r3, #20]
 8008e2c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008e30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e32:	6999      	ldr	r1, [r3, #24]
 8008e34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e36:	681a      	ldr	r2, [r3, #0]
 8008e38:	ea40 0301 	orr.w	r3, r0, r1
 8008e3c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008e3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e40:	681a      	ldr	r2, [r3, #0]
 8008e42:	4bc5      	ldr	r3, [pc, #788]	; (8009158 <UART_SetConfig+0x384>)
 8008e44:	429a      	cmp	r2, r3
 8008e46:	d004      	beq.n	8008e52 <UART_SetConfig+0x7e>
 8008e48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e4a:	681a      	ldr	r2, [r3, #0]
 8008e4c:	4bc3      	ldr	r3, [pc, #780]	; (800915c <UART_SetConfig+0x388>)
 8008e4e:	429a      	cmp	r2, r3
 8008e50:	d103      	bne.n	8008e5a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008e52:	f7fd fc2d 	bl	80066b0 <HAL_RCC_GetPCLK2Freq>
 8008e56:	6778      	str	r0, [r7, #116]	; 0x74
 8008e58:	e002      	b.n	8008e60 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008e5a:	f7fd fc15 	bl	8006688 <HAL_RCC_GetPCLK1Freq>
 8008e5e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008e60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e62:	69db      	ldr	r3, [r3, #28]
 8008e64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e68:	f040 80b6 	bne.w	8008fd8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008e6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008e6e:	461c      	mov	r4, r3
 8008e70:	f04f 0500 	mov.w	r5, #0
 8008e74:	4622      	mov	r2, r4
 8008e76:	462b      	mov	r3, r5
 8008e78:	1891      	adds	r1, r2, r2
 8008e7a:	6439      	str	r1, [r7, #64]	; 0x40
 8008e7c:	415b      	adcs	r3, r3
 8008e7e:	647b      	str	r3, [r7, #68]	; 0x44
 8008e80:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008e84:	1912      	adds	r2, r2, r4
 8008e86:	eb45 0303 	adc.w	r3, r5, r3
 8008e8a:	f04f 0000 	mov.w	r0, #0
 8008e8e:	f04f 0100 	mov.w	r1, #0
 8008e92:	00d9      	lsls	r1, r3, #3
 8008e94:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008e98:	00d0      	lsls	r0, r2, #3
 8008e9a:	4602      	mov	r2, r0
 8008e9c:	460b      	mov	r3, r1
 8008e9e:	1911      	adds	r1, r2, r4
 8008ea0:	6639      	str	r1, [r7, #96]	; 0x60
 8008ea2:	416b      	adcs	r3, r5
 8008ea4:	667b      	str	r3, [r7, #100]	; 0x64
 8008ea6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ea8:	685b      	ldr	r3, [r3, #4]
 8008eaa:	461a      	mov	r2, r3
 8008eac:	f04f 0300 	mov.w	r3, #0
 8008eb0:	1891      	adds	r1, r2, r2
 8008eb2:	63b9      	str	r1, [r7, #56]	; 0x38
 8008eb4:	415b      	adcs	r3, r3
 8008eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008eb8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008ebc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8008ec0:	f7f7 fec2 	bl	8000c48 <__aeabi_uldivmod>
 8008ec4:	4602      	mov	r2, r0
 8008ec6:	460b      	mov	r3, r1
 8008ec8:	4ba5      	ldr	r3, [pc, #660]	; (8009160 <UART_SetConfig+0x38c>)
 8008eca:	fba3 2302 	umull	r2, r3, r3, r2
 8008ece:	095b      	lsrs	r3, r3, #5
 8008ed0:	011e      	lsls	r6, r3, #4
 8008ed2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ed4:	461c      	mov	r4, r3
 8008ed6:	f04f 0500 	mov.w	r5, #0
 8008eda:	4622      	mov	r2, r4
 8008edc:	462b      	mov	r3, r5
 8008ede:	1891      	adds	r1, r2, r2
 8008ee0:	6339      	str	r1, [r7, #48]	; 0x30
 8008ee2:	415b      	adcs	r3, r3
 8008ee4:	637b      	str	r3, [r7, #52]	; 0x34
 8008ee6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008eea:	1912      	adds	r2, r2, r4
 8008eec:	eb45 0303 	adc.w	r3, r5, r3
 8008ef0:	f04f 0000 	mov.w	r0, #0
 8008ef4:	f04f 0100 	mov.w	r1, #0
 8008ef8:	00d9      	lsls	r1, r3, #3
 8008efa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008efe:	00d0      	lsls	r0, r2, #3
 8008f00:	4602      	mov	r2, r0
 8008f02:	460b      	mov	r3, r1
 8008f04:	1911      	adds	r1, r2, r4
 8008f06:	65b9      	str	r1, [r7, #88]	; 0x58
 8008f08:	416b      	adcs	r3, r5
 8008f0a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008f0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f0e:	685b      	ldr	r3, [r3, #4]
 8008f10:	461a      	mov	r2, r3
 8008f12:	f04f 0300 	mov.w	r3, #0
 8008f16:	1891      	adds	r1, r2, r2
 8008f18:	62b9      	str	r1, [r7, #40]	; 0x28
 8008f1a:	415b      	adcs	r3, r3
 8008f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f1e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008f22:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8008f26:	f7f7 fe8f 	bl	8000c48 <__aeabi_uldivmod>
 8008f2a:	4602      	mov	r2, r0
 8008f2c:	460b      	mov	r3, r1
 8008f2e:	4b8c      	ldr	r3, [pc, #560]	; (8009160 <UART_SetConfig+0x38c>)
 8008f30:	fba3 1302 	umull	r1, r3, r3, r2
 8008f34:	095b      	lsrs	r3, r3, #5
 8008f36:	2164      	movs	r1, #100	; 0x64
 8008f38:	fb01 f303 	mul.w	r3, r1, r3
 8008f3c:	1ad3      	subs	r3, r2, r3
 8008f3e:	00db      	lsls	r3, r3, #3
 8008f40:	3332      	adds	r3, #50	; 0x32
 8008f42:	4a87      	ldr	r2, [pc, #540]	; (8009160 <UART_SetConfig+0x38c>)
 8008f44:	fba2 2303 	umull	r2, r3, r2, r3
 8008f48:	095b      	lsrs	r3, r3, #5
 8008f4a:	005b      	lsls	r3, r3, #1
 8008f4c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008f50:	441e      	add	r6, r3
 8008f52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f54:	4618      	mov	r0, r3
 8008f56:	f04f 0100 	mov.w	r1, #0
 8008f5a:	4602      	mov	r2, r0
 8008f5c:	460b      	mov	r3, r1
 8008f5e:	1894      	adds	r4, r2, r2
 8008f60:	623c      	str	r4, [r7, #32]
 8008f62:	415b      	adcs	r3, r3
 8008f64:	627b      	str	r3, [r7, #36]	; 0x24
 8008f66:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008f6a:	1812      	adds	r2, r2, r0
 8008f6c:	eb41 0303 	adc.w	r3, r1, r3
 8008f70:	f04f 0400 	mov.w	r4, #0
 8008f74:	f04f 0500 	mov.w	r5, #0
 8008f78:	00dd      	lsls	r5, r3, #3
 8008f7a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008f7e:	00d4      	lsls	r4, r2, #3
 8008f80:	4622      	mov	r2, r4
 8008f82:	462b      	mov	r3, r5
 8008f84:	1814      	adds	r4, r2, r0
 8008f86:	653c      	str	r4, [r7, #80]	; 0x50
 8008f88:	414b      	adcs	r3, r1
 8008f8a:	657b      	str	r3, [r7, #84]	; 0x54
 8008f8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f8e:	685b      	ldr	r3, [r3, #4]
 8008f90:	461a      	mov	r2, r3
 8008f92:	f04f 0300 	mov.w	r3, #0
 8008f96:	1891      	adds	r1, r2, r2
 8008f98:	61b9      	str	r1, [r7, #24]
 8008f9a:	415b      	adcs	r3, r3
 8008f9c:	61fb      	str	r3, [r7, #28]
 8008f9e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008fa2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008fa6:	f7f7 fe4f 	bl	8000c48 <__aeabi_uldivmod>
 8008faa:	4602      	mov	r2, r0
 8008fac:	460b      	mov	r3, r1
 8008fae:	4b6c      	ldr	r3, [pc, #432]	; (8009160 <UART_SetConfig+0x38c>)
 8008fb0:	fba3 1302 	umull	r1, r3, r3, r2
 8008fb4:	095b      	lsrs	r3, r3, #5
 8008fb6:	2164      	movs	r1, #100	; 0x64
 8008fb8:	fb01 f303 	mul.w	r3, r1, r3
 8008fbc:	1ad3      	subs	r3, r2, r3
 8008fbe:	00db      	lsls	r3, r3, #3
 8008fc0:	3332      	adds	r3, #50	; 0x32
 8008fc2:	4a67      	ldr	r2, [pc, #412]	; (8009160 <UART_SetConfig+0x38c>)
 8008fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8008fc8:	095b      	lsrs	r3, r3, #5
 8008fca:	f003 0207 	and.w	r2, r3, #7
 8008fce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	4432      	add	r2, r6
 8008fd4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008fd6:	e0b9      	b.n	800914c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008fd8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008fda:	461c      	mov	r4, r3
 8008fdc:	f04f 0500 	mov.w	r5, #0
 8008fe0:	4622      	mov	r2, r4
 8008fe2:	462b      	mov	r3, r5
 8008fe4:	1891      	adds	r1, r2, r2
 8008fe6:	6139      	str	r1, [r7, #16]
 8008fe8:	415b      	adcs	r3, r3
 8008fea:	617b      	str	r3, [r7, #20]
 8008fec:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008ff0:	1912      	adds	r2, r2, r4
 8008ff2:	eb45 0303 	adc.w	r3, r5, r3
 8008ff6:	f04f 0000 	mov.w	r0, #0
 8008ffa:	f04f 0100 	mov.w	r1, #0
 8008ffe:	00d9      	lsls	r1, r3, #3
 8009000:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009004:	00d0      	lsls	r0, r2, #3
 8009006:	4602      	mov	r2, r0
 8009008:	460b      	mov	r3, r1
 800900a:	eb12 0804 	adds.w	r8, r2, r4
 800900e:	eb43 0905 	adc.w	r9, r3, r5
 8009012:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009014:	685b      	ldr	r3, [r3, #4]
 8009016:	4618      	mov	r0, r3
 8009018:	f04f 0100 	mov.w	r1, #0
 800901c:	f04f 0200 	mov.w	r2, #0
 8009020:	f04f 0300 	mov.w	r3, #0
 8009024:	008b      	lsls	r3, r1, #2
 8009026:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800902a:	0082      	lsls	r2, r0, #2
 800902c:	4640      	mov	r0, r8
 800902e:	4649      	mov	r1, r9
 8009030:	f7f7 fe0a 	bl	8000c48 <__aeabi_uldivmod>
 8009034:	4602      	mov	r2, r0
 8009036:	460b      	mov	r3, r1
 8009038:	4b49      	ldr	r3, [pc, #292]	; (8009160 <UART_SetConfig+0x38c>)
 800903a:	fba3 2302 	umull	r2, r3, r3, r2
 800903e:	095b      	lsrs	r3, r3, #5
 8009040:	011e      	lsls	r6, r3, #4
 8009042:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009044:	4618      	mov	r0, r3
 8009046:	f04f 0100 	mov.w	r1, #0
 800904a:	4602      	mov	r2, r0
 800904c:	460b      	mov	r3, r1
 800904e:	1894      	adds	r4, r2, r2
 8009050:	60bc      	str	r4, [r7, #8]
 8009052:	415b      	adcs	r3, r3
 8009054:	60fb      	str	r3, [r7, #12]
 8009056:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800905a:	1812      	adds	r2, r2, r0
 800905c:	eb41 0303 	adc.w	r3, r1, r3
 8009060:	f04f 0400 	mov.w	r4, #0
 8009064:	f04f 0500 	mov.w	r5, #0
 8009068:	00dd      	lsls	r5, r3, #3
 800906a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800906e:	00d4      	lsls	r4, r2, #3
 8009070:	4622      	mov	r2, r4
 8009072:	462b      	mov	r3, r5
 8009074:	1814      	adds	r4, r2, r0
 8009076:	64bc      	str	r4, [r7, #72]	; 0x48
 8009078:	414b      	adcs	r3, r1
 800907a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800907c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800907e:	685b      	ldr	r3, [r3, #4]
 8009080:	4618      	mov	r0, r3
 8009082:	f04f 0100 	mov.w	r1, #0
 8009086:	f04f 0200 	mov.w	r2, #0
 800908a:	f04f 0300 	mov.w	r3, #0
 800908e:	008b      	lsls	r3, r1, #2
 8009090:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009094:	0082      	lsls	r2, r0, #2
 8009096:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800909a:	f7f7 fdd5 	bl	8000c48 <__aeabi_uldivmod>
 800909e:	4602      	mov	r2, r0
 80090a0:	460b      	mov	r3, r1
 80090a2:	4b2f      	ldr	r3, [pc, #188]	; (8009160 <UART_SetConfig+0x38c>)
 80090a4:	fba3 1302 	umull	r1, r3, r3, r2
 80090a8:	095b      	lsrs	r3, r3, #5
 80090aa:	2164      	movs	r1, #100	; 0x64
 80090ac:	fb01 f303 	mul.w	r3, r1, r3
 80090b0:	1ad3      	subs	r3, r2, r3
 80090b2:	011b      	lsls	r3, r3, #4
 80090b4:	3332      	adds	r3, #50	; 0x32
 80090b6:	4a2a      	ldr	r2, [pc, #168]	; (8009160 <UART_SetConfig+0x38c>)
 80090b8:	fba2 2303 	umull	r2, r3, r2, r3
 80090bc:	095b      	lsrs	r3, r3, #5
 80090be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80090c2:	441e      	add	r6, r3
 80090c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80090c6:	4618      	mov	r0, r3
 80090c8:	f04f 0100 	mov.w	r1, #0
 80090cc:	4602      	mov	r2, r0
 80090ce:	460b      	mov	r3, r1
 80090d0:	1894      	adds	r4, r2, r2
 80090d2:	603c      	str	r4, [r7, #0]
 80090d4:	415b      	adcs	r3, r3
 80090d6:	607b      	str	r3, [r7, #4]
 80090d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090dc:	1812      	adds	r2, r2, r0
 80090de:	eb41 0303 	adc.w	r3, r1, r3
 80090e2:	f04f 0400 	mov.w	r4, #0
 80090e6:	f04f 0500 	mov.w	r5, #0
 80090ea:	00dd      	lsls	r5, r3, #3
 80090ec:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80090f0:	00d4      	lsls	r4, r2, #3
 80090f2:	4622      	mov	r2, r4
 80090f4:	462b      	mov	r3, r5
 80090f6:	eb12 0a00 	adds.w	sl, r2, r0
 80090fa:	eb43 0b01 	adc.w	fp, r3, r1
 80090fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009100:	685b      	ldr	r3, [r3, #4]
 8009102:	4618      	mov	r0, r3
 8009104:	f04f 0100 	mov.w	r1, #0
 8009108:	f04f 0200 	mov.w	r2, #0
 800910c:	f04f 0300 	mov.w	r3, #0
 8009110:	008b      	lsls	r3, r1, #2
 8009112:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009116:	0082      	lsls	r2, r0, #2
 8009118:	4650      	mov	r0, sl
 800911a:	4659      	mov	r1, fp
 800911c:	f7f7 fd94 	bl	8000c48 <__aeabi_uldivmod>
 8009120:	4602      	mov	r2, r0
 8009122:	460b      	mov	r3, r1
 8009124:	4b0e      	ldr	r3, [pc, #56]	; (8009160 <UART_SetConfig+0x38c>)
 8009126:	fba3 1302 	umull	r1, r3, r3, r2
 800912a:	095b      	lsrs	r3, r3, #5
 800912c:	2164      	movs	r1, #100	; 0x64
 800912e:	fb01 f303 	mul.w	r3, r1, r3
 8009132:	1ad3      	subs	r3, r2, r3
 8009134:	011b      	lsls	r3, r3, #4
 8009136:	3332      	adds	r3, #50	; 0x32
 8009138:	4a09      	ldr	r2, [pc, #36]	; (8009160 <UART_SetConfig+0x38c>)
 800913a:	fba2 2303 	umull	r2, r3, r2, r3
 800913e:	095b      	lsrs	r3, r3, #5
 8009140:	f003 020f 	and.w	r2, r3, #15
 8009144:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	4432      	add	r2, r6
 800914a:	609a      	str	r2, [r3, #8]
}
 800914c:	bf00      	nop
 800914e:	377c      	adds	r7, #124	; 0x7c
 8009150:	46bd      	mov	sp, r7
 8009152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009156:	bf00      	nop
 8009158:	40011000 	.word	0x40011000
 800915c:	40011400 	.word	0x40011400
 8009160:	51eb851f 	.word	0x51eb851f

08009164 <__errno>:
 8009164:	4b01      	ldr	r3, [pc, #4]	; (800916c <__errno+0x8>)
 8009166:	6818      	ldr	r0, [r3, #0]
 8009168:	4770      	bx	lr
 800916a:	bf00      	nop
 800916c:	2000003c 	.word	0x2000003c

08009170 <__libc_init_array>:
 8009170:	b570      	push	{r4, r5, r6, lr}
 8009172:	4d0d      	ldr	r5, [pc, #52]	; (80091a8 <__libc_init_array+0x38>)
 8009174:	4c0d      	ldr	r4, [pc, #52]	; (80091ac <__libc_init_array+0x3c>)
 8009176:	1b64      	subs	r4, r4, r5
 8009178:	10a4      	asrs	r4, r4, #2
 800917a:	2600      	movs	r6, #0
 800917c:	42a6      	cmp	r6, r4
 800917e:	d109      	bne.n	8009194 <__libc_init_array+0x24>
 8009180:	4d0b      	ldr	r5, [pc, #44]	; (80091b0 <__libc_init_array+0x40>)
 8009182:	4c0c      	ldr	r4, [pc, #48]	; (80091b4 <__libc_init_array+0x44>)
 8009184:	f002 fd80 	bl	800bc88 <_init>
 8009188:	1b64      	subs	r4, r4, r5
 800918a:	10a4      	asrs	r4, r4, #2
 800918c:	2600      	movs	r6, #0
 800918e:	42a6      	cmp	r6, r4
 8009190:	d105      	bne.n	800919e <__libc_init_array+0x2e>
 8009192:	bd70      	pop	{r4, r5, r6, pc}
 8009194:	f855 3b04 	ldr.w	r3, [r5], #4
 8009198:	4798      	blx	r3
 800919a:	3601      	adds	r6, #1
 800919c:	e7ee      	b.n	800917c <__libc_init_array+0xc>
 800919e:	f855 3b04 	ldr.w	r3, [r5], #4
 80091a2:	4798      	blx	r3
 80091a4:	3601      	adds	r6, #1
 80091a6:	e7f2      	b.n	800918e <__libc_init_array+0x1e>
 80091a8:	0800c10c 	.word	0x0800c10c
 80091ac:	0800c10c 	.word	0x0800c10c
 80091b0:	0800c10c 	.word	0x0800c10c
 80091b4:	0800c110 	.word	0x0800c110

080091b8 <memcpy>:
 80091b8:	440a      	add	r2, r1
 80091ba:	4291      	cmp	r1, r2
 80091bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80091c0:	d100      	bne.n	80091c4 <memcpy+0xc>
 80091c2:	4770      	bx	lr
 80091c4:	b510      	push	{r4, lr}
 80091c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80091ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80091ce:	4291      	cmp	r1, r2
 80091d0:	d1f9      	bne.n	80091c6 <memcpy+0xe>
 80091d2:	bd10      	pop	{r4, pc}

080091d4 <memset>:
 80091d4:	4402      	add	r2, r0
 80091d6:	4603      	mov	r3, r0
 80091d8:	4293      	cmp	r3, r2
 80091da:	d100      	bne.n	80091de <memset+0xa>
 80091dc:	4770      	bx	lr
 80091de:	f803 1b01 	strb.w	r1, [r3], #1
 80091e2:	e7f9      	b.n	80091d8 <memset+0x4>

080091e4 <__cvt>:
 80091e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80091e8:	ec55 4b10 	vmov	r4, r5, d0
 80091ec:	2d00      	cmp	r5, #0
 80091ee:	460e      	mov	r6, r1
 80091f0:	4619      	mov	r1, r3
 80091f2:	462b      	mov	r3, r5
 80091f4:	bfbb      	ittet	lt
 80091f6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80091fa:	461d      	movlt	r5, r3
 80091fc:	2300      	movge	r3, #0
 80091fe:	232d      	movlt	r3, #45	; 0x2d
 8009200:	700b      	strb	r3, [r1, #0]
 8009202:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009204:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009208:	4691      	mov	r9, r2
 800920a:	f023 0820 	bic.w	r8, r3, #32
 800920e:	bfbc      	itt	lt
 8009210:	4622      	movlt	r2, r4
 8009212:	4614      	movlt	r4, r2
 8009214:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009218:	d005      	beq.n	8009226 <__cvt+0x42>
 800921a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800921e:	d100      	bne.n	8009222 <__cvt+0x3e>
 8009220:	3601      	adds	r6, #1
 8009222:	2102      	movs	r1, #2
 8009224:	e000      	b.n	8009228 <__cvt+0x44>
 8009226:	2103      	movs	r1, #3
 8009228:	ab03      	add	r3, sp, #12
 800922a:	9301      	str	r3, [sp, #4]
 800922c:	ab02      	add	r3, sp, #8
 800922e:	9300      	str	r3, [sp, #0]
 8009230:	ec45 4b10 	vmov	d0, r4, r5
 8009234:	4653      	mov	r3, sl
 8009236:	4632      	mov	r2, r6
 8009238:	f000 fe1a 	bl	8009e70 <_dtoa_r>
 800923c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009240:	4607      	mov	r7, r0
 8009242:	d102      	bne.n	800924a <__cvt+0x66>
 8009244:	f019 0f01 	tst.w	r9, #1
 8009248:	d022      	beq.n	8009290 <__cvt+0xac>
 800924a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800924e:	eb07 0906 	add.w	r9, r7, r6
 8009252:	d110      	bne.n	8009276 <__cvt+0x92>
 8009254:	783b      	ldrb	r3, [r7, #0]
 8009256:	2b30      	cmp	r3, #48	; 0x30
 8009258:	d10a      	bne.n	8009270 <__cvt+0x8c>
 800925a:	2200      	movs	r2, #0
 800925c:	2300      	movs	r3, #0
 800925e:	4620      	mov	r0, r4
 8009260:	4629      	mov	r1, r5
 8009262:	f7f7 fc31 	bl	8000ac8 <__aeabi_dcmpeq>
 8009266:	b918      	cbnz	r0, 8009270 <__cvt+0x8c>
 8009268:	f1c6 0601 	rsb	r6, r6, #1
 800926c:	f8ca 6000 	str.w	r6, [sl]
 8009270:	f8da 3000 	ldr.w	r3, [sl]
 8009274:	4499      	add	r9, r3
 8009276:	2200      	movs	r2, #0
 8009278:	2300      	movs	r3, #0
 800927a:	4620      	mov	r0, r4
 800927c:	4629      	mov	r1, r5
 800927e:	f7f7 fc23 	bl	8000ac8 <__aeabi_dcmpeq>
 8009282:	b108      	cbz	r0, 8009288 <__cvt+0xa4>
 8009284:	f8cd 900c 	str.w	r9, [sp, #12]
 8009288:	2230      	movs	r2, #48	; 0x30
 800928a:	9b03      	ldr	r3, [sp, #12]
 800928c:	454b      	cmp	r3, r9
 800928e:	d307      	bcc.n	80092a0 <__cvt+0xbc>
 8009290:	9b03      	ldr	r3, [sp, #12]
 8009292:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009294:	1bdb      	subs	r3, r3, r7
 8009296:	4638      	mov	r0, r7
 8009298:	6013      	str	r3, [r2, #0]
 800929a:	b004      	add	sp, #16
 800929c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092a0:	1c59      	adds	r1, r3, #1
 80092a2:	9103      	str	r1, [sp, #12]
 80092a4:	701a      	strb	r2, [r3, #0]
 80092a6:	e7f0      	b.n	800928a <__cvt+0xa6>

080092a8 <__exponent>:
 80092a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80092aa:	4603      	mov	r3, r0
 80092ac:	2900      	cmp	r1, #0
 80092ae:	bfb8      	it	lt
 80092b0:	4249      	neglt	r1, r1
 80092b2:	f803 2b02 	strb.w	r2, [r3], #2
 80092b6:	bfb4      	ite	lt
 80092b8:	222d      	movlt	r2, #45	; 0x2d
 80092ba:	222b      	movge	r2, #43	; 0x2b
 80092bc:	2909      	cmp	r1, #9
 80092be:	7042      	strb	r2, [r0, #1]
 80092c0:	dd2a      	ble.n	8009318 <__exponent+0x70>
 80092c2:	f10d 0407 	add.w	r4, sp, #7
 80092c6:	46a4      	mov	ip, r4
 80092c8:	270a      	movs	r7, #10
 80092ca:	46a6      	mov	lr, r4
 80092cc:	460a      	mov	r2, r1
 80092ce:	fb91 f6f7 	sdiv	r6, r1, r7
 80092d2:	fb07 1516 	mls	r5, r7, r6, r1
 80092d6:	3530      	adds	r5, #48	; 0x30
 80092d8:	2a63      	cmp	r2, #99	; 0x63
 80092da:	f104 34ff 	add.w	r4, r4, #4294967295
 80092de:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80092e2:	4631      	mov	r1, r6
 80092e4:	dcf1      	bgt.n	80092ca <__exponent+0x22>
 80092e6:	3130      	adds	r1, #48	; 0x30
 80092e8:	f1ae 0502 	sub.w	r5, lr, #2
 80092ec:	f804 1c01 	strb.w	r1, [r4, #-1]
 80092f0:	1c44      	adds	r4, r0, #1
 80092f2:	4629      	mov	r1, r5
 80092f4:	4561      	cmp	r1, ip
 80092f6:	d30a      	bcc.n	800930e <__exponent+0x66>
 80092f8:	f10d 0209 	add.w	r2, sp, #9
 80092fc:	eba2 020e 	sub.w	r2, r2, lr
 8009300:	4565      	cmp	r5, ip
 8009302:	bf88      	it	hi
 8009304:	2200      	movhi	r2, #0
 8009306:	4413      	add	r3, r2
 8009308:	1a18      	subs	r0, r3, r0
 800930a:	b003      	add	sp, #12
 800930c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800930e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009312:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009316:	e7ed      	b.n	80092f4 <__exponent+0x4c>
 8009318:	2330      	movs	r3, #48	; 0x30
 800931a:	3130      	adds	r1, #48	; 0x30
 800931c:	7083      	strb	r3, [r0, #2]
 800931e:	70c1      	strb	r1, [r0, #3]
 8009320:	1d03      	adds	r3, r0, #4
 8009322:	e7f1      	b.n	8009308 <__exponent+0x60>

08009324 <_printf_float>:
 8009324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009328:	ed2d 8b02 	vpush	{d8}
 800932c:	b08d      	sub	sp, #52	; 0x34
 800932e:	460c      	mov	r4, r1
 8009330:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009334:	4616      	mov	r6, r2
 8009336:	461f      	mov	r7, r3
 8009338:	4605      	mov	r5, r0
 800933a:	f001 fd3d 	bl	800adb8 <_localeconv_r>
 800933e:	f8d0 a000 	ldr.w	sl, [r0]
 8009342:	4650      	mov	r0, sl
 8009344:	f7f6 ff44 	bl	80001d0 <strlen>
 8009348:	2300      	movs	r3, #0
 800934a:	930a      	str	r3, [sp, #40]	; 0x28
 800934c:	6823      	ldr	r3, [r4, #0]
 800934e:	9305      	str	r3, [sp, #20]
 8009350:	f8d8 3000 	ldr.w	r3, [r8]
 8009354:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009358:	3307      	adds	r3, #7
 800935a:	f023 0307 	bic.w	r3, r3, #7
 800935e:	f103 0208 	add.w	r2, r3, #8
 8009362:	f8c8 2000 	str.w	r2, [r8]
 8009366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800936a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800936e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009372:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009376:	9307      	str	r3, [sp, #28]
 8009378:	f8cd 8018 	str.w	r8, [sp, #24]
 800937c:	ee08 0a10 	vmov	s16, r0
 8009380:	4b9f      	ldr	r3, [pc, #636]	; (8009600 <_printf_float+0x2dc>)
 8009382:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009386:	f04f 32ff 	mov.w	r2, #4294967295
 800938a:	f7f7 fbcf 	bl	8000b2c <__aeabi_dcmpun>
 800938e:	bb88      	cbnz	r0, 80093f4 <_printf_float+0xd0>
 8009390:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009394:	4b9a      	ldr	r3, [pc, #616]	; (8009600 <_printf_float+0x2dc>)
 8009396:	f04f 32ff 	mov.w	r2, #4294967295
 800939a:	f7f7 fba9 	bl	8000af0 <__aeabi_dcmple>
 800939e:	bb48      	cbnz	r0, 80093f4 <_printf_float+0xd0>
 80093a0:	2200      	movs	r2, #0
 80093a2:	2300      	movs	r3, #0
 80093a4:	4640      	mov	r0, r8
 80093a6:	4649      	mov	r1, r9
 80093a8:	f7f7 fb98 	bl	8000adc <__aeabi_dcmplt>
 80093ac:	b110      	cbz	r0, 80093b4 <_printf_float+0x90>
 80093ae:	232d      	movs	r3, #45	; 0x2d
 80093b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093b4:	4b93      	ldr	r3, [pc, #588]	; (8009604 <_printf_float+0x2e0>)
 80093b6:	4894      	ldr	r0, [pc, #592]	; (8009608 <_printf_float+0x2e4>)
 80093b8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80093bc:	bf94      	ite	ls
 80093be:	4698      	movls	r8, r3
 80093c0:	4680      	movhi	r8, r0
 80093c2:	2303      	movs	r3, #3
 80093c4:	6123      	str	r3, [r4, #16]
 80093c6:	9b05      	ldr	r3, [sp, #20]
 80093c8:	f023 0204 	bic.w	r2, r3, #4
 80093cc:	6022      	str	r2, [r4, #0]
 80093ce:	f04f 0900 	mov.w	r9, #0
 80093d2:	9700      	str	r7, [sp, #0]
 80093d4:	4633      	mov	r3, r6
 80093d6:	aa0b      	add	r2, sp, #44	; 0x2c
 80093d8:	4621      	mov	r1, r4
 80093da:	4628      	mov	r0, r5
 80093dc:	f000 f9d8 	bl	8009790 <_printf_common>
 80093e0:	3001      	adds	r0, #1
 80093e2:	f040 8090 	bne.w	8009506 <_printf_float+0x1e2>
 80093e6:	f04f 30ff 	mov.w	r0, #4294967295
 80093ea:	b00d      	add	sp, #52	; 0x34
 80093ec:	ecbd 8b02 	vpop	{d8}
 80093f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093f4:	4642      	mov	r2, r8
 80093f6:	464b      	mov	r3, r9
 80093f8:	4640      	mov	r0, r8
 80093fa:	4649      	mov	r1, r9
 80093fc:	f7f7 fb96 	bl	8000b2c <__aeabi_dcmpun>
 8009400:	b140      	cbz	r0, 8009414 <_printf_float+0xf0>
 8009402:	464b      	mov	r3, r9
 8009404:	2b00      	cmp	r3, #0
 8009406:	bfbc      	itt	lt
 8009408:	232d      	movlt	r3, #45	; 0x2d
 800940a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800940e:	487f      	ldr	r0, [pc, #508]	; (800960c <_printf_float+0x2e8>)
 8009410:	4b7f      	ldr	r3, [pc, #508]	; (8009610 <_printf_float+0x2ec>)
 8009412:	e7d1      	b.n	80093b8 <_printf_float+0x94>
 8009414:	6863      	ldr	r3, [r4, #4]
 8009416:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800941a:	9206      	str	r2, [sp, #24]
 800941c:	1c5a      	adds	r2, r3, #1
 800941e:	d13f      	bne.n	80094a0 <_printf_float+0x17c>
 8009420:	2306      	movs	r3, #6
 8009422:	6063      	str	r3, [r4, #4]
 8009424:	9b05      	ldr	r3, [sp, #20]
 8009426:	6861      	ldr	r1, [r4, #4]
 8009428:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800942c:	2300      	movs	r3, #0
 800942e:	9303      	str	r3, [sp, #12]
 8009430:	ab0a      	add	r3, sp, #40	; 0x28
 8009432:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009436:	ab09      	add	r3, sp, #36	; 0x24
 8009438:	ec49 8b10 	vmov	d0, r8, r9
 800943c:	9300      	str	r3, [sp, #0]
 800943e:	6022      	str	r2, [r4, #0]
 8009440:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009444:	4628      	mov	r0, r5
 8009446:	f7ff fecd 	bl	80091e4 <__cvt>
 800944a:	9b06      	ldr	r3, [sp, #24]
 800944c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800944e:	2b47      	cmp	r3, #71	; 0x47
 8009450:	4680      	mov	r8, r0
 8009452:	d108      	bne.n	8009466 <_printf_float+0x142>
 8009454:	1cc8      	adds	r0, r1, #3
 8009456:	db02      	blt.n	800945e <_printf_float+0x13a>
 8009458:	6863      	ldr	r3, [r4, #4]
 800945a:	4299      	cmp	r1, r3
 800945c:	dd41      	ble.n	80094e2 <_printf_float+0x1be>
 800945e:	f1ab 0b02 	sub.w	fp, fp, #2
 8009462:	fa5f fb8b 	uxtb.w	fp, fp
 8009466:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800946a:	d820      	bhi.n	80094ae <_printf_float+0x18a>
 800946c:	3901      	subs	r1, #1
 800946e:	465a      	mov	r2, fp
 8009470:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009474:	9109      	str	r1, [sp, #36]	; 0x24
 8009476:	f7ff ff17 	bl	80092a8 <__exponent>
 800947a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800947c:	1813      	adds	r3, r2, r0
 800947e:	2a01      	cmp	r2, #1
 8009480:	4681      	mov	r9, r0
 8009482:	6123      	str	r3, [r4, #16]
 8009484:	dc02      	bgt.n	800948c <_printf_float+0x168>
 8009486:	6822      	ldr	r2, [r4, #0]
 8009488:	07d2      	lsls	r2, r2, #31
 800948a:	d501      	bpl.n	8009490 <_printf_float+0x16c>
 800948c:	3301      	adds	r3, #1
 800948e:	6123      	str	r3, [r4, #16]
 8009490:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009494:	2b00      	cmp	r3, #0
 8009496:	d09c      	beq.n	80093d2 <_printf_float+0xae>
 8009498:	232d      	movs	r3, #45	; 0x2d
 800949a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800949e:	e798      	b.n	80093d2 <_printf_float+0xae>
 80094a0:	9a06      	ldr	r2, [sp, #24]
 80094a2:	2a47      	cmp	r2, #71	; 0x47
 80094a4:	d1be      	bne.n	8009424 <_printf_float+0x100>
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d1bc      	bne.n	8009424 <_printf_float+0x100>
 80094aa:	2301      	movs	r3, #1
 80094ac:	e7b9      	b.n	8009422 <_printf_float+0xfe>
 80094ae:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80094b2:	d118      	bne.n	80094e6 <_printf_float+0x1c2>
 80094b4:	2900      	cmp	r1, #0
 80094b6:	6863      	ldr	r3, [r4, #4]
 80094b8:	dd0b      	ble.n	80094d2 <_printf_float+0x1ae>
 80094ba:	6121      	str	r1, [r4, #16]
 80094bc:	b913      	cbnz	r3, 80094c4 <_printf_float+0x1a0>
 80094be:	6822      	ldr	r2, [r4, #0]
 80094c0:	07d0      	lsls	r0, r2, #31
 80094c2:	d502      	bpl.n	80094ca <_printf_float+0x1a6>
 80094c4:	3301      	adds	r3, #1
 80094c6:	440b      	add	r3, r1
 80094c8:	6123      	str	r3, [r4, #16]
 80094ca:	65a1      	str	r1, [r4, #88]	; 0x58
 80094cc:	f04f 0900 	mov.w	r9, #0
 80094d0:	e7de      	b.n	8009490 <_printf_float+0x16c>
 80094d2:	b913      	cbnz	r3, 80094da <_printf_float+0x1b6>
 80094d4:	6822      	ldr	r2, [r4, #0]
 80094d6:	07d2      	lsls	r2, r2, #31
 80094d8:	d501      	bpl.n	80094de <_printf_float+0x1ba>
 80094da:	3302      	adds	r3, #2
 80094dc:	e7f4      	b.n	80094c8 <_printf_float+0x1a4>
 80094de:	2301      	movs	r3, #1
 80094e0:	e7f2      	b.n	80094c8 <_printf_float+0x1a4>
 80094e2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80094e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094e8:	4299      	cmp	r1, r3
 80094ea:	db05      	blt.n	80094f8 <_printf_float+0x1d4>
 80094ec:	6823      	ldr	r3, [r4, #0]
 80094ee:	6121      	str	r1, [r4, #16]
 80094f0:	07d8      	lsls	r0, r3, #31
 80094f2:	d5ea      	bpl.n	80094ca <_printf_float+0x1a6>
 80094f4:	1c4b      	adds	r3, r1, #1
 80094f6:	e7e7      	b.n	80094c8 <_printf_float+0x1a4>
 80094f8:	2900      	cmp	r1, #0
 80094fa:	bfd4      	ite	le
 80094fc:	f1c1 0202 	rsble	r2, r1, #2
 8009500:	2201      	movgt	r2, #1
 8009502:	4413      	add	r3, r2
 8009504:	e7e0      	b.n	80094c8 <_printf_float+0x1a4>
 8009506:	6823      	ldr	r3, [r4, #0]
 8009508:	055a      	lsls	r2, r3, #21
 800950a:	d407      	bmi.n	800951c <_printf_float+0x1f8>
 800950c:	6923      	ldr	r3, [r4, #16]
 800950e:	4642      	mov	r2, r8
 8009510:	4631      	mov	r1, r6
 8009512:	4628      	mov	r0, r5
 8009514:	47b8      	blx	r7
 8009516:	3001      	adds	r0, #1
 8009518:	d12c      	bne.n	8009574 <_printf_float+0x250>
 800951a:	e764      	b.n	80093e6 <_printf_float+0xc2>
 800951c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009520:	f240 80e0 	bls.w	80096e4 <_printf_float+0x3c0>
 8009524:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009528:	2200      	movs	r2, #0
 800952a:	2300      	movs	r3, #0
 800952c:	f7f7 facc 	bl	8000ac8 <__aeabi_dcmpeq>
 8009530:	2800      	cmp	r0, #0
 8009532:	d034      	beq.n	800959e <_printf_float+0x27a>
 8009534:	4a37      	ldr	r2, [pc, #220]	; (8009614 <_printf_float+0x2f0>)
 8009536:	2301      	movs	r3, #1
 8009538:	4631      	mov	r1, r6
 800953a:	4628      	mov	r0, r5
 800953c:	47b8      	blx	r7
 800953e:	3001      	adds	r0, #1
 8009540:	f43f af51 	beq.w	80093e6 <_printf_float+0xc2>
 8009544:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009548:	429a      	cmp	r2, r3
 800954a:	db02      	blt.n	8009552 <_printf_float+0x22e>
 800954c:	6823      	ldr	r3, [r4, #0]
 800954e:	07d8      	lsls	r0, r3, #31
 8009550:	d510      	bpl.n	8009574 <_printf_float+0x250>
 8009552:	ee18 3a10 	vmov	r3, s16
 8009556:	4652      	mov	r2, sl
 8009558:	4631      	mov	r1, r6
 800955a:	4628      	mov	r0, r5
 800955c:	47b8      	blx	r7
 800955e:	3001      	adds	r0, #1
 8009560:	f43f af41 	beq.w	80093e6 <_printf_float+0xc2>
 8009564:	f04f 0800 	mov.w	r8, #0
 8009568:	f104 091a 	add.w	r9, r4, #26
 800956c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800956e:	3b01      	subs	r3, #1
 8009570:	4543      	cmp	r3, r8
 8009572:	dc09      	bgt.n	8009588 <_printf_float+0x264>
 8009574:	6823      	ldr	r3, [r4, #0]
 8009576:	079b      	lsls	r3, r3, #30
 8009578:	f100 8105 	bmi.w	8009786 <_printf_float+0x462>
 800957c:	68e0      	ldr	r0, [r4, #12]
 800957e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009580:	4298      	cmp	r0, r3
 8009582:	bfb8      	it	lt
 8009584:	4618      	movlt	r0, r3
 8009586:	e730      	b.n	80093ea <_printf_float+0xc6>
 8009588:	2301      	movs	r3, #1
 800958a:	464a      	mov	r2, r9
 800958c:	4631      	mov	r1, r6
 800958e:	4628      	mov	r0, r5
 8009590:	47b8      	blx	r7
 8009592:	3001      	adds	r0, #1
 8009594:	f43f af27 	beq.w	80093e6 <_printf_float+0xc2>
 8009598:	f108 0801 	add.w	r8, r8, #1
 800959c:	e7e6      	b.n	800956c <_printf_float+0x248>
 800959e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	dc39      	bgt.n	8009618 <_printf_float+0x2f4>
 80095a4:	4a1b      	ldr	r2, [pc, #108]	; (8009614 <_printf_float+0x2f0>)
 80095a6:	2301      	movs	r3, #1
 80095a8:	4631      	mov	r1, r6
 80095aa:	4628      	mov	r0, r5
 80095ac:	47b8      	blx	r7
 80095ae:	3001      	adds	r0, #1
 80095b0:	f43f af19 	beq.w	80093e6 <_printf_float+0xc2>
 80095b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80095b8:	4313      	orrs	r3, r2
 80095ba:	d102      	bne.n	80095c2 <_printf_float+0x29e>
 80095bc:	6823      	ldr	r3, [r4, #0]
 80095be:	07d9      	lsls	r1, r3, #31
 80095c0:	d5d8      	bpl.n	8009574 <_printf_float+0x250>
 80095c2:	ee18 3a10 	vmov	r3, s16
 80095c6:	4652      	mov	r2, sl
 80095c8:	4631      	mov	r1, r6
 80095ca:	4628      	mov	r0, r5
 80095cc:	47b8      	blx	r7
 80095ce:	3001      	adds	r0, #1
 80095d0:	f43f af09 	beq.w	80093e6 <_printf_float+0xc2>
 80095d4:	f04f 0900 	mov.w	r9, #0
 80095d8:	f104 0a1a 	add.w	sl, r4, #26
 80095dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095de:	425b      	negs	r3, r3
 80095e0:	454b      	cmp	r3, r9
 80095e2:	dc01      	bgt.n	80095e8 <_printf_float+0x2c4>
 80095e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095e6:	e792      	b.n	800950e <_printf_float+0x1ea>
 80095e8:	2301      	movs	r3, #1
 80095ea:	4652      	mov	r2, sl
 80095ec:	4631      	mov	r1, r6
 80095ee:	4628      	mov	r0, r5
 80095f0:	47b8      	blx	r7
 80095f2:	3001      	adds	r0, #1
 80095f4:	f43f aef7 	beq.w	80093e6 <_printf_float+0xc2>
 80095f8:	f109 0901 	add.w	r9, r9, #1
 80095fc:	e7ee      	b.n	80095dc <_printf_float+0x2b8>
 80095fe:	bf00      	nop
 8009600:	7fefffff 	.word	0x7fefffff
 8009604:	0800bd24 	.word	0x0800bd24
 8009608:	0800bd28 	.word	0x0800bd28
 800960c:	0800bd30 	.word	0x0800bd30
 8009610:	0800bd2c 	.word	0x0800bd2c
 8009614:	0800bd34 	.word	0x0800bd34
 8009618:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800961a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800961c:	429a      	cmp	r2, r3
 800961e:	bfa8      	it	ge
 8009620:	461a      	movge	r2, r3
 8009622:	2a00      	cmp	r2, #0
 8009624:	4691      	mov	r9, r2
 8009626:	dc37      	bgt.n	8009698 <_printf_float+0x374>
 8009628:	f04f 0b00 	mov.w	fp, #0
 800962c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009630:	f104 021a 	add.w	r2, r4, #26
 8009634:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009636:	9305      	str	r3, [sp, #20]
 8009638:	eba3 0309 	sub.w	r3, r3, r9
 800963c:	455b      	cmp	r3, fp
 800963e:	dc33      	bgt.n	80096a8 <_printf_float+0x384>
 8009640:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009644:	429a      	cmp	r2, r3
 8009646:	db3b      	blt.n	80096c0 <_printf_float+0x39c>
 8009648:	6823      	ldr	r3, [r4, #0]
 800964a:	07da      	lsls	r2, r3, #31
 800964c:	d438      	bmi.n	80096c0 <_printf_float+0x39c>
 800964e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009650:	9b05      	ldr	r3, [sp, #20]
 8009652:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009654:	1ad3      	subs	r3, r2, r3
 8009656:	eba2 0901 	sub.w	r9, r2, r1
 800965a:	4599      	cmp	r9, r3
 800965c:	bfa8      	it	ge
 800965e:	4699      	movge	r9, r3
 8009660:	f1b9 0f00 	cmp.w	r9, #0
 8009664:	dc35      	bgt.n	80096d2 <_printf_float+0x3ae>
 8009666:	f04f 0800 	mov.w	r8, #0
 800966a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800966e:	f104 0a1a 	add.w	sl, r4, #26
 8009672:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009676:	1a9b      	subs	r3, r3, r2
 8009678:	eba3 0309 	sub.w	r3, r3, r9
 800967c:	4543      	cmp	r3, r8
 800967e:	f77f af79 	ble.w	8009574 <_printf_float+0x250>
 8009682:	2301      	movs	r3, #1
 8009684:	4652      	mov	r2, sl
 8009686:	4631      	mov	r1, r6
 8009688:	4628      	mov	r0, r5
 800968a:	47b8      	blx	r7
 800968c:	3001      	adds	r0, #1
 800968e:	f43f aeaa 	beq.w	80093e6 <_printf_float+0xc2>
 8009692:	f108 0801 	add.w	r8, r8, #1
 8009696:	e7ec      	b.n	8009672 <_printf_float+0x34e>
 8009698:	4613      	mov	r3, r2
 800969a:	4631      	mov	r1, r6
 800969c:	4642      	mov	r2, r8
 800969e:	4628      	mov	r0, r5
 80096a0:	47b8      	blx	r7
 80096a2:	3001      	adds	r0, #1
 80096a4:	d1c0      	bne.n	8009628 <_printf_float+0x304>
 80096a6:	e69e      	b.n	80093e6 <_printf_float+0xc2>
 80096a8:	2301      	movs	r3, #1
 80096aa:	4631      	mov	r1, r6
 80096ac:	4628      	mov	r0, r5
 80096ae:	9205      	str	r2, [sp, #20]
 80096b0:	47b8      	blx	r7
 80096b2:	3001      	adds	r0, #1
 80096b4:	f43f ae97 	beq.w	80093e6 <_printf_float+0xc2>
 80096b8:	9a05      	ldr	r2, [sp, #20]
 80096ba:	f10b 0b01 	add.w	fp, fp, #1
 80096be:	e7b9      	b.n	8009634 <_printf_float+0x310>
 80096c0:	ee18 3a10 	vmov	r3, s16
 80096c4:	4652      	mov	r2, sl
 80096c6:	4631      	mov	r1, r6
 80096c8:	4628      	mov	r0, r5
 80096ca:	47b8      	blx	r7
 80096cc:	3001      	adds	r0, #1
 80096ce:	d1be      	bne.n	800964e <_printf_float+0x32a>
 80096d0:	e689      	b.n	80093e6 <_printf_float+0xc2>
 80096d2:	9a05      	ldr	r2, [sp, #20]
 80096d4:	464b      	mov	r3, r9
 80096d6:	4442      	add	r2, r8
 80096d8:	4631      	mov	r1, r6
 80096da:	4628      	mov	r0, r5
 80096dc:	47b8      	blx	r7
 80096de:	3001      	adds	r0, #1
 80096e0:	d1c1      	bne.n	8009666 <_printf_float+0x342>
 80096e2:	e680      	b.n	80093e6 <_printf_float+0xc2>
 80096e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80096e6:	2a01      	cmp	r2, #1
 80096e8:	dc01      	bgt.n	80096ee <_printf_float+0x3ca>
 80096ea:	07db      	lsls	r3, r3, #31
 80096ec:	d538      	bpl.n	8009760 <_printf_float+0x43c>
 80096ee:	2301      	movs	r3, #1
 80096f0:	4642      	mov	r2, r8
 80096f2:	4631      	mov	r1, r6
 80096f4:	4628      	mov	r0, r5
 80096f6:	47b8      	blx	r7
 80096f8:	3001      	adds	r0, #1
 80096fa:	f43f ae74 	beq.w	80093e6 <_printf_float+0xc2>
 80096fe:	ee18 3a10 	vmov	r3, s16
 8009702:	4652      	mov	r2, sl
 8009704:	4631      	mov	r1, r6
 8009706:	4628      	mov	r0, r5
 8009708:	47b8      	blx	r7
 800970a:	3001      	adds	r0, #1
 800970c:	f43f ae6b 	beq.w	80093e6 <_printf_float+0xc2>
 8009710:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009714:	2200      	movs	r2, #0
 8009716:	2300      	movs	r3, #0
 8009718:	f7f7 f9d6 	bl	8000ac8 <__aeabi_dcmpeq>
 800971c:	b9d8      	cbnz	r0, 8009756 <_printf_float+0x432>
 800971e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009720:	f108 0201 	add.w	r2, r8, #1
 8009724:	3b01      	subs	r3, #1
 8009726:	4631      	mov	r1, r6
 8009728:	4628      	mov	r0, r5
 800972a:	47b8      	blx	r7
 800972c:	3001      	adds	r0, #1
 800972e:	d10e      	bne.n	800974e <_printf_float+0x42a>
 8009730:	e659      	b.n	80093e6 <_printf_float+0xc2>
 8009732:	2301      	movs	r3, #1
 8009734:	4652      	mov	r2, sl
 8009736:	4631      	mov	r1, r6
 8009738:	4628      	mov	r0, r5
 800973a:	47b8      	blx	r7
 800973c:	3001      	adds	r0, #1
 800973e:	f43f ae52 	beq.w	80093e6 <_printf_float+0xc2>
 8009742:	f108 0801 	add.w	r8, r8, #1
 8009746:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009748:	3b01      	subs	r3, #1
 800974a:	4543      	cmp	r3, r8
 800974c:	dcf1      	bgt.n	8009732 <_printf_float+0x40e>
 800974e:	464b      	mov	r3, r9
 8009750:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009754:	e6dc      	b.n	8009510 <_printf_float+0x1ec>
 8009756:	f04f 0800 	mov.w	r8, #0
 800975a:	f104 0a1a 	add.w	sl, r4, #26
 800975e:	e7f2      	b.n	8009746 <_printf_float+0x422>
 8009760:	2301      	movs	r3, #1
 8009762:	4642      	mov	r2, r8
 8009764:	e7df      	b.n	8009726 <_printf_float+0x402>
 8009766:	2301      	movs	r3, #1
 8009768:	464a      	mov	r2, r9
 800976a:	4631      	mov	r1, r6
 800976c:	4628      	mov	r0, r5
 800976e:	47b8      	blx	r7
 8009770:	3001      	adds	r0, #1
 8009772:	f43f ae38 	beq.w	80093e6 <_printf_float+0xc2>
 8009776:	f108 0801 	add.w	r8, r8, #1
 800977a:	68e3      	ldr	r3, [r4, #12]
 800977c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800977e:	1a5b      	subs	r3, r3, r1
 8009780:	4543      	cmp	r3, r8
 8009782:	dcf0      	bgt.n	8009766 <_printf_float+0x442>
 8009784:	e6fa      	b.n	800957c <_printf_float+0x258>
 8009786:	f04f 0800 	mov.w	r8, #0
 800978a:	f104 0919 	add.w	r9, r4, #25
 800978e:	e7f4      	b.n	800977a <_printf_float+0x456>

08009790 <_printf_common>:
 8009790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009794:	4616      	mov	r6, r2
 8009796:	4699      	mov	r9, r3
 8009798:	688a      	ldr	r2, [r1, #8]
 800979a:	690b      	ldr	r3, [r1, #16]
 800979c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80097a0:	4293      	cmp	r3, r2
 80097a2:	bfb8      	it	lt
 80097a4:	4613      	movlt	r3, r2
 80097a6:	6033      	str	r3, [r6, #0]
 80097a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80097ac:	4607      	mov	r7, r0
 80097ae:	460c      	mov	r4, r1
 80097b0:	b10a      	cbz	r2, 80097b6 <_printf_common+0x26>
 80097b2:	3301      	adds	r3, #1
 80097b4:	6033      	str	r3, [r6, #0]
 80097b6:	6823      	ldr	r3, [r4, #0]
 80097b8:	0699      	lsls	r1, r3, #26
 80097ba:	bf42      	ittt	mi
 80097bc:	6833      	ldrmi	r3, [r6, #0]
 80097be:	3302      	addmi	r3, #2
 80097c0:	6033      	strmi	r3, [r6, #0]
 80097c2:	6825      	ldr	r5, [r4, #0]
 80097c4:	f015 0506 	ands.w	r5, r5, #6
 80097c8:	d106      	bne.n	80097d8 <_printf_common+0x48>
 80097ca:	f104 0a19 	add.w	sl, r4, #25
 80097ce:	68e3      	ldr	r3, [r4, #12]
 80097d0:	6832      	ldr	r2, [r6, #0]
 80097d2:	1a9b      	subs	r3, r3, r2
 80097d4:	42ab      	cmp	r3, r5
 80097d6:	dc26      	bgt.n	8009826 <_printf_common+0x96>
 80097d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80097dc:	1e13      	subs	r3, r2, #0
 80097de:	6822      	ldr	r2, [r4, #0]
 80097e0:	bf18      	it	ne
 80097e2:	2301      	movne	r3, #1
 80097e4:	0692      	lsls	r2, r2, #26
 80097e6:	d42b      	bmi.n	8009840 <_printf_common+0xb0>
 80097e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80097ec:	4649      	mov	r1, r9
 80097ee:	4638      	mov	r0, r7
 80097f0:	47c0      	blx	r8
 80097f2:	3001      	adds	r0, #1
 80097f4:	d01e      	beq.n	8009834 <_printf_common+0xa4>
 80097f6:	6823      	ldr	r3, [r4, #0]
 80097f8:	68e5      	ldr	r5, [r4, #12]
 80097fa:	6832      	ldr	r2, [r6, #0]
 80097fc:	f003 0306 	and.w	r3, r3, #6
 8009800:	2b04      	cmp	r3, #4
 8009802:	bf08      	it	eq
 8009804:	1aad      	subeq	r5, r5, r2
 8009806:	68a3      	ldr	r3, [r4, #8]
 8009808:	6922      	ldr	r2, [r4, #16]
 800980a:	bf0c      	ite	eq
 800980c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009810:	2500      	movne	r5, #0
 8009812:	4293      	cmp	r3, r2
 8009814:	bfc4      	itt	gt
 8009816:	1a9b      	subgt	r3, r3, r2
 8009818:	18ed      	addgt	r5, r5, r3
 800981a:	2600      	movs	r6, #0
 800981c:	341a      	adds	r4, #26
 800981e:	42b5      	cmp	r5, r6
 8009820:	d11a      	bne.n	8009858 <_printf_common+0xc8>
 8009822:	2000      	movs	r0, #0
 8009824:	e008      	b.n	8009838 <_printf_common+0xa8>
 8009826:	2301      	movs	r3, #1
 8009828:	4652      	mov	r2, sl
 800982a:	4649      	mov	r1, r9
 800982c:	4638      	mov	r0, r7
 800982e:	47c0      	blx	r8
 8009830:	3001      	adds	r0, #1
 8009832:	d103      	bne.n	800983c <_printf_common+0xac>
 8009834:	f04f 30ff 	mov.w	r0, #4294967295
 8009838:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800983c:	3501      	adds	r5, #1
 800983e:	e7c6      	b.n	80097ce <_printf_common+0x3e>
 8009840:	18e1      	adds	r1, r4, r3
 8009842:	1c5a      	adds	r2, r3, #1
 8009844:	2030      	movs	r0, #48	; 0x30
 8009846:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800984a:	4422      	add	r2, r4
 800984c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009850:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009854:	3302      	adds	r3, #2
 8009856:	e7c7      	b.n	80097e8 <_printf_common+0x58>
 8009858:	2301      	movs	r3, #1
 800985a:	4622      	mov	r2, r4
 800985c:	4649      	mov	r1, r9
 800985e:	4638      	mov	r0, r7
 8009860:	47c0      	blx	r8
 8009862:	3001      	adds	r0, #1
 8009864:	d0e6      	beq.n	8009834 <_printf_common+0xa4>
 8009866:	3601      	adds	r6, #1
 8009868:	e7d9      	b.n	800981e <_printf_common+0x8e>
	...

0800986c <_printf_i>:
 800986c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009870:	460c      	mov	r4, r1
 8009872:	4691      	mov	r9, r2
 8009874:	7e27      	ldrb	r7, [r4, #24]
 8009876:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009878:	2f78      	cmp	r7, #120	; 0x78
 800987a:	4680      	mov	r8, r0
 800987c:	469a      	mov	sl, r3
 800987e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009882:	d807      	bhi.n	8009894 <_printf_i+0x28>
 8009884:	2f62      	cmp	r7, #98	; 0x62
 8009886:	d80a      	bhi.n	800989e <_printf_i+0x32>
 8009888:	2f00      	cmp	r7, #0
 800988a:	f000 80d8 	beq.w	8009a3e <_printf_i+0x1d2>
 800988e:	2f58      	cmp	r7, #88	; 0x58
 8009890:	f000 80a3 	beq.w	80099da <_printf_i+0x16e>
 8009894:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009898:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800989c:	e03a      	b.n	8009914 <_printf_i+0xa8>
 800989e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80098a2:	2b15      	cmp	r3, #21
 80098a4:	d8f6      	bhi.n	8009894 <_printf_i+0x28>
 80098a6:	a001      	add	r0, pc, #4	; (adr r0, 80098ac <_printf_i+0x40>)
 80098a8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80098ac:	08009905 	.word	0x08009905
 80098b0:	08009919 	.word	0x08009919
 80098b4:	08009895 	.word	0x08009895
 80098b8:	08009895 	.word	0x08009895
 80098bc:	08009895 	.word	0x08009895
 80098c0:	08009895 	.word	0x08009895
 80098c4:	08009919 	.word	0x08009919
 80098c8:	08009895 	.word	0x08009895
 80098cc:	08009895 	.word	0x08009895
 80098d0:	08009895 	.word	0x08009895
 80098d4:	08009895 	.word	0x08009895
 80098d8:	08009a25 	.word	0x08009a25
 80098dc:	08009949 	.word	0x08009949
 80098e0:	08009a07 	.word	0x08009a07
 80098e4:	08009895 	.word	0x08009895
 80098e8:	08009895 	.word	0x08009895
 80098ec:	08009a47 	.word	0x08009a47
 80098f0:	08009895 	.word	0x08009895
 80098f4:	08009949 	.word	0x08009949
 80098f8:	08009895 	.word	0x08009895
 80098fc:	08009895 	.word	0x08009895
 8009900:	08009a0f 	.word	0x08009a0f
 8009904:	680b      	ldr	r3, [r1, #0]
 8009906:	1d1a      	adds	r2, r3, #4
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	600a      	str	r2, [r1, #0]
 800990c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009910:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009914:	2301      	movs	r3, #1
 8009916:	e0a3      	b.n	8009a60 <_printf_i+0x1f4>
 8009918:	6825      	ldr	r5, [r4, #0]
 800991a:	6808      	ldr	r0, [r1, #0]
 800991c:	062e      	lsls	r6, r5, #24
 800991e:	f100 0304 	add.w	r3, r0, #4
 8009922:	d50a      	bpl.n	800993a <_printf_i+0xce>
 8009924:	6805      	ldr	r5, [r0, #0]
 8009926:	600b      	str	r3, [r1, #0]
 8009928:	2d00      	cmp	r5, #0
 800992a:	da03      	bge.n	8009934 <_printf_i+0xc8>
 800992c:	232d      	movs	r3, #45	; 0x2d
 800992e:	426d      	negs	r5, r5
 8009930:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009934:	485e      	ldr	r0, [pc, #376]	; (8009ab0 <_printf_i+0x244>)
 8009936:	230a      	movs	r3, #10
 8009938:	e019      	b.n	800996e <_printf_i+0x102>
 800993a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800993e:	6805      	ldr	r5, [r0, #0]
 8009940:	600b      	str	r3, [r1, #0]
 8009942:	bf18      	it	ne
 8009944:	b22d      	sxthne	r5, r5
 8009946:	e7ef      	b.n	8009928 <_printf_i+0xbc>
 8009948:	680b      	ldr	r3, [r1, #0]
 800994a:	6825      	ldr	r5, [r4, #0]
 800994c:	1d18      	adds	r0, r3, #4
 800994e:	6008      	str	r0, [r1, #0]
 8009950:	0628      	lsls	r0, r5, #24
 8009952:	d501      	bpl.n	8009958 <_printf_i+0xec>
 8009954:	681d      	ldr	r5, [r3, #0]
 8009956:	e002      	b.n	800995e <_printf_i+0xf2>
 8009958:	0669      	lsls	r1, r5, #25
 800995a:	d5fb      	bpl.n	8009954 <_printf_i+0xe8>
 800995c:	881d      	ldrh	r5, [r3, #0]
 800995e:	4854      	ldr	r0, [pc, #336]	; (8009ab0 <_printf_i+0x244>)
 8009960:	2f6f      	cmp	r7, #111	; 0x6f
 8009962:	bf0c      	ite	eq
 8009964:	2308      	moveq	r3, #8
 8009966:	230a      	movne	r3, #10
 8009968:	2100      	movs	r1, #0
 800996a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800996e:	6866      	ldr	r6, [r4, #4]
 8009970:	60a6      	str	r6, [r4, #8]
 8009972:	2e00      	cmp	r6, #0
 8009974:	bfa2      	ittt	ge
 8009976:	6821      	ldrge	r1, [r4, #0]
 8009978:	f021 0104 	bicge.w	r1, r1, #4
 800997c:	6021      	strge	r1, [r4, #0]
 800997e:	b90d      	cbnz	r5, 8009984 <_printf_i+0x118>
 8009980:	2e00      	cmp	r6, #0
 8009982:	d04d      	beq.n	8009a20 <_printf_i+0x1b4>
 8009984:	4616      	mov	r6, r2
 8009986:	fbb5 f1f3 	udiv	r1, r5, r3
 800998a:	fb03 5711 	mls	r7, r3, r1, r5
 800998e:	5dc7      	ldrb	r7, [r0, r7]
 8009990:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009994:	462f      	mov	r7, r5
 8009996:	42bb      	cmp	r3, r7
 8009998:	460d      	mov	r5, r1
 800999a:	d9f4      	bls.n	8009986 <_printf_i+0x11a>
 800999c:	2b08      	cmp	r3, #8
 800999e:	d10b      	bne.n	80099b8 <_printf_i+0x14c>
 80099a0:	6823      	ldr	r3, [r4, #0]
 80099a2:	07df      	lsls	r7, r3, #31
 80099a4:	d508      	bpl.n	80099b8 <_printf_i+0x14c>
 80099a6:	6923      	ldr	r3, [r4, #16]
 80099a8:	6861      	ldr	r1, [r4, #4]
 80099aa:	4299      	cmp	r1, r3
 80099ac:	bfde      	ittt	le
 80099ae:	2330      	movle	r3, #48	; 0x30
 80099b0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80099b4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80099b8:	1b92      	subs	r2, r2, r6
 80099ba:	6122      	str	r2, [r4, #16]
 80099bc:	f8cd a000 	str.w	sl, [sp]
 80099c0:	464b      	mov	r3, r9
 80099c2:	aa03      	add	r2, sp, #12
 80099c4:	4621      	mov	r1, r4
 80099c6:	4640      	mov	r0, r8
 80099c8:	f7ff fee2 	bl	8009790 <_printf_common>
 80099cc:	3001      	adds	r0, #1
 80099ce:	d14c      	bne.n	8009a6a <_printf_i+0x1fe>
 80099d0:	f04f 30ff 	mov.w	r0, #4294967295
 80099d4:	b004      	add	sp, #16
 80099d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099da:	4835      	ldr	r0, [pc, #212]	; (8009ab0 <_printf_i+0x244>)
 80099dc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80099e0:	6823      	ldr	r3, [r4, #0]
 80099e2:	680e      	ldr	r6, [r1, #0]
 80099e4:	061f      	lsls	r7, r3, #24
 80099e6:	f856 5b04 	ldr.w	r5, [r6], #4
 80099ea:	600e      	str	r6, [r1, #0]
 80099ec:	d514      	bpl.n	8009a18 <_printf_i+0x1ac>
 80099ee:	07d9      	lsls	r1, r3, #31
 80099f0:	bf44      	itt	mi
 80099f2:	f043 0320 	orrmi.w	r3, r3, #32
 80099f6:	6023      	strmi	r3, [r4, #0]
 80099f8:	b91d      	cbnz	r5, 8009a02 <_printf_i+0x196>
 80099fa:	6823      	ldr	r3, [r4, #0]
 80099fc:	f023 0320 	bic.w	r3, r3, #32
 8009a00:	6023      	str	r3, [r4, #0]
 8009a02:	2310      	movs	r3, #16
 8009a04:	e7b0      	b.n	8009968 <_printf_i+0xfc>
 8009a06:	6823      	ldr	r3, [r4, #0]
 8009a08:	f043 0320 	orr.w	r3, r3, #32
 8009a0c:	6023      	str	r3, [r4, #0]
 8009a0e:	2378      	movs	r3, #120	; 0x78
 8009a10:	4828      	ldr	r0, [pc, #160]	; (8009ab4 <_printf_i+0x248>)
 8009a12:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009a16:	e7e3      	b.n	80099e0 <_printf_i+0x174>
 8009a18:	065e      	lsls	r6, r3, #25
 8009a1a:	bf48      	it	mi
 8009a1c:	b2ad      	uxthmi	r5, r5
 8009a1e:	e7e6      	b.n	80099ee <_printf_i+0x182>
 8009a20:	4616      	mov	r6, r2
 8009a22:	e7bb      	b.n	800999c <_printf_i+0x130>
 8009a24:	680b      	ldr	r3, [r1, #0]
 8009a26:	6826      	ldr	r6, [r4, #0]
 8009a28:	6960      	ldr	r0, [r4, #20]
 8009a2a:	1d1d      	adds	r5, r3, #4
 8009a2c:	600d      	str	r5, [r1, #0]
 8009a2e:	0635      	lsls	r5, r6, #24
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	d501      	bpl.n	8009a38 <_printf_i+0x1cc>
 8009a34:	6018      	str	r0, [r3, #0]
 8009a36:	e002      	b.n	8009a3e <_printf_i+0x1d2>
 8009a38:	0671      	lsls	r1, r6, #25
 8009a3a:	d5fb      	bpl.n	8009a34 <_printf_i+0x1c8>
 8009a3c:	8018      	strh	r0, [r3, #0]
 8009a3e:	2300      	movs	r3, #0
 8009a40:	6123      	str	r3, [r4, #16]
 8009a42:	4616      	mov	r6, r2
 8009a44:	e7ba      	b.n	80099bc <_printf_i+0x150>
 8009a46:	680b      	ldr	r3, [r1, #0]
 8009a48:	1d1a      	adds	r2, r3, #4
 8009a4a:	600a      	str	r2, [r1, #0]
 8009a4c:	681e      	ldr	r6, [r3, #0]
 8009a4e:	6862      	ldr	r2, [r4, #4]
 8009a50:	2100      	movs	r1, #0
 8009a52:	4630      	mov	r0, r6
 8009a54:	f7f6 fbc4 	bl	80001e0 <memchr>
 8009a58:	b108      	cbz	r0, 8009a5e <_printf_i+0x1f2>
 8009a5a:	1b80      	subs	r0, r0, r6
 8009a5c:	6060      	str	r0, [r4, #4]
 8009a5e:	6863      	ldr	r3, [r4, #4]
 8009a60:	6123      	str	r3, [r4, #16]
 8009a62:	2300      	movs	r3, #0
 8009a64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a68:	e7a8      	b.n	80099bc <_printf_i+0x150>
 8009a6a:	6923      	ldr	r3, [r4, #16]
 8009a6c:	4632      	mov	r2, r6
 8009a6e:	4649      	mov	r1, r9
 8009a70:	4640      	mov	r0, r8
 8009a72:	47d0      	blx	sl
 8009a74:	3001      	adds	r0, #1
 8009a76:	d0ab      	beq.n	80099d0 <_printf_i+0x164>
 8009a78:	6823      	ldr	r3, [r4, #0]
 8009a7a:	079b      	lsls	r3, r3, #30
 8009a7c:	d413      	bmi.n	8009aa6 <_printf_i+0x23a>
 8009a7e:	68e0      	ldr	r0, [r4, #12]
 8009a80:	9b03      	ldr	r3, [sp, #12]
 8009a82:	4298      	cmp	r0, r3
 8009a84:	bfb8      	it	lt
 8009a86:	4618      	movlt	r0, r3
 8009a88:	e7a4      	b.n	80099d4 <_printf_i+0x168>
 8009a8a:	2301      	movs	r3, #1
 8009a8c:	4632      	mov	r2, r6
 8009a8e:	4649      	mov	r1, r9
 8009a90:	4640      	mov	r0, r8
 8009a92:	47d0      	blx	sl
 8009a94:	3001      	adds	r0, #1
 8009a96:	d09b      	beq.n	80099d0 <_printf_i+0x164>
 8009a98:	3501      	adds	r5, #1
 8009a9a:	68e3      	ldr	r3, [r4, #12]
 8009a9c:	9903      	ldr	r1, [sp, #12]
 8009a9e:	1a5b      	subs	r3, r3, r1
 8009aa0:	42ab      	cmp	r3, r5
 8009aa2:	dcf2      	bgt.n	8009a8a <_printf_i+0x21e>
 8009aa4:	e7eb      	b.n	8009a7e <_printf_i+0x212>
 8009aa6:	2500      	movs	r5, #0
 8009aa8:	f104 0619 	add.w	r6, r4, #25
 8009aac:	e7f5      	b.n	8009a9a <_printf_i+0x22e>
 8009aae:	bf00      	nop
 8009ab0:	0800bd36 	.word	0x0800bd36
 8009ab4:	0800bd47 	.word	0x0800bd47

08009ab8 <iprintf>:
 8009ab8:	b40f      	push	{r0, r1, r2, r3}
 8009aba:	4b0a      	ldr	r3, [pc, #40]	; (8009ae4 <iprintf+0x2c>)
 8009abc:	b513      	push	{r0, r1, r4, lr}
 8009abe:	681c      	ldr	r4, [r3, #0]
 8009ac0:	b124      	cbz	r4, 8009acc <iprintf+0x14>
 8009ac2:	69a3      	ldr	r3, [r4, #24]
 8009ac4:	b913      	cbnz	r3, 8009acc <iprintf+0x14>
 8009ac6:	4620      	mov	r0, r4
 8009ac8:	f001 f8d8 	bl	800ac7c <__sinit>
 8009acc:	ab05      	add	r3, sp, #20
 8009ace:	9a04      	ldr	r2, [sp, #16]
 8009ad0:	68a1      	ldr	r1, [r4, #8]
 8009ad2:	9301      	str	r3, [sp, #4]
 8009ad4:	4620      	mov	r0, r4
 8009ad6:	f001 fe45 	bl	800b764 <_vfiprintf_r>
 8009ada:	b002      	add	sp, #8
 8009adc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ae0:	b004      	add	sp, #16
 8009ae2:	4770      	bx	lr
 8009ae4:	2000003c 	.word	0x2000003c

08009ae8 <_puts_r>:
 8009ae8:	b570      	push	{r4, r5, r6, lr}
 8009aea:	460e      	mov	r6, r1
 8009aec:	4605      	mov	r5, r0
 8009aee:	b118      	cbz	r0, 8009af8 <_puts_r+0x10>
 8009af0:	6983      	ldr	r3, [r0, #24]
 8009af2:	b90b      	cbnz	r3, 8009af8 <_puts_r+0x10>
 8009af4:	f001 f8c2 	bl	800ac7c <__sinit>
 8009af8:	69ab      	ldr	r3, [r5, #24]
 8009afa:	68ac      	ldr	r4, [r5, #8]
 8009afc:	b913      	cbnz	r3, 8009b04 <_puts_r+0x1c>
 8009afe:	4628      	mov	r0, r5
 8009b00:	f001 f8bc 	bl	800ac7c <__sinit>
 8009b04:	4b2c      	ldr	r3, [pc, #176]	; (8009bb8 <_puts_r+0xd0>)
 8009b06:	429c      	cmp	r4, r3
 8009b08:	d120      	bne.n	8009b4c <_puts_r+0x64>
 8009b0a:	686c      	ldr	r4, [r5, #4]
 8009b0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009b0e:	07db      	lsls	r3, r3, #31
 8009b10:	d405      	bmi.n	8009b1e <_puts_r+0x36>
 8009b12:	89a3      	ldrh	r3, [r4, #12]
 8009b14:	0598      	lsls	r0, r3, #22
 8009b16:	d402      	bmi.n	8009b1e <_puts_r+0x36>
 8009b18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b1a:	f001 f952 	bl	800adc2 <__retarget_lock_acquire_recursive>
 8009b1e:	89a3      	ldrh	r3, [r4, #12]
 8009b20:	0719      	lsls	r1, r3, #28
 8009b22:	d51d      	bpl.n	8009b60 <_puts_r+0x78>
 8009b24:	6923      	ldr	r3, [r4, #16]
 8009b26:	b1db      	cbz	r3, 8009b60 <_puts_r+0x78>
 8009b28:	3e01      	subs	r6, #1
 8009b2a:	68a3      	ldr	r3, [r4, #8]
 8009b2c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009b30:	3b01      	subs	r3, #1
 8009b32:	60a3      	str	r3, [r4, #8]
 8009b34:	bb39      	cbnz	r1, 8009b86 <_puts_r+0x9e>
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	da38      	bge.n	8009bac <_puts_r+0xc4>
 8009b3a:	4622      	mov	r2, r4
 8009b3c:	210a      	movs	r1, #10
 8009b3e:	4628      	mov	r0, r5
 8009b40:	f000 f848 	bl	8009bd4 <__swbuf_r>
 8009b44:	3001      	adds	r0, #1
 8009b46:	d011      	beq.n	8009b6c <_puts_r+0x84>
 8009b48:	250a      	movs	r5, #10
 8009b4a:	e011      	b.n	8009b70 <_puts_r+0x88>
 8009b4c:	4b1b      	ldr	r3, [pc, #108]	; (8009bbc <_puts_r+0xd4>)
 8009b4e:	429c      	cmp	r4, r3
 8009b50:	d101      	bne.n	8009b56 <_puts_r+0x6e>
 8009b52:	68ac      	ldr	r4, [r5, #8]
 8009b54:	e7da      	b.n	8009b0c <_puts_r+0x24>
 8009b56:	4b1a      	ldr	r3, [pc, #104]	; (8009bc0 <_puts_r+0xd8>)
 8009b58:	429c      	cmp	r4, r3
 8009b5a:	bf08      	it	eq
 8009b5c:	68ec      	ldreq	r4, [r5, #12]
 8009b5e:	e7d5      	b.n	8009b0c <_puts_r+0x24>
 8009b60:	4621      	mov	r1, r4
 8009b62:	4628      	mov	r0, r5
 8009b64:	f000 f888 	bl	8009c78 <__swsetup_r>
 8009b68:	2800      	cmp	r0, #0
 8009b6a:	d0dd      	beq.n	8009b28 <_puts_r+0x40>
 8009b6c:	f04f 35ff 	mov.w	r5, #4294967295
 8009b70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009b72:	07da      	lsls	r2, r3, #31
 8009b74:	d405      	bmi.n	8009b82 <_puts_r+0x9a>
 8009b76:	89a3      	ldrh	r3, [r4, #12]
 8009b78:	059b      	lsls	r3, r3, #22
 8009b7a:	d402      	bmi.n	8009b82 <_puts_r+0x9a>
 8009b7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b7e:	f001 f921 	bl	800adc4 <__retarget_lock_release_recursive>
 8009b82:	4628      	mov	r0, r5
 8009b84:	bd70      	pop	{r4, r5, r6, pc}
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	da04      	bge.n	8009b94 <_puts_r+0xac>
 8009b8a:	69a2      	ldr	r2, [r4, #24]
 8009b8c:	429a      	cmp	r2, r3
 8009b8e:	dc06      	bgt.n	8009b9e <_puts_r+0xb6>
 8009b90:	290a      	cmp	r1, #10
 8009b92:	d004      	beq.n	8009b9e <_puts_r+0xb6>
 8009b94:	6823      	ldr	r3, [r4, #0]
 8009b96:	1c5a      	adds	r2, r3, #1
 8009b98:	6022      	str	r2, [r4, #0]
 8009b9a:	7019      	strb	r1, [r3, #0]
 8009b9c:	e7c5      	b.n	8009b2a <_puts_r+0x42>
 8009b9e:	4622      	mov	r2, r4
 8009ba0:	4628      	mov	r0, r5
 8009ba2:	f000 f817 	bl	8009bd4 <__swbuf_r>
 8009ba6:	3001      	adds	r0, #1
 8009ba8:	d1bf      	bne.n	8009b2a <_puts_r+0x42>
 8009baa:	e7df      	b.n	8009b6c <_puts_r+0x84>
 8009bac:	6823      	ldr	r3, [r4, #0]
 8009bae:	250a      	movs	r5, #10
 8009bb0:	1c5a      	adds	r2, r3, #1
 8009bb2:	6022      	str	r2, [r4, #0]
 8009bb4:	701d      	strb	r5, [r3, #0]
 8009bb6:	e7db      	b.n	8009b70 <_puts_r+0x88>
 8009bb8:	0800be0c 	.word	0x0800be0c
 8009bbc:	0800be2c 	.word	0x0800be2c
 8009bc0:	0800bdec 	.word	0x0800bdec

08009bc4 <puts>:
 8009bc4:	4b02      	ldr	r3, [pc, #8]	; (8009bd0 <puts+0xc>)
 8009bc6:	4601      	mov	r1, r0
 8009bc8:	6818      	ldr	r0, [r3, #0]
 8009bca:	f7ff bf8d 	b.w	8009ae8 <_puts_r>
 8009bce:	bf00      	nop
 8009bd0:	2000003c 	.word	0x2000003c

08009bd4 <__swbuf_r>:
 8009bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bd6:	460e      	mov	r6, r1
 8009bd8:	4614      	mov	r4, r2
 8009bda:	4605      	mov	r5, r0
 8009bdc:	b118      	cbz	r0, 8009be6 <__swbuf_r+0x12>
 8009bde:	6983      	ldr	r3, [r0, #24]
 8009be0:	b90b      	cbnz	r3, 8009be6 <__swbuf_r+0x12>
 8009be2:	f001 f84b 	bl	800ac7c <__sinit>
 8009be6:	4b21      	ldr	r3, [pc, #132]	; (8009c6c <__swbuf_r+0x98>)
 8009be8:	429c      	cmp	r4, r3
 8009bea:	d12b      	bne.n	8009c44 <__swbuf_r+0x70>
 8009bec:	686c      	ldr	r4, [r5, #4]
 8009bee:	69a3      	ldr	r3, [r4, #24]
 8009bf0:	60a3      	str	r3, [r4, #8]
 8009bf2:	89a3      	ldrh	r3, [r4, #12]
 8009bf4:	071a      	lsls	r2, r3, #28
 8009bf6:	d52f      	bpl.n	8009c58 <__swbuf_r+0x84>
 8009bf8:	6923      	ldr	r3, [r4, #16]
 8009bfa:	b36b      	cbz	r3, 8009c58 <__swbuf_r+0x84>
 8009bfc:	6923      	ldr	r3, [r4, #16]
 8009bfe:	6820      	ldr	r0, [r4, #0]
 8009c00:	1ac0      	subs	r0, r0, r3
 8009c02:	6963      	ldr	r3, [r4, #20]
 8009c04:	b2f6      	uxtb	r6, r6
 8009c06:	4283      	cmp	r3, r0
 8009c08:	4637      	mov	r7, r6
 8009c0a:	dc04      	bgt.n	8009c16 <__swbuf_r+0x42>
 8009c0c:	4621      	mov	r1, r4
 8009c0e:	4628      	mov	r0, r5
 8009c10:	f000 ffa0 	bl	800ab54 <_fflush_r>
 8009c14:	bb30      	cbnz	r0, 8009c64 <__swbuf_r+0x90>
 8009c16:	68a3      	ldr	r3, [r4, #8]
 8009c18:	3b01      	subs	r3, #1
 8009c1a:	60a3      	str	r3, [r4, #8]
 8009c1c:	6823      	ldr	r3, [r4, #0]
 8009c1e:	1c5a      	adds	r2, r3, #1
 8009c20:	6022      	str	r2, [r4, #0]
 8009c22:	701e      	strb	r6, [r3, #0]
 8009c24:	6963      	ldr	r3, [r4, #20]
 8009c26:	3001      	adds	r0, #1
 8009c28:	4283      	cmp	r3, r0
 8009c2a:	d004      	beq.n	8009c36 <__swbuf_r+0x62>
 8009c2c:	89a3      	ldrh	r3, [r4, #12]
 8009c2e:	07db      	lsls	r3, r3, #31
 8009c30:	d506      	bpl.n	8009c40 <__swbuf_r+0x6c>
 8009c32:	2e0a      	cmp	r6, #10
 8009c34:	d104      	bne.n	8009c40 <__swbuf_r+0x6c>
 8009c36:	4621      	mov	r1, r4
 8009c38:	4628      	mov	r0, r5
 8009c3a:	f000 ff8b 	bl	800ab54 <_fflush_r>
 8009c3e:	b988      	cbnz	r0, 8009c64 <__swbuf_r+0x90>
 8009c40:	4638      	mov	r0, r7
 8009c42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c44:	4b0a      	ldr	r3, [pc, #40]	; (8009c70 <__swbuf_r+0x9c>)
 8009c46:	429c      	cmp	r4, r3
 8009c48:	d101      	bne.n	8009c4e <__swbuf_r+0x7a>
 8009c4a:	68ac      	ldr	r4, [r5, #8]
 8009c4c:	e7cf      	b.n	8009bee <__swbuf_r+0x1a>
 8009c4e:	4b09      	ldr	r3, [pc, #36]	; (8009c74 <__swbuf_r+0xa0>)
 8009c50:	429c      	cmp	r4, r3
 8009c52:	bf08      	it	eq
 8009c54:	68ec      	ldreq	r4, [r5, #12]
 8009c56:	e7ca      	b.n	8009bee <__swbuf_r+0x1a>
 8009c58:	4621      	mov	r1, r4
 8009c5a:	4628      	mov	r0, r5
 8009c5c:	f000 f80c 	bl	8009c78 <__swsetup_r>
 8009c60:	2800      	cmp	r0, #0
 8009c62:	d0cb      	beq.n	8009bfc <__swbuf_r+0x28>
 8009c64:	f04f 37ff 	mov.w	r7, #4294967295
 8009c68:	e7ea      	b.n	8009c40 <__swbuf_r+0x6c>
 8009c6a:	bf00      	nop
 8009c6c:	0800be0c 	.word	0x0800be0c
 8009c70:	0800be2c 	.word	0x0800be2c
 8009c74:	0800bdec 	.word	0x0800bdec

08009c78 <__swsetup_r>:
 8009c78:	4b32      	ldr	r3, [pc, #200]	; (8009d44 <__swsetup_r+0xcc>)
 8009c7a:	b570      	push	{r4, r5, r6, lr}
 8009c7c:	681d      	ldr	r5, [r3, #0]
 8009c7e:	4606      	mov	r6, r0
 8009c80:	460c      	mov	r4, r1
 8009c82:	b125      	cbz	r5, 8009c8e <__swsetup_r+0x16>
 8009c84:	69ab      	ldr	r3, [r5, #24]
 8009c86:	b913      	cbnz	r3, 8009c8e <__swsetup_r+0x16>
 8009c88:	4628      	mov	r0, r5
 8009c8a:	f000 fff7 	bl	800ac7c <__sinit>
 8009c8e:	4b2e      	ldr	r3, [pc, #184]	; (8009d48 <__swsetup_r+0xd0>)
 8009c90:	429c      	cmp	r4, r3
 8009c92:	d10f      	bne.n	8009cb4 <__swsetup_r+0x3c>
 8009c94:	686c      	ldr	r4, [r5, #4]
 8009c96:	89a3      	ldrh	r3, [r4, #12]
 8009c98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009c9c:	0719      	lsls	r1, r3, #28
 8009c9e:	d42c      	bmi.n	8009cfa <__swsetup_r+0x82>
 8009ca0:	06dd      	lsls	r5, r3, #27
 8009ca2:	d411      	bmi.n	8009cc8 <__swsetup_r+0x50>
 8009ca4:	2309      	movs	r3, #9
 8009ca6:	6033      	str	r3, [r6, #0]
 8009ca8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009cac:	81a3      	strh	r3, [r4, #12]
 8009cae:	f04f 30ff 	mov.w	r0, #4294967295
 8009cb2:	e03e      	b.n	8009d32 <__swsetup_r+0xba>
 8009cb4:	4b25      	ldr	r3, [pc, #148]	; (8009d4c <__swsetup_r+0xd4>)
 8009cb6:	429c      	cmp	r4, r3
 8009cb8:	d101      	bne.n	8009cbe <__swsetup_r+0x46>
 8009cba:	68ac      	ldr	r4, [r5, #8]
 8009cbc:	e7eb      	b.n	8009c96 <__swsetup_r+0x1e>
 8009cbe:	4b24      	ldr	r3, [pc, #144]	; (8009d50 <__swsetup_r+0xd8>)
 8009cc0:	429c      	cmp	r4, r3
 8009cc2:	bf08      	it	eq
 8009cc4:	68ec      	ldreq	r4, [r5, #12]
 8009cc6:	e7e6      	b.n	8009c96 <__swsetup_r+0x1e>
 8009cc8:	0758      	lsls	r0, r3, #29
 8009cca:	d512      	bpl.n	8009cf2 <__swsetup_r+0x7a>
 8009ccc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009cce:	b141      	cbz	r1, 8009ce2 <__swsetup_r+0x6a>
 8009cd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009cd4:	4299      	cmp	r1, r3
 8009cd6:	d002      	beq.n	8009cde <__swsetup_r+0x66>
 8009cd8:	4630      	mov	r0, r6
 8009cda:	f001 fc6f 	bl	800b5bc <_free_r>
 8009cde:	2300      	movs	r3, #0
 8009ce0:	6363      	str	r3, [r4, #52]	; 0x34
 8009ce2:	89a3      	ldrh	r3, [r4, #12]
 8009ce4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009ce8:	81a3      	strh	r3, [r4, #12]
 8009cea:	2300      	movs	r3, #0
 8009cec:	6063      	str	r3, [r4, #4]
 8009cee:	6923      	ldr	r3, [r4, #16]
 8009cf0:	6023      	str	r3, [r4, #0]
 8009cf2:	89a3      	ldrh	r3, [r4, #12]
 8009cf4:	f043 0308 	orr.w	r3, r3, #8
 8009cf8:	81a3      	strh	r3, [r4, #12]
 8009cfa:	6923      	ldr	r3, [r4, #16]
 8009cfc:	b94b      	cbnz	r3, 8009d12 <__swsetup_r+0x9a>
 8009cfe:	89a3      	ldrh	r3, [r4, #12]
 8009d00:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009d04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d08:	d003      	beq.n	8009d12 <__swsetup_r+0x9a>
 8009d0a:	4621      	mov	r1, r4
 8009d0c:	4630      	mov	r0, r6
 8009d0e:	f001 f87f 	bl	800ae10 <__smakebuf_r>
 8009d12:	89a0      	ldrh	r0, [r4, #12]
 8009d14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d18:	f010 0301 	ands.w	r3, r0, #1
 8009d1c:	d00a      	beq.n	8009d34 <__swsetup_r+0xbc>
 8009d1e:	2300      	movs	r3, #0
 8009d20:	60a3      	str	r3, [r4, #8]
 8009d22:	6963      	ldr	r3, [r4, #20]
 8009d24:	425b      	negs	r3, r3
 8009d26:	61a3      	str	r3, [r4, #24]
 8009d28:	6923      	ldr	r3, [r4, #16]
 8009d2a:	b943      	cbnz	r3, 8009d3e <__swsetup_r+0xc6>
 8009d2c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009d30:	d1ba      	bne.n	8009ca8 <__swsetup_r+0x30>
 8009d32:	bd70      	pop	{r4, r5, r6, pc}
 8009d34:	0781      	lsls	r1, r0, #30
 8009d36:	bf58      	it	pl
 8009d38:	6963      	ldrpl	r3, [r4, #20]
 8009d3a:	60a3      	str	r3, [r4, #8]
 8009d3c:	e7f4      	b.n	8009d28 <__swsetup_r+0xb0>
 8009d3e:	2000      	movs	r0, #0
 8009d40:	e7f7      	b.n	8009d32 <__swsetup_r+0xba>
 8009d42:	bf00      	nop
 8009d44:	2000003c 	.word	0x2000003c
 8009d48:	0800be0c 	.word	0x0800be0c
 8009d4c:	0800be2c 	.word	0x0800be2c
 8009d50:	0800bdec 	.word	0x0800bdec

08009d54 <quorem>:
 8009d54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d58:	6903      	ldr	r3, [r0, #16]
 8009d5a:	690c      	ldr	r4, [r1, #16]
 8009d5c:	42a3      	cmp	r3, r4
 8009d5e:	4607      	mov	r7, r0
 8009d60:	f2c0 8081 	blt.w	8009e66 <quorem+0x112>
 8009d64:	3c01      	subs	r4, #1
 8009d66:	f101 0814 	add.w	r8, r1, #20
 8009d6a:	f100 0514 	add.w	r5, r0, #20
 8009d6e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009d72:	9301      	str	r3, [sp, #4]
 8009d74:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009d78:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009d7c:	3301      	adds	r3, #1
 8009d7e:	429a      	cmp	r2, r3
 8009d80:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009d84:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009d88:	fbb2 f6f3 	udiv	r6, r2, r3
 8009d8c:	d331      	bcc.n	8009df2 <quorem+0x9e>
 8009d8e:	f04f 0e00 	mov.w	lr, #0
 8009d92:	4640      	mov	r0, r8
 8009d94:	46ac      	mov	ip, r5
 8009d96:	46f2      	mov	sl, lr
 8009d98:	f850 2b04 	ldr.w	r2, [r0], #4
 8009d9c:	b293      	uxth	r3, r2
 8009d9e:	fb06 e303 	mla	r3, r6, r3, lr
 8009da2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009da6:	b29b      	uxth	r3, r3
 8009da8:	ebaa 0303 	sub.w	r3, sl, r3
 8009dac:	0c12      	lsrs	r2, r2, #16
 8009dae:	f8dc a000 	ldr.w	sl, [ip]
 8009db2:	fb06 e202 	mla	r2, r6, r2, lr
 8009db6:	fa13 f38a 	uxtah	r3, r3, sl
 8009dba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009dbe:	fa1f fa82 	uxth.w	sl, r2
 8009dc2:	f8dc 2000 	ldr.w	r2, [ip]
 8009dc6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8009dca:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009dce:	b29b      	uxth	r3, r3
 8009dd0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009dd4:	4581      	cmp	r9, r0
 8009dd6:	f84c 3b04 	str.w	r3, [ip], #4
 8009dda:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009dde:	d2db      	bcs.n	8009d98 <quorem+0x44>
 8009de0:	f855 300b 	ldr.w	r3, [r5, fp]
 8009de4:	b92b      	cbnz	r3, 8009df2 <quorem+0x9e>
 8009de6:	9b01      	ldr	r3, [sp, #4]
 8009de8:	3b04      	subs	r3, #4
 8009dea:	429d      	cmp	r5, r3
 8009dec:	461a      	mov	r2, r3
 8009dee:	d32e      	bcc.n	8009e4e <quorem+0xfa>
 8009df0:	613c      	str	r4, [r7, #16]
 8009df2:	4638      	mov	r0, r7
 8009df4:	f001 fad2 	bl	800b39c <__mcmp>
 8009df8:	2800      	cmp	r0, #0
 8009dfa:	db24      	blt.n	8009e46 <quorem+0xf2>
 8009dfc:	3601      	adds	r6, #1
 8009dfe:	4628      	mov	r0, r5
 8009e00:	f04f 0c00 	mov.w	ip, #0
 8009e04:	f858 2b04 	ldr.w	r2, [r8], #4
 8009e08:	f8d0 e000 	ldr.w	lr, [r0]
 8009e0c:	b293      	uxth	r3, r2
 8009e0e:	ebac 0303 	sub.w	r3, ip, r3
 8009e12:	0c12      	lsrs	r2, r2, #16
 8009e14:	fa13 f38e 	uxtah	r3, r3, lr
 8009e18:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009e1c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009e20:	b29b      	uxth	r3, r3
 8009e22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009e26:	45c1      	cmp	r9, r8
 8009e28:	f840 3b04 	str.w	r3, [r0], #4
 8009e2c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009e30:	d2e8      	bcs.n	8009e04 <quorem+0xb0>
 8009e32:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009e36:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009e3a:	b922      	cbnz	r2, 8009e46 <quorem+0xf2>
 8009e3c:	3b04      	subs	r3, #4
 8009e3e:	429d      	cmp	r5, r3
 8009e40:	461a      	mov	r2, r3
 8009e42:	d30a      	bcc.n	8009e5a <quorem+0x106>
 8009e44:	613c      	str	r4, [r7, #16]
 8009e46:	4630      	mov	r0, r6
 8009e48:	b003      	add	sp, #12
 8009e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e4e:	6812      	ldr	r2, [r2, #0]
 8009e50:	3b04      	subs	r3, #4
 8009e52:	2a00      	cmp	r2, #0
 8009e54:	d1cc      	bne.n	8009df0 <quorem+0x9c>
 8009e56:	3c01      	subs	r4, #1
 8009e58:	e7c7      	b.n	8009dea <quorem+0x96>
 8009e5a:	6812      	ldr	r2, [r2, #0]
 8009e5c:	3b04      	subs	r3, #4
 8009e5e:	2a00      	cmp	r2, #0
 8009e60:	d1f0      	bne.n	8009e44 <quorem+0xf0>
 8009e62:	3c01      	subs	r4, #1
 8009e64:	e7eb      	b.n	8009e3e <quorem+0xea>
 8009e66:	2000      	movs	r0, #0
 8009e68:	e7ee      	b.n	8009e48 <quorem+0xf4>
 8009e6a:	0000      	movs	r0, r0
 8009e6c:	0000      	movs	r0, r0
	...

08009e70 <_dtoa_r>:
 8009e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e74:	ed2d 8b02 	vpush	{d8}
 8009e78:	ec57 6b10 	vmov	r6, r7, d0
 8009e7c:	b095      	sub	sp, #84	; 0x54
 8009e7e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009e80:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009e84:	9105      	str	r1, [sp, #20]
 8009e86:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8009e8a:	4604      	mov	r4, r0
 8009e8c:	9209      	str	r2, [sp, #36]	; 0x24
 8009e8e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009e90:	b975      	cbnz	r5, 8009eb0 <_dtoa_r+0x40>
 8009e92:	2010      	movs	r0, #16
 8009e94:	f000 fffc 	bl	800ae90 <malloc>
 8009e98:	4602      	mov	r2, r0
 8009e9a:	6260      	str	r0, [r4, #36]	; 0x24
 8009e9c:	b920      	cbnz	r0, 8009ea8 <_dtoa_r+0x38>
 8009e9e:	4bb2      	ldr	r3, [pc, #712]	; (800a168 <_dtoa_r+0x2f8>)
 8009ea0:	21ea      	movs	r1, #234	; 0xea
 8009ea2:	48b2      	ldr	r0, [pc, #712]	; (800a16c <_dtoa_r+0x2fc>)
 8009ea4:	f001 fdf4 	bl	800ba90 <__assert_func>
 8009ea8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009eac:	6005      	str	r5, [r0, #0]
 8009eae:	60c5      	str	r5, [r0, #12]
 8009eb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009eb2:	6819      	ldr	r1, [r3, #0]
 8009eb4:	b151      	cbz	r1, 8009ecc <_dtoa_r+0x5c>
 8009eb6:	685a      	ldr	r2, [r3, #4]
 8009eb8:	604a      	str	r2, [r1, #4]
 8009eba:	2301      	movs	r3, #1
 8009ebc:	4093      	lsls	r3, r2
 8009ebe:	608b      	str	r3, [r1, #8]
 8009ec0:	4620      	mov	r0, r4
 8009ec2:	f001 f82d 	bl	800af20 <_Bfree>
 8009ec6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009ec8:	2200      	movs	r2, #0
 8009eca:	601a      	str	r2, [r3, #0]
 8009ecc:	1e3b      	subs	r3, r7, #0
 8009ece:	bfb9      	ittee	lt
 8009ed0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009ed4:	9303      	strlt	r3, [sp, #12]
 8009ed6:	2300      	movge	r3, #0
 8009ed8:	f8c8 3000 	strge.w	r3, [r8]
 8009edc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8009ee0:	4ba3      	ldr	r3, [pc, #652]	; (800a170 <_dtoa_r+0x300>)
 8009ee2:	bfbc      	itt	lt
 8009ee4:	2201      	movlt	r2, #1
 8009ee6:	f8c8 2000 	strlt.w	r2, [r8]
 8009eea:	ea33 0309 	bics.w	r3, r3, r9
 8009eee:	d11b      	bne.n	8009f28 <_dtoa_r+0xb8>
 8009ef0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009ef2:	f242 730f 	movw	r3, #9999	; 0x270f
 8009ef6:	6013      	str	r3, [r2, #0]
 8009ef8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009efc:	4333      	orrs	r3, r6
 8009efe:	f000 857a 	beq.w	800a9f6 <_dtoa_r+0xb86>
 8009f02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009f04:	b963      	cbnz	r3, 8009f20 <_dtoa_r+0xb0>
 8009f06:	4b9b      	ldr	r3, [pc, #620]	; (800a174 <_dtoa_r+0x304>)
 8009f08:	e024      	b.n	8009f54 <_dtoa_r+0xe4>
 8009f0a:	4b9b      	ldr	r3, [pc, #620]	; (800a178 <_dtoa_r+0x308>)
 8009f0c:	9300      	str	r3, [sp, #0]
 8009f0e:	3308      	adds	r3, #8
 8009f10:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009f12:	6013      	str	r3, [r2, #0]
 8009f14:	9800      	ldr	r0, [sp, #0]
 8009f16:	b015      	add	sp, #84	; 0x54
 8009f18:	ecbd 8b02 	vpop	{d8}
 8009f1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f20:	4b94      	ldr	r3, [pc, #592]	; (800a174 <_dtoa_r+0x304>)
 8009f22:	9300      	str	r3, [sp, #0]
 8009f24:	3303      	adds	r3, #3
 8009f26:	e7f3      	b.n	8009f10 <_dtoa_r+0xa0>
 8009f28:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	ec51 0b17 	vmov	r0, r1, d7
 8009f32:	2300      	movs	r3, #0
 8009f34:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8009f38:	f7f6 fdc6 	bl	8000ac8 <__aeabi_dcmpeq>
 8009f3c:	4680      	mov	r8, r0
 8009f3e:	b158      	cbz	r0, 8009f58 <_dtoa_r+0xe8>
 8009f40:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009f42:	2301      	movs	r3, #1
 8009f44:	6013      	str	r3, [r2, #0]
 8009f46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	f000 8551 	beq.w	800a9f0 <_dtoa_r+0xb80>
 8009f4e:	488b      	ldr	r0, [pc, #556]	; (800a17c <_dtoa_r+0x30c>)
 8009f50:	6018      	str	r0, [r3, #0]
 8009f52:	1e43      	subs	r3, r0, #1
 8009f54:	9300      	str	r3, [sp, #0]
 8009f56:	e7dd      	b.n	8009f14 <_dtoa_r+0xa4>
 8009f58:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8009f5c:	aa12      	add	r2, sp, #72	; 0x48
 8009f5e:	a913      	add	r1, sp, #76	; 0x4c
 8009f60:	4620      	mov	r0, r4
 8009f62:	f001 fabf 	bl	800b4e4 <__d2b>
 8009f66:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009f6a:	4683      	mov	fp, r0
 8009f6c:	2d00      	cmp	r5, #0
 8009f6e:	d07c      	beq.n	800a06a <_dtoa_r+0x1fa>
 8009f70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f72:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8009f76:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009f7a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8009f7e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009f82:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009f86:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009f8a:	4b7d      	ldr	r3, [pc, #500]	; (800a180 <_dtoa_r+0x310>)
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	4630      	mov	r0, r6
 8009f90:	4639      	mov	r1, r7
 8009f92:	f7f6 f979 	bl	8000288 <__aeabi_dsub>
 8009f96:	a36e      	add	r3, pc, #440	; (adr r3, 800a150 <_dtoa_r+0x2e0>)
 8009f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f9c:	f7f6 fb2c 	bl	80005f8 <__aeabi_dmul>
 8009fa0:	a36d      	add	r3, pc, #436	; (adr r3, 800a158 <_dtoa_r+0x2e8>)
 8009fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fa6:	f7f6 f971 	bl	800028c <__adddf3>
 8009faa:	4606      	mov	r6, r0
 8009fac:	4628      	mov	r0, r5
 8009fae:	460f      	mov	r7, r1
 8009fb0:	f7f6 fab8 	bl	8000524 <__aeabi_i2d>
 8009fb4:	a36a      	add	r3, pc, #424	; (adr r3, 800a160 <_dtoa_r+0x2f0>)
 8009fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fba:	f7f6 fb1d 	bl	80005f8 <__aeabi_dmul>
 8009fbe:	4602      	mov	r2, r0
 8009fc0:	460b      	mov	r3, r1
 8009fc2:	4630      	mov	r0, r6
 8009fc4:	4639      	mov	r1, r7
 8009fc6:	f7f6 f961 	bl	800028c <__adddf3>
 8009fca:	4606      	mov	r6, r0
 8009fcc:	460f      	mov	r7, r1
 8009fce:	f7f6 fdc3 	bl	8000b58 <__aeabi_d2iz>
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	4682      	mov	sl, r0
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	4630      	mov	r0, r6
 8009fda:	4639      	mov	r1, r7
 8009fdc:	f7f6 fd7e 	bl	8000adc <__aeabi_dcmplt>
 8009fe0:	b148      	cbz	r0, 8009ff6 <_dtoa_r+0x186>
 8009fe2:	4650      	mov	r0, sl
 8009fe4:	f7f6 fa9e 	bl	8000524 <__aeabi_i2d>
 8009fe8:	4632      	mov	r2, r6
 8009fea:	463b      	mov	r3, r7
 8009fec:	f7f6 fd6c 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ff0:	b908      	cbnz	r0, 8009ff6 <_dtoa_r+0x186>
 8009ff2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009ff6:	f1ba 0f16 	cmp.w	sl, #22
 8009ffa:	d854      	bhi.n	800a0a6 <_dtoa_r+0x236>
 8009ffc:	4b61      	ldr	r3, [pc, #388]	; (800a184 <_dtoa_r+0x314>)
 8009ffe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a002:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a006:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a00a:	f7f6 fd67 	bl	8000adc <__aeabi_dcmplt>
 800a00e:	2800      	cmp	r0, #0
 800a010:	d04b      	beq.n	800a0aa <_dtoa_r+0x23a>
 800a012:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a016:	2300      	movs	r3, #0
 800a018:	930e      	str	r3, [sp, #56]	; 0x38
 800a01a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a01c:	1b5d      	subs	r5, r3, r5
 800a01e:	1e6b      	subs	r3, r5, #1
 800a020:	9304      	str	r3, [sp, #16]
 800a022:	bf43      	ittte	mi
 800a024:	2300      	movmi	r3, #0
 800a026:	f1c5 0801 	rsbmi	r8, r5, #1
 800a02a:	9304      	strmi	r3, [sp, #16]
 800a02c:	f04f 0800 	movpl.w	r8, #0
 800a030:	f1ba 0f00 	cmp.w	sl, #0
 800a034:	db3b      	blt.n	800a0ae <_dtoa_r+0x23e>
 800a036:	9b04      	ldr	r3, [sp, #16]
 800a038:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800a03c:	4453      	add	r3, sl
 800a03e:	9304      	str	r3, [sp, #16]
 800a040:	2300      	movs	r3, #0
 800a042:	9306      	str	r3, [sp, #24]
 800a044:	9b05      	ldr	r3, [sp, #20]
 800a046:	2b09      	cmp	r3, #9
 800a048:	d869      	bhi.n	800a11e <_dtoa_r+0x2ae>
 800a04a:	2b05      	cmp	r3, #5
 800a04c:	bfc4      	itt	gt
 800a04e:	3b04      	subgt	r3, #4
 800a050:	9305      	strgt	r3, [sp, #20]
 800a052:	9b05      	ldr	r3, [sp, #20]
 800a054:	f1a3 0302 	sub.w	r3, r3, #2
 800a058:	bfcc      	ite	gt
 800a05a:	2500      	movgt	r5, #0
 800a05c:	2501      	movle	r5, #1
 800a05e:	2b03      	cmp	r3, #3
 800a060:	d869      	bhi.n	800a136 <_dtoa_r+0x2c6>
 800a062:	e8df f003 	tbb	[pc, r3]
 800a066:	4e2c      	.short	0x4e2c
 800a068:	5a4c      	.short	0x5a4c
 800a06a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800a06e:	441d      	add	r5, r3
 800a070:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a074:	2b20      	cmp	r3, #32
 800a076:	bfc1      	itttt	gt
 800a078:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a07c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a080:	fa09 f303 	lslgt.w	r3, r9, r3
 800a084:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a088:	bfda      	itte	le
 800a08a:	f1c3 0320 	rsble	r3, r3, #32
 800a08e:	fa06 f003 	lslle.w	r0, r6, r3
 800a092:	4318      	orrgt	r0, r3
 800a094:	f7f6 fa36 	bl	8000504 <__aeabi_ui2d>
 800a098:	2301      	movs	r3, #1
 800a09a:	4606      	mov	r6, r0
 800a09c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a0a0:	3d01      	subs	r5, #1
 800a0a2:	9310      	str	r3, [sp, #64]	; 0x40
 800a0a4:	e771      	b.n	8009f8a <_dtoa_r+0x11a>
 800a0a6:	2301      	movs	r3, #1
 800a0a8:	e7b6      	b.n	800a018 <_dtoa_r+0x1a8>
 800a0aa:	900e      	str	r0, [sp, #56]	; 0x38
 800a0ac:	e7b5      	b.n	800a01a <_dtoa_r+0x1aa>
 800a0ae:	f1ca 0300 	rsb	r3, sl, #0
 800a0b2:	9306      	str	r3, [sp, #24]
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	eba8 080a 	sub.w	r8, r8, sl
 800a0ba:	930d      	str	r3, [sp, #52]	; 0x34
 800a0bc:	e7c2      	b.n	800a044 <_dtoa_r+0x1d4>
 800a0be:	2300      	movs	r3, #0
 800a0c0:	9308      	str	r3, [sp, #32]
 800a0c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	dc39      	bgt.n	800a13c <_dtoa_r+0x2cc>
 800a0c8:	f04f 0901 	mov.w	r9, #1
 800a0cc:	f8cd 9004 	str.w	r9, [sp, #4]
 800a0d0:	464b      	mov	r3, r9
 800a0d2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a0d6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a0d8:	2200      	movs	r2, #0
 800a0da:	6042      	str	r2, [r0, #4]
 800a0dc:	2204      	movs	r2, #4
 800a0de:	f102 0614 	add.w	r6, r2, #20
 800a0e2:	429e      	cmp	r6, r3
 800a0e4:	6841      	ldr	r1, [r0, #4]
 800a0e6:	d92f      	bls.n	800a148 <_dtoa_r+0x2d8>
 800a0e8:	4620      	mov	r0, r4
 800a0ea:	f000 fed9 	bl	800aea0 <_Balloc>
 800a0ee:	9000      	str	r0, [sp, #0]
 800a0f0:	2800      	cmp	r0, #0
 800a0f2:	d14b      	bne.n	800a18c <_dtoa_r+0x31c>
 800a0f4:	4b24      	ldr	r3, [pc, #144]	; (800a188 <_dtoa_r+0x318>)
 800a0f6:	4602      	mov	r2, r0
 800a0f8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a0fc:	e6d1      	b.n	8009ea2 <_dtoa_r+0x32>
 800a0fe:	2301      	movs	r3, #1
 800a100:	e7de      	b.n	800a0c0 <_dtoa_r+0x250>
 800a102:	2300      	movs	r3, #0
 800a104:	9308      	str	r3, [sp, #32]
 800a106:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a108:	eb0a 0903 	add.w	r9, sl, r3
 800a10c:	f109 0301 	add.w	r3, r9, #1
 800a110:	2b01      	cmp	r3, #1
 800a112:	9301      	str	r3, [sp, #4]
 800a114:	bfb8      	it	lt
 800a116:	2301      	movlt	r3, #1
 800a118:	e7dd      	b.n	800a0d6 <_dtoa_r+0x266>
 800a11a:	2301      	movs	r3, #1
 800a11c:	e7f2      	b.n	800a104 <_dtoa_r+0x294>
 800a11e:	2501      	movs	r5, #1
 800a120:	2300      	movs	r3, #0
 800a122:	9305      	str	r3, [sp, #20]
 800a124:	9508      	str	r5, [sp, #32]
 800a126:	f04f 39ff 	mov.w	r9, #4294967295
 800a12a:	2200      	movs	r2, #0
 800a12c:	f8cd 9004 	str.w	r9, [sp, #4]
 800a130:	2312      	movs	r3, #18
 800a132:	9209      	str	r2, [sp, #36]	; 0x24
 800a134:	e7cf      	b.n	800a0d6 <_dtoa_r+0x266>
 800a136:	2301      	movs	r3, #1
 800a138:	9308      	str	r3, [sp, #32]
 800a13a:	e7f4      	b.n	800a126 <_dtoa_r+0x2b6>
 800a13c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800a140:	f8cd 9004 	str.w	r9, [sp, #4]
 800a144:	464b      	mov	r3, r9
 800a146:	e7c6      	b.n	800a0d6 <_dtoa_r+0x266>
 800a148:	3101      	adds	r1, #1
 800a14a:	6041      	str	r1, [r0, #4]
 800a14c:	0052      	lsls	r2, r2, #1
 800a14e:	e7c6      	b.n	800a0de <_dtoa_r+0x26e>
 800a150:	636f4361 	.word	0x636f4361
 800a154:	3fd287a7 	.word	0x3fd287a7
 800a158:	8b60c8b3 	.word	0x8b60c8b3
 800a15c:	3fc68a28 	.word	0x3fc68a28
 800a160:	509f79fb 	.word	0x509f79fb
 800a164:	3fd34413 	.word	0x3fd34413
 800a168:	0800bd65 	.word	0x0800bd65
 800a16c:	0800bd7c 	.word	0x0800bd7c
 800a170:	7ff00000 	.word	0x7ff00000
 800a174:	0800bd61 	.word	0x0800bd61
 800a178:	0800bd58 	.word	0x0800bd58
 800a17c:	0800bd35 	.word	0x0800bd35
 800a180:	3ff80000 	.word	0x3ff80000
 800a184:	0800bed8 	.word	0x0800bed8
 800a188:	0800bddb 	.word	0x0800bddb
 800a18c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a18e:	9a00      	ldr	r2, [sp, #0]
 800a190:	601a      	str	r2, [r3, #0]
 800a192:	9b01      	ldr	r3, [sp, #4]
 800a194:	2b0e      	cmp	r3, #14
 800a196:	f200 80ad 	bhi.w	800a2f4 <_dtoa_r+0x484>
 800a19a:	2d00      	cmp	r5, #0
 800a19c:	f000 80aa 	beq.w	800a2f4 <_dtoa_r+0x484>
 800a1a0:	f1ba 0f00 	cmp.w	sl, #0
 800a1a4:	dd36      	ble.n	800a214 <_dtoa_r+0x3a4>
 800a1a6:	4ac3      	ldr	r2, [pc, #780]	; (800a4b4 <_dtoa_r+0x644>)
 800a1a8:	f00a 030f 	and.w	r3, sl, #15
 800a1ac:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a1b0:	ed93 7b00 	vldr	d7, [r3]
 800a1b4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800a1b8:	ea4f 172a 	mov.w	r7, sl, asr #4
 800a1bc:	eeb0 8a47 	vmov.f32	s16, s14
 800a1c0:	eef0 8a67 	vmov.f32	s17, s15
 800a1c4:	d016      	beq.n	800a1f4 <_dtoa_r+0x384>
 800a1c6:	4bbc      	ldr	r3, [pc, #752]	; (800a4b8 <_dtoa_r+0x648>)
 800a1c8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a1cc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a1d0:	f7f6 fb3c 	bl	800084c <__aeabi_ddiv>
 800a1d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a1d8:	f007 070f 	and.w	r7, r7, #15
 800a1dc:	2503      	movs	r5, #3
 800a1de:	4eb6      	ldr	r6, [pc, #728]	; (800a4b8 <_dtoa_r+0x648>)
 800a1e0:	b957      	cbnz	r7, 800a1f8 <_dtoa_r+0x388>
 800a1e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a1e6:	ec53 2b18 	vmov	r2, r3, d8
 800a1ea:	f7f6 fb2f 	bl	800084c <__aeabi_ddiv>
 800a1ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a1f2:	e029      	b.n	800a248 <_dtoa_r+0x3d8>
 800a1f4:	2502      	movs	r5, #2
 800a1f6:	e7f2      	b.n	800a1de <_dtoa_r+0x36e>
 800a1f8:	07f9      	lsls	r1, r7, #31
 800a1fa:	d508      	bpl.n	800a20e <_dtoa_r+0x39e>
 800a1fc:	ec51 0b18 	vmov	r0, r1, d8
 800a200:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a204:	f7f6 f9f8 	bl	80005f8 <__aeabi_dmul>
 800a208:	ec41 0b18 	vmov	d8, r0, r1
 800a20c:	3501      	adds	r5, #1
 800a20e:	107f      	asrs	r7, r7, #1
 800a210:	3608      	adds	r6, #8
 800a212:	e7e5      	b.n	800a1e0 <_dtoa_r+0x370>
 800a214:	f000 80a6 	beq.w	800a364 <_dtoa_r+0x4f4>
 800a218:	f1ca 0600 	rsb	r6, sl, #0
 800a21c:	4ba5      	ldr	r3, [pc, #660]	; (800a4b4 <_dtoa_r+0x644>)
 800a21e:	4fa6      	ldr	r7, [pc, #664]	; (800a4b8 <_dtoa_r+0x648>)
 800a220:	f006 020f 	and.w	r2, r6, #15
 800a224:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a22c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a230:	f7f6 f9e2 	bl	80005f8 <__aeabi_dmul>
 800a234:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a238:	1136      	asrs	r6, r6, #4
 800a23a:	2300      	movs	r3, #0
 800a23c:	2502      	movs	r5, #2
 800a23e:	2e00      	cmp	r6, #0
 800a240:	f040 8085 	bne.w	800a34e <_dtoa_r+0x4de>
 800a244:	2b00      	cmp	r3, #0
 800a246:	d1d2      	bne.n	800a1ee <_dtoa_r+0x37e>
 800a248:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	f000 808c 	beq.w	800a368 <_dtoa_r+0x4f8>
 800a250:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a254:	4b99      	ldr	r3, [pc, #612]	; (800a4bc <_dtoa_r+0x64c>)
 800a256:	2200      	movs	r2, #0
 800a258:	4630      	mov	r0, r6
 800a25a:	4639      	mov	r1, r7
 800a25c:	f7f6 fc3e 	bl	8000adc <__aeabi_dcmplt>
 800a260:	2800      	cmp	r0, #0
 800a262:	f000 8081 	beq.w	800a368 <_dtoa_r+0x4f8>
 800a266:	9b01      	ldr	r3, [sp, #4]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d07d      	beq.n	800a368 <_dtoa_r+0x4f8>
 800a26c:	f1b9 0f00 	cmp.w	r9, #0
 800a270:	dd3c      	ble.n	800a2ec <_dtoa_r+0x47c>
 800a272:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a276:	9307      	str	r3, [sp, #28]
 800a278:	2200      	movs	r2, #0
 800a27a:	4b91      	ldr	r3, [pc, #580]	; (800a4c0 <_dtoa_r+0x650>)
 800a27c:	4630      	mov	r0, r6
 800a27e:	4639      	mov	r1, r7
 800a280:	f7f6 f9ba 	bl	80005f8 <__aeabi_dmul>
 800a284:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a288:	3501      	adds	r5, #1
 800a28a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800a28e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a292:	4628      	mov	r0, r5
 800a294:	f7f6 f946 	bl	8000524 <__aeabi_i2d>
 800a298:	4632      	mov	r2, r6
 800a29a:	463b      	mov	r3, r7
 800a29c:	f7f6 f9ac 	bl	80005f8 <__aeabi_dmul>
 800a2a0:	4b88      	ldr	r3, [pc, #544]	; (800a4c4 <_dtoa_r+0x654>)
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	f7f5 fff2 	bl	800028c <__adddf3>
 800a2a8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a2ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a2b0:	9303      	str	r3, [sp, #12]
 800a2b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d15c      	bne.n	800a372 <_dtoa_r+0x502>
 800a2b8:	4b83      	ldr	r3, [pc, #524]	; (800a4c8 <_dtoa_r+0x658>)
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	4630      	mov	r0, r6
 800a2be:	4639      	mov	r1, r7
 800a2c0:	f7f5 ffe2 	bl	8000288 <__aeabi_dsub>
 800a2c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a2c8:	4606      	mov	r6, r0
 800a2ca:	460f      	mov	r7, r1
 800a2cc:	f7f6 fc24 	bl	8000b18 <__aeabi_dcmpgt>
 800a2d0:	2800      	cmp	r0, #0
 800a2d2:	f040 8296 	bne.w	800a802 <_dtoa_r+0x992>
 800a2d6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a2da:	4630      	mov	r0, r6
 800a2dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a2e0:	4639      	mov	r1, r7
 800a2e2:	f7f6 fbfb 	bl	8000adc <__aeabi_dcmplt>
 800a2e6:	2800      	cmp	r0, #0
 800a2e8:	f040 8288 	bne.w	800a7fc <_dtoa_r+0x98c>
 800a2ec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a2f0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a2f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	f2c0 8158 	blt.w	800a5ac <_dtoa_r+0x73c>
 800a2fc:	f1ba 0f0e 	cmp.w	sl, #14
 800a300:	f300 8154 	bgt.w	800a5ac <_dtoa_r+0x73c>
 800a304:	4b6b      	ldr	r3, [pc, #428]	; (800a4b4 <_dtoa_r+0x644>)
 800a306:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a30a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a30e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a310:	2b00      	cmp	r3, #0
 800a312:	f280 80e3 	bge.w	800a4dc <_dtoa_r+0x66c>
 800a316:	9b01      	ldr	r3, [sp, #4]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	f300 80df 	bgt.w	800a4dc <_dtoa_r+0x66c>
 800a31e:	f040 826d 	bne.w	800a7fc <_dtoa_r+0x98c>
 800a322:	4b69      	ldr	r3, [pc, #420]	; (800a4c8 <_dtoa_r+0x658>)
 800a324:	2200      	movs	r2, #0
 800a326:	4640      	mov	r0, r8
 800a328:	4649      	mov	r1, r9
 800a32a:	f7f6 f965 	bl	80005f8 <__aeabi_dmul>
 800a32e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a332:	f7f6 fbe7 	bl	8000b04 <__aeabi_dcmpge>
 800a336:	9e01      	ldr	r6, [sp, #4]
 800a338:	4637      	mov	r7, r6
 800a33a:	2800      	cmp	r0, #0
 800a33c:	f040 8243 	bne.w	800a7c6 <_dtoa_r+0x956>
 800a340:	9d00      	ldr	r5, [sp, #0]
 800a342:	2331      	movs	r3, #49	; 0x31
 800a344:	f805 3b01 	strb.w	r3, [r5], #1
 800a348:	f10a 0a01 	add.w	sl, sl, #1
 800a34c:	e23f      	b.n	800a7ce <_dtoa_r+0x95e>
 800a34e:	07f2      	lsls	r2, r6, #31
 800a350:	d505      	bpl.n	800a35e <_dtoa_r+0x4ee>
 800a352:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a356:	f7f6 f94f 	bl	80005f8 <__aeabi_dmul>
 800a35a:	3501      	adds	r5, #1
 800a35c:	2301      	movs	r3, #1
 800a35e:	1076      	asrs	r6, r6, #1
 800a360:	3708      	adds	r7, #8
 800a362:	e76c      	b.n	800a23e <_dtoa_r+0x3ce>
 800a364:	2502      	movs	r5, #2
 800a366:	e76f      	b.n	800a248 <_dtoa_r+0x3d8>
 800a368:	9b01      	ldr	r3, [sp, #4]
 800a36a:	f8cd a01c 	str.w	sl, [sp, #28]
 800a36e:	930c      	str	r3, [sp, #48]	; 0x30
 800a370:	e78d      	b.n	800a28e <_dtoa_r+0x41e>
 800a372:	9900      	ldr	r1, [sp, #0]
 800a374:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a376:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a378:	4b4e      	ldr	r3, [pc, #312]	; (800a4b4 <_dtoa_r+0x644>)
 800a37a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a37e:	4401      	add	r1, r0
 800a380:	9102      	str	r1, [sp, #8]
 800a382:	9908      	ldr	r1, [sp, #32]
 800a384:	eeb0 8a47 	vmov.f32	s16, s14
 800a388:	eef0 8a67 	vmov.f32	s17, s15
 800a38c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a390:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a394:	2900      	cmp	r1, #0
 800a396:	d045      	beq.n	800a424 <_dtoa_r+0x5b4>
 800a398:	494c      	ldr	r1, [pc, #304]	; (800a4cc <_dtoa_r+0x65c>)
 800a39a:	2000      	movs	r0, #0
 800a39c:	f7f6 fa56 	bl	800084c <__aeabi_ddiv>
 800a3a0:	ec53 2b18 	vmov	r2, r3, d8
 800a3a4:	f7f5 ff70 	bl	8000288 <__aeabi_dsub>
 800a3a8:	9d00      	ldr	r5, [sp, #0]
 800a3aa:	ec41 0b18 	vmov	d8, r0, r1
 800a3ae:	4639      	mov	r1, r7
 800a3b0:	4630      	mov	r0, r6
 800a3b2:	f7f6 fbd1 	bl	8000b58 <__aeabi_d2iz>
 800a3b6:	900c      	str	r0, [sp, #48]	; 0x30
 800a3b8:	f7f6 f8b4 	bl	8000524 <__aeabi_i2d>
 800a3bc:	4602      	mov	r2, r0
 800a3be:	460b      	mov	r3, r1
 800a3c0:	4630      	mov	r0, r6
 800a3c2:	4639      	mov	r1, r7
 800a3c4:	f7f5 ff60 	bl	8000288 <__aeabi_dsub>
 800a3c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a3ca:	3330      	adds	r3, #48	; 0x30
 800a3cc:	f805 3b01 	strb.w	r3, [r5], #1
 800a3d0:	ec53 2b18 	vmov	r2, r3, d8
 800a3d4:	4606      	mov	r6, r0
 800a3d6:	460f      	mov	r7, r1
 800a3d8:	f7f6 fb80 	bl	8000adc <__aeabi_dcmplt>
 800a3dc:	2800      	cmp	r0, #0
 800a3de:	d165      	bne.n	800a4ac <_dtoa_r+0x63c>
 800a3e0:	4632      	mov	r2, r6
 800a3e2:	463b      	mov	r3, r7
 800a3e4:	4935      	ldr	r1, [pc, #212]	; (800a4bc <_dtoa_r+0x64c>)
 800a3e6:	2000      	movs	r0, #0
 800a3e8:	f7f5 ff4e 	bl	8000288 <__aeabi_dsub>
 800a3ec:	ec53 2b18 	vmov	r2, r3, d8
 800a3f0:	f7f6 fb74 	bl	8000adc <__aeabi_dcmplt>
 800a3f4:	2800      	cmp	r0, #0
 800a3f6:	f040 80b9 	bne.w	800a56c <_dtoa_r+0x6fc>
 800a3fa:	9b02      	ldr	r3, [sp, #8]
 800a3fc:	429d      	cmp	r5, r3
 800a3fe:	f43f af75 	beq.w	800a2ec <_dtoa_r+0x47c>
 800a402:	4b2f      	ldr	r3, [pc, #188]	; (800a4c0 <_dtoa_r+0x650>)
 800a404:	ec51 0b18 	vmov	r0, r1, d8
 800a408:	2200      	movs	r2, #0
 800a40a:	f7f6 f8f5 	bl	80005f8 <__aeabi_dmul>
 800a40e:	4b2c      	ldr	r3, [pc, #176]	; (800a4c0 <_dtoa_r+0x650>)
 800a410:	ec41 0b18 	vmov	d8, r0, r1
 800a414:	2200      	movs	r2, #0
 800a416:	4630      	mov	r0, r6
 800a418:	4639      	mov	r1, r7
 800a41a:	f7f6 f8ed 	bl	80005f8 <__aeabi_dmul>
 800a41e:	4606      	mov	r6, r0
 800a420:	460f      	mov	r7, r1
 800a422:	e7c4      	b.n	800a3ae <_dtoa_r+0x53e>
 800a424:	ec51 0b17 	vmov	r0, r1, d7
 800a428:	f7f6 f8e6 	bl	80005f8 <__aeabi_dmul>
 800a42c:	9b02      	ldr	r3, [sp, #8]
 800a42e:	9d00      	ldr	r5, [sp, #0]
 800a430:	930c      	str	r3, [sp, #48]	; 0x30
 800a432:	ec41 0b18 	vmov	d8, r0, r1
 800a436:	4639      	mov	r1, r7
 800a438:	4630      	mov	r0, r6
 800a43a:	f7f6 fb8d 	bl	8000b58 <__aeabi_d2iz>
 800a43e:	9011      	str	r0, [sp, #68]	; 0x44
 800a440:	f7f6 f870 	bl	8000524 <__aeabi_i2d>
 800a444:	4602      	mov	r2, r0
 800a446:	460b      	mov	r3, r1
 800a448:	4630      	mov	r0, r6
 800a44a:	4639      	mov	r1, r7
 800a44c:	f7f5 ff1c 	bl	8000288 <__aeabi_dsub>
 800a450:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a452:	3330      	adds	r3, #48	; 0x30
 800a454:	f805 3b01 	strb.w	r3, [r5], #1
 800a458:	9b02      	ldr	r3, [sp, #8]
 800a45a:	429d      	cmp	r5, r3
 800a45c:	4606      	mov	r6, r0
 800a45e:	460f      	mov	r7, r1
 800a460:	f04f 0200 	mov.w	r2, #0
 800a464:	d134      	bne.n	800a4d0 <_dtoa_r+0x660>
 800a466:	4b19      	ldr	r3, [pc, #100]	; (800a4cc <_dtoa_r+0x65c>)
 800a468:	ec51 0b18 	vmov	r0, r1, d8
 800a46c:	f7f5 ff0e 	bl	800028c <__adddf3>
 800a470:	4602      	mov	r2, r0
 800a472:	460b      	mov	r3, r1
 800a474:	4630      	mov	r0, r6
 800a476:	4639      	mov	r1, r7
 800a478:	f7f6 fb4e 	bl	8000b18 <__aeabi_dcmpgt>
 800a47c:	2800      	cmp	r0, #0
 800a47e:	d175      	bne.n	800a56c <_dtoa_r+0x6fc>
 800a480:	ec53 2b18 	vmov	r2, r3, d8
 800a484:	4911      	ldr	r1, [pc, #68]	; (800a4cc <_dtoa_r+0x65c>)
 800a486:	2000      	movs	r0, #0
 800a488:	f7f5 fefe 	bl	8000288 <__aeabi_dsub>
 800a48c:	4602      	mov	r2, r0
 800a48e:	460b      	mov	r3, r1
 800a490:	4630      	mov	r0, r6
 800a492:	4639      	mov	r1, r7
 800a494:	f7f6 fb22 	bl	8000adc <__aeabi_dcmplt>
 800a498:	2800      	cmp	r0, #0
 800a49a:	f43f af27 	beq.w	800a2ec <_dtoa_r+0x47c>
 800a49e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a4a0:	1e6b      	subs	r3, r5, #1
 800a4a2:	930c      	str	r3, [sp, #48]	; 0x30
 800a4a4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a4a8:	2b30      	cmp	r3, #48	; 0x30
 800a4aa:	d0f8      	beq.n	800a49e <_dtoa_r+0x62e>
 800a4ac:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a4b0:	e04a      	b.n	800a548 <_dtoa_r+0x6d8>
 800a4b2:	bf00      	nop
 800a4b4:	0800bed8 	.word	0x0800bed8
 800a4b8:	0800beb0 	.word	0x0800beb0
 800a4bc:	3ff00000 	.word	0x3ff00000
 800a4c0:	40240000 	.word	0x40240000
 800a4c4:	401c0000 	.word	0x401c0000
 800a4c8:	40140000 	.word	0x40140000
 800a4cc:	3fe00000 	.word	0x3fe00000
 800a4d0:	4baf      	ldr	r3, [pc, #700]	; (800a790 <_dtoa_r+0x920>)
 800a4d2:	f7f6 f891 	bl	80005f8 <__aeabi_dmul>
 800a4d6:	4606      	mov	r6, r0
 800a4d8:	460f      	mov	r7, r1
 800a4da:	e7ac      	b.n	800a436 <_dtoa_r+0x5c6>
 800a4dc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a4e0:	9d00      	ldr	r5, [sp, #0]
 800a4e2:	4642      	mov	r2, r8
 800a4e4:	464b      	mov	r3, r9
 800a4e6:	4630      	mov	r0, r6
 800a4e8:	4639      	mov	r1, r7
 800a4ea:	f7f6 f9af 	bl	800084c <__aeabi_ddiv>
 800a4ee:	f7f6 fb33 	bl	8000b58 <__aeabi_d2iz>
 800a4f2:	9002      	str	r0, [sp, #8]
 800a4f4:	f7f6 f816 	bl	8000524 <__aeabi_i2d>
 800a4f8:	4642      	mov	r2, r8
 800a4fa:	464b      	mov	r3, r9
 800a4fc:	f7f6 f87c 	bl	80005f8 <__aeabi_dmul>
 800a500:	4602      	mov	r2, r0
 800a502:	460b      	mov	r3, r1
 800a504:	4630      	mov	r0, r6
 800a506:	4639      	mov	r1, r7
 800a508:	f7f5 febe 	bl	8000288 <__aeabi_dsub>
 800a50c:	9e02      	ldr	r6, [sp, #8]
 800a50e:	9f01      	ldr	r7, [sp, #4]
 800a510:	3630      	adds	r6, #48	; 0x30
 800a512:	f805 6b01 	strb.w	r6, [r5], #1
 800a516:	9e00      	ldr	r6, [sp, #0]
 800a518:	1bae      	subs	r6, r5, r6
 800a51a:	42b7      	cmp	r7, r6
 800a51c:	4602      	mov	r2, r0
 800a51e:	460b      	mov	r3, r1
 800a520:	d137      	bne.n	800a592 <_dtoa_r+0x722>
 800a522:	f7f5 feb3 	bl	800028c <__adddf3>
 800a526:	4642      	mov	r2, r8
 800a528:	464b      	mov	r3, r9
 800a52a:	4606      	mov	r6, r0
 800a52c:	460f      	mov	r7, r1
 800a52e:	f7f6 faf3 	bl	8000b18 <__aeabi_dcmpgt>
 800a532:	b9c8      	cbnz	r0, 800a568 <_dtoa_r+0x6f8>
 800a534:	4642      	mov	r2, r8
 800a536:	464b      	mov	r3, r9
 800a538:	4630      	mov	r0, r6
 800a53a:	4639      	mov	r1, r7
 800a53c:	f7f6 fac4 	bl	8000ac8 <__aeabi_dcmpeq>
 800a540:	b110      	cbz	r0, 800a548 <_dtoa_r+0x6d8>
 800a542:	9b02      	ldr	r3, [sp, #8]
 800a544:	07d9      	lsls	r1, r3, #31
 800a546:	d40f      	bmi.n	800a568 <_dtoa_r+0x6f8>
 800a548:	4620      	mov	r0, r4
 800a54a:	4659      	mov	r1, fp
 800a54c:	f000 fce8 	bl	800af20 <_Bfree>
 800a550:	2300      	movs	r3, #0
 800a552:	702b      	strb	r3, [r5, #0]
 800a554:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a556:	f10a 0001 	add.w	r0, sl, #1
 800a55a:	6018      	str	r0, [r3, #0]
 800a55c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a55e:	2b00      	cmp	r3, #0
 800a560:	f43f acd8 	beq.w	8009f14 <_dtoa_r+0xa4>
 800a564:	601d      	str	r5, [r3, #0]
 800a566:	e4d5      	b.n	8009f14 <_dtoa_r+0xa4>
 800a568:	f8cd a01c 	str.w	sl, [sp, #28]
 800a56c:	462b      	mov	r3, r5
 800a56e:	461d      	mov	r5, r3
 800a570:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a574:	2a39      	cmp	r2, #57	; 0x39
 800a576:	d108      	bne.n	800a58a <_dtoa_r+0x71a>
 800a578:	9a00      	ldr	r2, [sp, #0]
 800a57a:	429a      	cmp	r2, r3
 800a57c:	d1f7      	bne.n	800a56e <_dtoa_r+0x6fe>
 800a57e:	9a07      	ldr	r2, [sp, #28]
 800a580:	9900      	ldr	r1, [sp, #0]
 800a582:	3201      	adds	r2, #1
 800a584:	9207      	str	r2, [sp, #28]
 800a586:	2230      	movs	r2, #48	; 0x30
 800a588:	700a      	strb	r2, [r1, #0]
 800a58a:	781a      	ldrb	r2, [r3, #0]
 800a58c:	3201      	adds	r2, #1
 800a58e:	701a      	strb	r2, [r3, #0]
 800a590:	e78c      	b.n	800a4ac <_dtoa_r+0x63c>
 800a592:	4b7f      	ldr	r3, [pc, #508]	; (800a790 <_dtoa_r+0x920>)
 800a594:	2200      	movs	r2, #0
 800a596:	f7f6 f82f 	bl	80005f8 <__aeabi_dmul>
 800a59a:	2200      	movs	r2, #0
 800a59c:	2300      	movs	r3, #0
 800a59e:	4606      	mov	r6, r0
 800a5a0:	460f      	mov	r7, r1
 800a5a2:	f7f6 fa91 	bl	8000ac8 <__aeabi_dcmpeq>
 800a5a6:	2800      	cmp	r0, #0
 800a5a8:	d09b      	beq.n	800a4e2 <_dtoa_r+0x672>
 800a5aa:	e7cd      	b.n	800a548 <_dtoa_r+0x6d8>
 800a5ac:	9a08      	ldr	r2, [sp, #32]
 800a5ae:	2a00      	cmp	r2, #0
 800a5b0:	f000 80c4 	beq.w	800a73c <_dtoa_r+0x8cc>
 800a5b4:	9a05      	ldr	r2, [sp, #20]
 800a5b6:	2a01      	cmp	r2, #1
 800a5b8:	f300 80a8 	bgt.w	800a70c <_dtoa_r+0x89c>
 800a5bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a5be:	2a00      	cmp	r2, #0
 800a5c0:	f000 80a0 	beq.w	800a704 <_dtoa_r+0x894>
 800a5c4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a5c8:	9e06      	ldr	r6, [sp, #24]
 800a5ca:	4645      	mov	r5, r8
 800a5cc:	9a04      	ldr	r2, [sp, #16]
 800a5ce:	2101      	movs	r1, #1
 800a5d0:	441a      	add	r2, r3
 800a5d2:	4620      	mov	r0, r4
 800a5d4:	4498      	add	r8, r3
 800a5d6:	9204      	str	r2, [sp, #16]
 800a5d8:	f000 fd5e 	bl	800b098 <__i2b>
 800a5dc:	4607      	mov	r7, r0
 800a5de:	2d00      	cmp	r5, #0
 800a5e0:	dd0b      	ble.n	800a5fa <_dtoa_r+0x78a>
 800a5e2:	9b04      	ldr	r3, [sp, #16]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	dd08      	ble.n	800a5fa <_dtoa_r+0x78a>
 800a5e8:	42ab      	cmp	r3, r5
 800a5ea:	9a04      	ldr	r2, [sp, #16]
 800a5ec:	bfa8      	it	ge
 800a5ee:	462b      	movge	r3, r5
 800a5f0:	eba8 0803 	sub.w	r8, r8, r3
 800a5f4:	1aed      	subs	r5, r5, r3
 800a5f6:	1ad3      	subs	r3, r2, r3
 800a5f8:	9304      	str	r3, [sp, #16]
 800a5fa:	9b06      	ldr	r3, [sp, #24]
 800a5fc:	b1fb      	cbz	r3, 800a63e <_dtoa_r+0x7ce>
 800a5fe:	9b08      	ldr	r3, [sp, #32]
 800a600:	2b00      	cmp	r3, #0
 800a602:	f000 809f 	beq.w	800a744 <_dtoa_r+0x8d4>
 800a606:	2e00      	cmp	r6, #0
 800a608:	dd11      	ble.n	800a62e <_dtoa_r+0x7be>
 800a60a:	4639      	mov	r1, r7
 800a60c:	4632      	mov	r2, r6
 800a60e:	4620      	mov	r0, r4
 800a610:	f000 fdfe 	bl	800b210 <__pow5mult>
 800a614:	465a      	mov	r2, fp
 800a616:	4601      	mov	r1, r0
 800a618:	4607      	mov	r7, r0
 800a61a:	4620      	mov	r0, r4
 800a61c:	f000 fd52 	bl	800b0c4 <__multiply>
 800a620:	4659      	mov	r1, fp
 800a622:	9007      	str	r0, [sp, #28]
 800a624:	4620      	mov	r0, r4
 800a626:	f000 fc7b 	bl	800af20 <_Bfree>
 800a62a:	9b07      	ldr	r3, [sp, #28]
 800a62c:	469b      	mov	fp, r3
 800a62e:	9b06      	ldr	r3, [sp, #24]
 800a630:	1b9a      	subs	r2, r3, r6
 800a632:	d004      	beq.n	800a63e <_dtoa_r+0x7ce>
 800a634:	4659      	mov	r1, fp
 800a636:	4620      	mov	r0, r4
 800a638:	f000 fdea 	bl	800b210 <__pow5mult>
 800a63c:	4683      	mov	fp, r0
 800a63e:	2101      	movs	r1, #1
 800a640:	4620      	mov	r0, r4
 800a642:	f000 fd29 	bl	800b098 <__i2b>
 800a646:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a648:	2b00      	cmp	r3, #0
 800a64a:	4606      	mov	r6, r0
 800a64c:	dd7c      	ble.n	800a748 <_dtoa_r+0x8d8>
 800a64e:	461a      	mov	r2, r3
 800a650:	4601      	mov	r1, r0
 800a652:	4620      	mov	r0, r4
 800a654:	f000 fddc 	bl	800b210 <__pow5mult>
 800a658:	9b05      	ldr	r3, [sp, #20]
 800a65a:	2b01      	cmp	r3, #1
 800a65c:	4606      	mov	r6, r0
 800a65e:	dd76      	ble.n	800a74e <_dtoa_r+0x8de>
 800a660:	2300      	movs	r3, #0
 800a662:	9306      	str	r3, [sp, #24]
 800a664:	6933      	ldr	r3, [r6, #16]
 800a666:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a66a:	6918      	ldr	r0, [r3, #16]
 800a66c:	f000 fcc4 	bl	800aff8 <__hi0bits>
 800a670:	f1c0 0020 	rsb	r0, r0, #32
 800a674:	9b04      	ldr	r3, [sp, #16]
 800a676:	4418      	add	r0, r3
 800a678:	f010 001f 	ands.w	r0, r0, #31
 800a67c:	f000 8086 	beq.w	800a78c <_dtoa_r+0x91c>
 800a680:	f1c0 0320 	rsb	r3, r0, #32
 800a684:	2b04      	cmp	r3, #4
 800a686:	dd7f      	ble.n	800a788 <_dtoa_r+0x918>
 800a688:	f1c0 001c 	rsb	r0, r0, #28
 800a68c:	9b04      	ldr	r3, [sp, #16]
 800a68e:	4403      	add	r3, r0
 800a690:	4480      	add	r8, r0
 800a692:	4405      	add	r5, r0
 800a694:	9304      	str	r3, [sp, #16]
 800a696:	f1b8 0f00 	cmp.w	r8, #0
 800a69a:	dd05      	ble.n	800a6a8 <_dtoa_r+0x838>
 800a69c:	4659      	mov	r1, fp
 800a69e:	4642      	mov	r2, r8
 800a6a0:	4620      	mov	r0, r4
 800a6a2:	f000 fe0f 	bl	800b2c4 <__lshift>
 800a6a6:	4683      	mov	fp, r0
 800a6a8:	9b04      	ldr	r3, [sp, #16]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	dd05      	ble.n	800a6ba <_dtoa_r+0x84a>
 800a6ae:	4631      	mov	r1, r6
 800a6b0:	461a      	mov	r2, r3
 800a6b2:	4620      	mov	r0, r4
 800a6b4:	f000 fe06 	bl	800b2c4 <__lshift>
 800a6b8:	4606      	mov	r6, r0
 800a6ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d069      	beq.n	800a794 <_dtoa_r+0x924>
 800a6c0:	4631      	mov	r1, r6
 800a6c2:	4658      	mov	r0, fp
 800a6c4:	f000 fe6a 	bl	800b39c <__mcmp>
 800a6c8:	2800      	cmp	r0, #0
 800a6ca:	da63      	bge.n	800a794 <_dtoa_r+0x924>
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	4659      	mov	r1, fp
 800a6d0:	220a      	movs	r2, #10
 800a6d2:	4620      	mov	r0, r4
 800a6d4:	f000 fc46 	bl	800af64 <__multadd>
 800a6d8:	9b08      	ldr	r3, [sp, #32]
 800a6da:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a6de:	4683      	mov	fp, r0
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	f000 818f 	beq.w	800aa04 <_dtoa_r+0xb94>
 800a6e6:	4639      	mov	r1, r7
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	220a      	movs	r2, #10
 800a6ec:	4620      	mov	r0, r4
 800a6ee:	f000 fc39 	bl	800af64 <__multadd>
 800a6f2:	f1b9 0f00 	cmp.w	r9, #0
 800a6f6:	4607      	mov	r7, r0
 800a6f8:	f300 808e 	bgt.w	800a818 <_dtoa_r+0x9a8>
 800a6fc:	9b05      	ldr	r3, [sp, #20]
 800a6fe:	2b02      	cmp	r3, #2
 800a700:	dc50      	bgt.n	800a7a4 <_dtoa_r+0x934>
 800a702:	e089      	b.n	800a818 <_dtoa_r+0x9a8>
 800a704:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a706:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a70a:	e75d      	b.n	800a5c8 <_dtoa_r+0x758>
 800a70c:	9b01      	ldr	r3, [sp, #4]
 800a70e:	1e5e      	subs	r6, r3, #1
 800a710:	9b06      	ldr	r3, [sp, #24]
 800a712:	42b3      	cmp	r3, r6
 800a714:	bfbf      	itttt	lt
 800a716:	9b06      	ldrlt	r3, [sp, #24]
 800a718:	9606      	strlt	r6, [sp, #24]
 800a71a:	1af2      	sublt	r2, r6, r3
 800a71c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800a71e:	bfb6      	itet	lt
 800a720:	189b      	addlt	r3, r3, r2
 800a722:	1b9e      	subge	r6, r3, r6
 800a724:	930d      	strlt	r3, [sp, #52]	; 0x34
 800a726:	9b01      	ldr	r3, [sp, #4]
 800a728:	bfb8      	it	lt
 800a72a:	2600      	movlt	r6, #0
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	bfb5      	itete	lt
 800a730:	eba8 0503 	sublt.w	r5, r8, r3
 800a734:	9b01      	ldrge	r3, [sp, #4]
 800a736:	2300      	movlt	r3, #0
 800a738:	4645      	movge	r5, r8
 800a73a:	e747      	b.n	800a5cc <_dtoa_r+0x75c>
 800a73c:	9e06      	ldr	r6, [sp, #24]
 800a73e:	9f08      	ldr	r7, [sp, #32]
 800a740:	4645      	mov	r5, r8
 800a742:	e74c      	b.n	800a5de <_dtoa_r+0x76e>
 800a744:	9a06      	ldr	r2, [sp, #24]
 800a746:	e775      	b.n	800a634 <_dtoa_r+0x7c4>
 800a748:	9b05      	ldr	r3, [sp, #20]
 800a74a:	2b01      	cmp	r3, #1
 800a74c:	dc18      	bgt.n	800a780 <_dtoa_r+0x910>
 800a74e:	9b02      	ldr	r3, [sp, #8]
 800a750:	b9b3      	cbnz	r3, 800a780 <_dtoa_r+0x910>
 800a752:	9b03      	ldr	r3, [sp, #12]
 800a754:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a758:	b9a3      	cbnz	r3, 800a784 <_dtoa_r+0x914>
 800a75a:	9b03      	ldr	r3, [sp, #12]
 800a75c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a760:	0d1b      	lsrs	r3, r3, #20
 800a762:	051b      	lsls	r3, r3, #20
 800a764:	b12b      	cbz	r3, 800a772 <_dtoa_r+0x902>
 800a766:	9b04      	ldr	r3, [sp, #16]
 800a768:	3301      	adds	r3, #1
 800a76a:	9304      	str	r3, [sp, #16]
 800a76c:	f108 0801 	add.w	r8, r8, #1
 800a770:	2301      	movs	r3, #1
 800a772:	9306      	str	r3, [sp, #24]
 800a774:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a776:	2b00      	cmp	r3, #0
 800a778:	f47f af74 	bne.w	800a664 <_dtoa_r+0x7f4>
 800a77c:	2001      	movs	r0, #1
 800a77e:	e779      	b.n	800a674 <_dtoa_r+0x804>
 800a780:	2300      	movs	r3, #0
 800a782:	e7f6      	b.n	800a772 <_dtoa_r+0x902>
 800a784:	9b02      	ldr	r3, [sp, #8]
 800a786:	e7f4      	b.n	800a772 <_dtoa_r+0x902>
 800a788:	d085      	beq.n	800a696 <_dtoa_r+0x826>
 800a78a:	4618      	mov	r0, r3
 800a78c:	301c      	adds	r0, #28
 800a78e:	e77d      	b.n	800a68c <_dtoa_r+0x81c>
 800a790:	40240000 	.word	0x40240000
 800a794:	9b01      	ldr	r3, [sp, #4]
 800a796:	2b00      	cmp	r3, #0
 800a798:	dc38      	bgt.n	800a80c <_dtoa_r+0x99c>
 800a79a:	9b05      	ldr	r3, [sp, #20]
 800a79c:	2b02      	cmp	r3, #2
 800a79e:	dd35      	ble.n	800a80c <_dtoa_r+0x99c>
 800a7a0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a7a4:	f1b9 0f00 	cmp.w	r9, #0
 800a7a8:	d10d      	bne.n	800a7c6 <_dtoa_r+0x956>
 800a7aa:	4631      	mov	r1, r6
 800a7ac:	464b      	mov	r3, r9
 800a7ae:	2205      	movs	r2, #5
 800a7b0:	4620      	mov	r0, r4
 800a7b2:	f000 fbd7 	bl	800af64 <__multadd>
 800a7b6:	4601      	mov	r1, r0
 800a7b8:	4606      	mov	r6, r0
 800a7ba:	4658      	mov	r0, fp
 800a7bc:	f000 fdee 	bl	800b39c <__mcmp>
 800a7c0:	2800      	cmp	r0, #0
 800a7c2:	f73f adbd 	bgt.w	800a340 <_dtoa_r+0x4d0>
 800a7c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7c8:	9d00      	ldr	r5, [sp, #0]
 800a7ca:	ea6f 0a03 	mvn.w	sl, r3
 800a7ce:	f04f 0800 	mov.w	r8, #0
 800a7d2:	4631      	mov	r1, r6
 800a7d4:	4620      	mov	r0, r4
 800a7d6:	f000 fba3 	bl	800af20 <_Bfree>
 800a7da:	2f00      	cmp	r7, #0
 800a7dc:	f43f aeb4 	beq.w	800a548 <_dtoa_r+0x6d8>
 800a7e0:	f1b8 0f00 	cmp.w	r8, #0
 800a7e4:	d005      	beq.n	800a7f2 <_dtoa_r+0x982>
 800a7e6:	45b8      	cmp	r8, r7
 800a7e8:	d003      	beq.n	800a7f2 <_dtoa_r+0x982>
 800a7ea:	4641      	mov	r1, r8
 800a7ec:	4620      	mov	r0, r4
 800a7ee:	f000 fb97 	bl	800af20 <_Bfree>
 800a7f2:	4639      	mov	r1, r7
 800a7f4:	4620      	mov	r0, r4
 800a7f6:	f000 fb93 	bl	800af20 <_Bfree>
 800a7fa:	e6a5      	b.n	800a548 <_dtoa_r+0x6d8>
 800a7fc:	2600      	movs	r6, #0
 800a7fe:	4637      	mov	r7, r6
 800a800:	e7e1      	b.n	800a7c6 <_dtoa_r+0x956>
 800a802:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a804:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a808:	4637      	mov	r7, r6
 800a80a:	e599      	b.n	800a340 <_dtoa_r+0x4d0>
 800a80c:	9b08      	ldr	r3, [sp, #32]
 800a80e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a812:	2b00      	cmp	r3, #0
 800a814:	f000 80fd 	beq.w	800aa12 <_dtoa_r+0xba2>
 800a818:	2d00      	cmp	r5, #0
 800a81a:	dd05      	ble.n	800a828 <_dtoa_r+0x9b8>
 800a81c:	4639      	mov	r1, r7
 800a81e:	462a      	mov	r2, r5
 800a820:	4620      	mov	r0, r4
 800a822:	f000 fd4f 	bl	800b2c4 <__lshift>
 800a826:	4607      	mov	r7, r0
 800a828:	9b06      	ldr	r3, [sp, #24]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d05c      	beq.n	800a8e8 <_dtoa_r+0xa78>
 800a82e:	6879      	ldr	r1, [r7, #4]
 800a830:	4620      	mov	r0, r4
 800a832:	f000 fb35 	bl	800aea0 <_Balloc>
 800a836:	4605      	mov	r5, r0
 800a838:	b928      	cbnz	r0, 800a846 <_dtoa_r+0x9d6>
 800a83a:	4b80      	ldr	r3, [pc, #512]	; (800aa3c <_dtoa_r+0xbcc>)
 800a83c:	4602      	mov	r2, r0
 800a83e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a842:	f7ff bb2e 	b.w	8009ea2 <_dtoa_r+0x32>
 800a846:	693a      	ldr	r2, [r7, #16]
 800a848:	3202      	adds	r2, #2
 800a84a:	0092      	lsls	r2, r2, #2
 800a84c:	f107 010c 	add.w	r1, r7, #12
 800a850:	300c      	adds	r0, #12
 800a852:	f7fe fcb1 	bl	80091b8 <memcpy>
 800a856:	2201      	movs	r2, #1
 800a858:	4629      	mov	r1, r5
 800a85a:	4620      	mov	r0, r4
 800a85c:	f000 fd32 	bl	800b2c4 <__lshift>
 800a860:	9b00      	ldr	r3, [sp, #0]
 800a862:	3301      	adds	r3, #1
 800a864:	9301      	str	r3, [sp, #4]
 800a866:	9b00      	ldr	r3, [sp, #0]
 800a868:	444b      	add	r3, r9
 800a86a:	9307      	str	r3, [sp, #28]
 800a86c:	9b02      	ldr	r3, [sp, #8]
 800a86e:	f003 0301 	and.w	r3, r3, #1
 800a872:	46b8      	mov	r8, r7
 800a874:	9306      	str	r3, [sp, #24]
 800a876:	4607      	mov	r7, r0
 800a878:	9b01      	ldr	r3, [sp, #4]
 800a87a:	4631      	mov	r1, r6
 800a87c:	3b01      	subs	r3, #1
 800a87e:	4658      	mov	r0, fp
 800a880:	9302      	str	r3, [sp, #8]
 800a882:	f7ff fa67 	bl	8009d54 <quorem>
 800a886:	4603      	mov	r3, r0
 800a888:	3330      	adds	r3, #48	; 0x30
 800a88a:	9004      	str	r0, [sp, #16]
 800a88c:	4641      	mov	r1, r8
 800a88e:	4658      	mov	r0, fp
 800a890:	9308      	str	r3, [sp, #32]
 800a892:	f000 fd83 	bl	800b39c <__mcmp>
 800a896:	463a      	mov	r2, r7
 800a898:	4681      	mov	r9, r0
 800a89a:	4631      	mov	r1, r6
 800a89c:	4620      	mov	r0, r4
 800a89e:	f000 fd99 	bl	800b3d4 <__mdiff>
 800a8a2:	68c2      	ldr	r2, [r0, #12]
 800a8a4:	9b08      	ldr	r3, [sp, #32]
 800a8a6:	4605      	mov	r5, r0
 800a8a8:	bb02      	cbnz	r2, 800a8ec <_dtoa_r+0xa7c>
 800a8aa:	4601      	mov	r1, r0
 800a8ac:	4658      	mov	r0, fp
 800a8ae:	f000 fd75 	bl	800b39c <__mcmp>
 800a8b2:	9b08      	ldr	r3, [sp, #32]
 800a8b4:	4602      	mov	r2, r0
 800a8b6:	4629      	mov	r1, r5
 800a8b8:	4620      	mov	r0, r4
 800a8ba:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800a8be:	f000 fb2f 	bl	800af20 <_Bfree>
 800a8c2:	9b05      	ldr	r3, [sp, #20]
 800a8c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a8c6:	9d01      	ldr	r5, [sp, #4]
 800a8c8:	ea43 0102 	orr.w	r1, r3, r2
 800a8cc:	9b06      	ldr	r3, [sp, #24]
 800a8ce:	430b      	orrs	r3, r1
 800a8d0:	9b08      	ldr	r3, [sp, #32]
 800a8d2:	d10d      	bne.n	800a8f0 <_dtoa_r+0xa80>
 800a8d4:	2b39      	cmp	r3, #57	; 0x39
 800a8d6:	d029      	beq.n	800a92c <_dtoa_r+0xabc>
 800a8d8:	f1b9 0f00 	cmp.w	r9, #0
 800a8dc:	dd01      	ble.n	800a8e2 <_dtoa_r+0xa72>
 800a8de:	9b04      	ldr	r3, [sp, #16]
 800a8e0:	3331      	adds	r3, #49	; 0x31
 800a8e2:	9a02      	ldr	r2, [sp, #8]
 800a8e4:	7013      	strb	r3, [r2, #0]
 800a8e6:	e774      	b.n	800a7d2 <_dtoa_r+0x962>
 800a8e8:	4638      	mov	r0, r7
 800a8ea:	e7b9      	b.n	800a860 <_dtoa_r+0x9f0>
 800a8ec:	2201      	movs	r2, #1
 800a8ee:	e7e2      	b.n	800a8b6 <_dtoa_r+0xa46>
 800a8f0:	f1b9 0f00 	cmp.w	r9, #0
 800a8f4:	db06      	blt.n	800a904 <_dtoa_r+0xa94>
 800a8f6:	9905      	ldr	r1, [sp, #20]
 800a8f8:	ea41 0909 	orr.w	r9, r1, r9
 800a8fc:	9906      	ldr	r1, [sp, #24]
 800a8fe:	ea59 0101 	orrs.w	r1, r9, r1
 800a902:	d120      	bne.n	800a946 <_dtoa_r+0xad6>
 800a904:	2a00      	cmp	r2, #0
 800a906:	ddec      	ble.n	800a8e2 <_dtoa_r+0xa72>
 800a908:	4659      	mov	r1, fp
 800a90a:	2201      	movs	r2, #1
 800a90c:	4620      	mov	r0, r4
 800a90e:	9301      	str	r3, [sp, #4]
 800a910:	f000 fcd8 	bl	800b2c4 <__lshift>
 800a914:	4631      	mov	r1, r6
 800a916:	4683      	mov	fp, r0
 800a918:	f000 fd40 	bl	800b39c <__mcmp>
 800a91c:	2800      	cmp	r0, #0
 800a91e:	9b01      	ldr	r3, [sp, #4]
 800a920:	dc02      	bgt.n	800a928 <_dtoa_r+0xab8>
 800a922:	d1de      	bne.n	800a8e2 <_dtoa_r+0xa72>
 800a924:	07da      	lsls	r2, r3, #31
 800a926:	d5dc      	bpl.n	800a8e2 <_dtoa_r+0xa72>
 800a928:	2b39      	cmp	r3, #57	; 0x39
 800a92a:	d1d8      	bne.n	800a8de <_dtoa_r+0xa6e>
 800a92c:	9a02      	ldr	r2, [sp, #8]
 800a92e:	2339      	movs	r3, #57	; 0x39
 800a930:	7013      	strb	r3, [r2, #0]
 800a932:	462b      	mov	r3, r5
 800a934:	461d      	mov	r5, r3
 800a936:	3b01      	subs	r3, #1
 800a938:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a93c:	2a39      	cmp	r2, #57	; 0x39
 800a93e:	d050      	beq.n	800a9e2 <_dtoa_r+0xb72>
 800a940:	3201      	adds	r2, #1
 800a942:	701a      	strb	r2, [r3, #0]
 800a944:	e745      	b.n	800a7d2 <_dtoa_r+0x962>
 800a946:	2a00      	cmp	r2, #0
 800a948:	dd03      	ble.n	800a952 <_dtoa_r+0xae2>
 800a94a:	2b39      	cmp	r3, #57	; 0x39
 800a94c:	d0ee      	beq.n	800a92c <_dtoa_r+0xabc>
 800a94e:	3301      	adds	r3, #1
 800a950:	e7c7      	b.n	800a8e2 <_dtoa_r+0xa72>
 800a952:	9a01      	ldr	r2, [sp, #4]
 800a954:	9907      	ldr	r1, [sp, #28]
 800a956:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a95a:	428a      	cmp	r2, r1
 800a95c:	d02a      	beq.n	800a9b4 <_dtoa_r+0xb44>
 800a95e:	4659      	mov	r1, fp
 800a960:	2300      	movs	r3, #0
 800a962:	220a      	movs	r2, #10
 800a964:	4620      	mov	r0, r4
 800a966:	f000 fafd 	bl	800af64 <__multadd>
 800a96a:	45b8      	cmp	r8, r7
 800a96c:	4683      	mov	fp, r0
 800a96e:	f04f 0300 	mov.w	r3, #0
 800a972:	f04f 020a 	mov.w	r2, #10
 800a976:	4641      	mov	r1, r8
 800a978:	4620      	mov	r0, r4
 800a97a:	d107      	bne.n	800a98c <_dtoa_r+0xb1c>
 800a97c:	f000 faf2 	bl	800af64 <__multadd>
 800a980:	4680      	mov	r8, r0
 800a982:	4607      	mov	r7, r0
 800a984:	9b01      	ldr	r3, [sp, #4]
 800a986:	3301      	adds	r3, #1
 800a988:	9301      	str	r3, [sp, #4]
 800a98a:	e775      	b.n	800a878 <_dtoa_r+0xa08>
 800a98c:	f000 faea 	bl	800af64 <__multadd>
 800a990:	4639      	mov	r1, r7
 800a992:	4680      	mov	r8, r0
 800a994:	2300      	movs	r3, #0
 800a996:	220a      	movs	r2, #10
 800a998:	4620      	mov	r0, r4
 800a99a:	f000 fae3 	bl	800af64 <__multadd>
 800a99e:	4607      	mov	r7, r0
 800a9a0:	e7f0      	b.n	800a984 <_dtoa_r+0xb14>
 800a9a2:	f1b9 0f00 	cmp.w	r9, #0
 800a9a6:	9a00      	ldr	r2, [sp, #0]
 800a9a8:	bfcc      	ite	gt
 800a9aa:	464d      	movgt	r5, r9
 800a9ac:	2501      	movle	r5, #1
 800a9ae:	4415      	add	r5, r2
 800a9b0:	f04f 0800 	mov.w	r8, #0
 800a9b4:	4659      	mov	r1, fp
 800a9b6:	2201      	movs	r2, #1
 800a9b8:	4620      	mov	r0, r4
 800a9ba:	9301      	str	r3, [sp, #4]
 800a9bc:	f000 fc82 	bl	800b2c4 <__lshift>
 800a9c0:	4631      	mov	r1, r6
 800a9c2:	4683      	mov	fp, r0
 800a9c4:	f000 fcea 	bl	800b39c <__mcmp>
 800a9c8:	2800      	cmp	r0, #0
 800a9ca:	dcb2      	bgt.n	800a932 <_dtoa_r+0xac2>
 800a9cc:	d102      	bne.n	800a9d4 <_dtoa_r+0xb64>
 800a9ce:	9b01      	ldr	r3, [sp, #4]
 800a9d0:	07db      	lsls	r3, r3, #31
 800a9d2:	d4ae      	bmi.n	800a932 <_dtoa_r+0xac2>
 800a9d4:	462b      	mov	r3, r5
 800a9d6:	461d      	mov	r5, r3
 800a9d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a9dc:	2a30      	cmp	r2, #48	; 0x30
 800a9de:	d0fa      	beq.n	800a9d6 <_dtoa_r+0xb66>
 800a9e0:	e6f7      	b.n	800a7d2 <_dtoa_r+0x962>
 800a9e2:	9a00      	ldr	r2, [sp, #0]
 800a9e4:	429a      	cmp	r2, r3
 800a9e6:	d1a5      	bne.n	800a934 <_dtoa_r+0xac4>
 800a9e8:	f10a 0a01 	add.w	sl, sl, #1
 800a9ec:	2331      	movs	r3, #49	; 0x31
 800a9ee:	e779      	b.n	800a8e4 <_dtoa_r+0xa74>
 800a9f0:	4b13      	ldr	r3, [pc, #76]	; (800aa40 <_dtoa_r+0xbd0>)
 800a9f2:	f7ff baaf 	b.w	8009f54 <_dtoa_r+0xe4>
 800a9f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	f47f aa86 	bne.w	8009f0a <_dtoa_r+0x9a>
 800a9fe:	4b11      	ldr	r3, [pc, #68]	; (800aa44 <_dtoa_r+0xbd4>)
 800aa00:	f7ff baa8 	b.w	8009f54 <_dtoa_r+0xe4>
 800aa04:	f1b9 0f00 	cmp.w	r9, #0
 800aa08:	dc03      	bgt.n	800aa12 <_dtoa_r+0xba2>
 800aa0a:	9b05      	ldr	r3, [sp, #20]
 800aa0c:	2b02      	cmp	r3, #2
 800aa0e:	f73f aec9 	bgt.w	800a7a4 <_dtoa_r+0x934>
 800aa12:	9d00      	ldr	r5, [sp, #0]
 800aa14:	4631      	mov	r1, r6
 800aa16:	4658      	mov	r0, fp
 800aa18:	f7ff f99c 	bl	8009d54 <quorem>
 800aa1c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800aa20:	f805 3b01 	strb.w	r3, [r5], #1
 800aa24:	9a00      	ldr	r2, [sp, #0]
 800aa26:	1aaa      	subs	r2, r5, r2
 800aa28:	4591      	cmp	r9, r2
 800aa2a:	ddba      	ble.n	800a9a2 <_dtoa_r+0xb32>
 800aa2c:	4659      	mov	r1, fp
 800aa2e:	2300      	movs	r3, #0
 800aa30:	220a      	movs	r2, #10
 800aa32:	4620      	mov	r0, r4
 800aa34:	f000 fa96 	bl	800af64 <__multadd>
 800aa38:	4683      	mov	fp, r0
 800aa3a:	e7eb      	b.n	800aa14 <_dtoa_r+0xba4>
 800aa3c:	0800bddb 	.word	0x0800bddb
 800aa40:	0800bd34 	.word	0x0800bd34
 800aa44:	0800bd58 	.word	0x0800bd58

0800aa48 <__sflush_r>:
 800aa48:	898a      	ldrh	r2, [r1, #12]
 800aa4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa4e:	4605      	mov	r5, r0
 800aa50:	0710      	lsls	r0, r2, #28
 800aa52:	460c      	mov	r4, r1
 800aa54:	d458      	bmi.n	800ab08 <__sflush_r+0xc0>
 800aa56:	684b      	ldr	r3, [r1, #4]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	dc05      	bgt.n	800aa68 <__sflush_r+0x20>
 800aa5c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	dc02      	bgt.n	800aa68 <__sflush_r+0x20>
 800aa62:	2000      	movs	r0, #0
 800aa64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aa6a:	2e00      	cmp	r6, #0
 800aa6c:	d0f9      	beq.n	800aa62 <__sflush_r+0x1a>
 800aa6e:	2300      	movs	r3, #0
 800aa70:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800aa74:	682f      	ldr	r7, [r5, #0]
 800aa76:	602b      	str	r3, [r5, #0]
 800aa78:	d032      	beq.n	800aae0 <__sflush_r+0x98>
 800aa7a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800aa7c:	89a3      	ldrh	r3, [r4, #12]
 800aa7e:	075a      	lsls	r2, r3, #29
 800aa80:	d505      	bpl.n	800aa8e <__sflush_r+0x46>
 800aa82:	6863      	ldr	r3, [r4, #4]
 800aa84:	1ac0      	subs	r0, r0, r3
 800aa86:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aa88:	b10b      	cbz	r3, 800aa8e <__sflush_r+0x46>
 800aa8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aa8c:	1ac0      	subs	r0, r0, r3
 800aa8e:	2300      	movs	r3, #0
 800aa90:	4602      	mov	r2, r0
 800aa92:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aa94:	6a21      	ldr	r1, [r4, #32]
 800aa96:	4628      	mov	r0, r5
 800aa98:	47b0      	blx	r6
 800aa9a:	1c43      	adds	r3, r0, #1
 800aa9c:	89a3      	ldrh	r3, [r4, #12]
 800aa9e:	d106      	bne.n	800aaae <__sflush_r+0x66>
 800aaa0:	6829      	ldr	r1, [r5, #0]
 800aaa2:	291d      	cmp	r1, #29
 800aaa4:	d82c      	bhi.n	800ab00 <__sflush_r+0xb8>
 800aaa6:	4a2a      	ldr	r2, [pc, #168]	; (800ab50 <__sflush_r+0x108>)
 800aaa8:	40ca      	lsrs	r2, r1
 800aaaa:	07d6      	lsls	r6, r2, #31
 800aaac:	d528      	bpl.n	800ab00 <__sflush_r+0xb8>
 800aaae:	2200      	movs	r2, #0
 800aab0:	6062      	str	r2, [r4, #4]
 800aab2:	04d9      	lsls	r1, r3, #19
 800aab4:	6922      	ldr	r2, [r4, #16]
 800aab6:	6022      	str	r2, [r4, #0]
 800aab8:	d504      	bpl.n	800aac4 <__sflush_r+0x7c>
 800aaba:	1c42      	adds	r2, r0, #1
 800aabc:	d101      	bne.n	800aac2 <__sflush_r+0x7a>
 800aabe:	682b      	ldr	r3, [r5, #0]
 800aac0:	b903      	cbnz	r3, 800aac4 <__sflush_r+0x7c>
 800aac2:	6560      	str	r0, [r4, #84]	; 0x54
 800aac4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aac6:	602f      	str	r7, [r5, #0]
 800aac8:	2900      	cmp	r1, #0
 800aaca:	d0ca      	beq.n	800aa62 <__sflush_r+0x1a>
 800aacc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aad0:	4299      	cmp	r1, r3
 800aad2:	d002      	beq.n	800aada <__sflush_r+0x92>
 800aad4:	4628      	mov	r0, r5
 800aad6:	f000 fd71 	bl	800b5bc <_free_r>
 800aada:	2000      	movs	r0, #0
 800aadc:	6360      	str	r0, [r4, #52]	; 0x34
 800aade:	e7c1      	b.n	800aa64 <__sflush_r+0x1c>
 800aae0:	6a21      	ldr	r1, [r4, #32]
 800aae2:	2301      	movs	r3, #1
 800aae4:	4628      	mov	r0, r5
 800aae6:	47b0      	blx	r6
 800aae8:	1c41      	adds	r1, r0, #1
 800aaea:	d1c7      	bne.n	800aa7c <__sflush_r+0x34>
 800aaec:	682b      	ldr	r3, [r5, #0]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d0c4      	beq.n	800aa7c <__sflush_r+0x34>
 800aaf2:	2b1d      	cmp	r3, #29
 800aaf4:	d001      	beq.n	800aafa <__sflush_r+0xb2>
 800aaf6:	2b16      	cmp	r3, #22
 800aaf8:	d101      	bne.n	800aafe <__sflush_r+0xb6>
 800aafa:	602f      	str	r7, [r5, #0]
 800aafc:	e7b1      	b.n	800aa62 <__sflush_r+0x1a>
 800aafe:	89a3      	ldrh	r3, [r4, #12]
 800ab00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab04:	81a3      	strh	r3, [r4, #12]
 800ab06:	e7ad      	b.n	800aa64 <__sflush_r+0x1c>
 800ab08:	690f      	ldr	r7, [r1, #16]
 800ab0a:	2f00      	cmp	r7, #0
 800ab0c:	d0a9      	beq.n	800aa62 <__sflush_r+0x1a>
 800ab0e:	0793      	lsls	r3, r2, #30
 800ab10:	680e      	ldr	r6, [r1, #0]
 800ab12:	bf08      	it	eq
 800ab14:	694b      	ldreq	r3, [r1, #20]
 800ab16:	600f      	str	r7, [r1, #0]
 800ab18:	bf18      	it	ne
 800ab1a:	2300      	movne	r3, #0
 800ab1c:	eba6 0807 	sub.w	r8, r6, r7
 800ab20:	608b      	str	r3, [r1, #8]
 800ab22:	f1b8 0f00 	cmp.w	r8, #0
 800ab26:	dd9c      	ble.n	800aa62 <__sflush_r+0x1a>
 800ab28:	6a21      	ldr	r1, [r4, #32]
 800ab2a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ab2c:	4643      	mov	r3, r8
 800ab2e:	463a      	mov	r2, r7
 800ab30:	4628      	mov	r0, r5
 800ab32:	47b0      	blx	r6
 800ab34:	2800      	cmp	r0, #0
 800ab36:	dc06      	bgt.n	800ab46 <__sflush_r+0xfe>
 800ab38:	89a3      	ldrh	r3, [r4, #12]
 800ab3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab3e:	81a3      	strh	r3, [r4, #12]
 800ab40:	f04f 30ff 	mov.w	r0, #4294967295
 800ab44:	e78e      	b.n	800aa64 <__sflush_r+0x1c>
 800ab46:	4407      	add	r7, r0
 800ab48:	eba8 0800 	sub.w	r8, r8, r0
 800ab4c:	e7e9      	b.n	800ab22 <__sflush_r+0xda>
 800ab4e:	bf00      	nop
 800ab50:	20400001 	.word	0x20400001

0800ab54 <_fflush_r>:
 800ab54:	b538      	push	{r3, r4, r5, lr}
 800ab56:	690b      	ldr	r3, [r1, #16]
 800ab58:	4605      	mov	r5, r0
 800ab5a:	460c      	mov	r4, r1
 800ab5c:	b913      	cbnz	r3, 800ab64 <_fflush_r+0x10>
 800ab5e:	2500      	movs	r5, #0
 800ab60:	4628      	mov	r0, r5
 800ab62:	bd38      	pop	{r3, r4, r5, pc}
 800ab64:	b118      	cbz	r0, 800ab6e <_fflush_r+0x1a>
 800ab66:	6983      	ldr	r3, [r0, #24]
 800ab68:	b90b      	cbnz	r3, 800ab6e <_fflush_r+0x1a>
 800ab6a:	f000 f887 	bl	800ac7c <__sinit>
 800ab6e:	4b14      	ldr	r3, [pc, #80]	; (800abc0 <_fflush_r+0x6c>)
 800ab70:	429c      	cmp	r4, r3
 800ab72:	d11b      	bne.n	800abac <_fflush_r+0x58>
 800ab74:	686c      	ldr	r4, [r5, #4]
 800ab76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d0ef      	beq.n	800ab5e <_fflush_r+0xa>
 800ab7e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ab80:	07d0      	lsls	r0, r2, #31
 800ab82:	d404      	bmi.n	800ab8e <_fflush_r+0x3a>
 800ab84:	0599      	lsls	r1, r3, #22
 800ab86:	d402      	bmi.n	800ab8e <_fflush_r+0x3a>
 800ab88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab8a:	f000 f91a 	bl	800adc2 <__retarget_lock_acquire_recursive>
 800ab8e:	4628      	mov	r0, r5
 800ab90:	4621      	mov	r1, r4
 800ab92:	f7ff ff59 	bl	800aa48 <__sflush_r>
 800ab96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ab98:	07da      	lsls	r2, r3, #31
 800ab9a:	4605      	mov	r5, r0
 800ab9c:	d4e0      	bmi.n	800ab60 <_fflush_r+0xc>
 800ab9e:	89a3      	ldrh	r3, [r4, #12]
 800aba0:	059b      	lsls	r3, r3, #22
 800aba2:	d4dd      	bmi.n	800ab60 <_fflush_r+0xc>
 800aba4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aba6:	f000 f90d 	bl	800adc4 <__retarget_lock_release_recursive>
 800abaa:	e7d9      	b.n	800ab60 <_fflush_r+0xc>
 800abac:	4b05      	ldr	r3, [pc, #20]	; (800abc4 <_fflush_r+0x70>)
 800abae:	429c      	cmp	r4, r3
 800abb0:	d101      	bne.n	800abb6 <_fflush_r+0x62>
 800abb2:	68ac      	ldr	r4, [r5, #8]
 800abb4:	e7df      	b.n	800ab76 <_fflush_r+0x22>
 800abb6:	4b04      	ldr	r3, [pc, #16]	; (800abc8 <_fflush_r+0x74>)
 800abb8:	429c      	cmp	r4, r3
 800abba:	bf08      	it	eq
 800abbc:	68ec      	ldreq	r4, [r5, #12]
 800abbe:	e7da      	b.n	800ab76 <_fflush_r+0x22>
 800abc0:	0800be0c 	.word	0x0800be0c
 800abc4:	0800be2c 	.word	0x0800be2c
 800abc8:	0800bdec 	.word	0x0800bdec

0800abcc <std>:
 800abcc:	2300      	movs	r3, #0
 800abce:	b510      	push	{r4, lr}
 800abd0:	4604      	mov	r4, r0
 800abd2:	e9c0 3300 	strd	r3, r3, [r0]
 800abd6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800abda:	6083      	str	r3, [r0, #8]
 800abdc:	8181      	strh	r1, [r0, #12]
 800abde:	6643      	str	r3, [r0, #100]	; 0x64
 800abe0:	81c2      	strh	r2, [r0, #14]
 800abe2:	6183      	str	r3, [r0, #24]
 800abe4:	4619      	mov	r1, r3
 800abe6:	2208      	movs	r2, #8
 800abe8:	305c      	adds	r0, #92	; 0x5c
 800abea:	f7fe faf3 	bl	80091d4 <memset>
 800abee:	4b05      	ldr	r3, [pc, #20]	; (800ac04 <std+0x38>)
 800abf0:	6263      	str	r3, [r4, #36]	; 0x24
 800abf2:	4b05      	ldr	r3, [pc, #20]	; (800ac08 <std+0x3c>)
 800abf4:	62a3      	str	r3, [r4, #40]	; 0x28
 800abf6:	4b05      	ldr	r3, [pc, #20]	; (800ac0c <std+0x40>)
 800abf8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800abfa:	4b05      	ldr	r3, [pc, #20]	; (800ac10 <std+0x44>)
 800abfc:	6224      	str	r4, [r4, #32]
 800abfe:	6323      	str	r3, [r4, #48]	; 0x30
 800ac00:	bd10      	pop	{r4, pc}
 800ac02:	bf00      	nop
 800ac04:	0800b9e5 	.word	0x0800b9e5
 800ac08:	0800ba07 	.word	0x0800ba07
 800ac0c:	0800ba3f 	.word	0x0800ba3f
 800ac10:	0800ba63 	.word	0x0800ba63

0800ac14 <_cleanup_r>:
 800ac14:	4901      	ldr	r1, [pc, #4]	; (800ac1c <_cleanup_r+0x8>)
 800ac16:	f000 b8af 	b.w	800ad78 <_fwalk_reent>
 800ac1a:	bf00      	nop
 800ac1c:	0800ab55 	.word	0x0800ab55

0800ac20 <__sfmoreglue>:
 800ac20:	b570      	push	{r4, r5, r6, lr}
 800ac22:	1e4a      	subs	r2, r1, #1
 800ac24:	2568      	movs	r5, #104	; 0x68
 800ac26:	4355      	muls	r5, r2
 800ac28:	460e      	mov	r6, r1
 800ac2a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ac2e:	f000 fd15 	bl	800b65c <_malloc_r>
 800ac32:	4604      	mov	r4, r0
 800ac34:	b140      	cbz	r0, 800ac48 <__sfmoreglue+0x28>
 800ac36:	2100      	movs	r1, #0
 800ac38:	e9c0 1600 	strd	r1, r6, [r0]
 800ac3c:	300c      	adds	r0, #12
 800ac3e:	60a0      	str	r0, [r4, #8]
 800ac40:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ac44:	f7fe fac6 	bl	80091d4 <memset>
 800ac48:	4620      	mov	r0, r4
 800ac4a:	bd70      	pop	{r4, r5, r6, pc}

0800ac4c <__sfp_lock_acquire>:
 800ac4c:	4801      	ldr	r0, [pc, #4]	; (800ac54 <__sfp_lock_acquire+0x8>)
 800ac4e:	f000 b8b8 	b.w	800adc2 <__retarget_lock_acquire_recursive>
 800ac52:	bf00      	nop
 800ac54:	20000dc0 	.word	0x20000dc0

0800ac58 <__sfp_lock_release>:
 800ac58:	4801      	ldr	r0, [pc, #4]	; (800ac60 <__sfp_lock_release+0x8>)
 800ac5a:	f000 b8b3 	b.w	800adc4 <__retarget_lock_release_recursive>
 800ac5e:	bf00      	nop
 800ac60:	20000dc0 	.word	0x20000dc0

0800ac64 <__sinit_lock_acquire>:
 800ac64:	4801      	ldr	r0, [pc, #4]	; (800ac6c <__sinit_lock_acquire+0x8>)
 800ac66:	f000 b8ac 	b.w	800adc2 <__retarget_lock_acquire_recursive>
 800ac6a:	bf00      	nop
 800ac6c:	20000dbf 	.word	0x20000dbf

0800ac70 <__sinit_lock_release>:
 800ac70:	4801      	ldr	r0, [pc, #4]	; (800ac78 <__sinit_lock_release+0x8>)
 800ac72:	f000 b8a7 	b.w	800adc4 <__retarget_lock_release_recursive>
 800ac76:	bf00      	nop
 800ac78:	20000dbf 	.word	0x20000dbf

0800ac7c <__sinit>:
 800ac7c:	b510      	push	{r4, lr}
 800ac7e:	4604      	mov	r4, r0
 800ac80:	f7ff fff0 	bl	800ac64 <__sinit_lock_acquire>
 800ac84:	69a3      	ldr	r3, [r4, #24]
 800ac86:	b11b      	cbz	r3, 800ac90 <__sinit+0x14>
 800ac88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac8c:	f7ff bff0 	b.w	800ac70 <__sinit_lock_release>
 800ac90:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ac94:	6523      	str	r3, [r4, #80]	; 0x50
 800ac96:	4b13      	ldr	r3, [pc, #76]	; (800ace4 <__sinit+0x68>)
 800ac98:	4a13      	ldr	r2, [pc, #76]	; (800ace8 <__sinit+0x6c>)
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	62a2      	str	r2, [r4, #40]	; 0x28
 800ac9e:	42a3      	cmp	r3, r4
 800aca0:	bf04      	itt	eq
 800aca2:	2301      	moveq	r3, #1
 800aca4:	61a3      	streq	r3, [r4, #24]
 800aca6:	4620      	mov	r0, r4
 800aca8:	f000 f820 	bl	800acec <__sfp>
 800acac:	6060      	str	r0, [r4, #4]
 800acae:	4620      	mov	r0, r4
 800acb0:	f000 f81c 	bl	800acec <__sfp>
 800acb4:	60a0      	str	r0, [r4, #8]
 800acb6:	4620      	mov	r0, r4
 800acb8:	f000 f818 	bl	800acec <__sfp>
 800acbc:	2200      	movs	r2, #0
 800acbe:	60e0      	str	r0, [r4, #12]
 800acc0:	2104      	movs	r1, #4
 800acc2:	6860      	ldr	r0, [r4, #4]
 800acc4:	f7ff ff82 	bl	800abcc <std>
 800acc8:	68a0      	ldr	r0, [r4, #8]
 800acca:	2201      	movs	r2, #1
 800accc:	2109      	movs	r1, #9
 800acce:	f7ff ff7d 	bl	800abcc <std>
 800acd2:	68e0      	ldr	r0, [r4, #12]
 800acd4:	2202      	movs	r2, #2
 800acd6:	2112      	movs	r1, #18
 800acd8:	f7ff ff78 	bl	800abcc <std>
 800acdc:	2301      	movs	r3, #1
 800acde:	61a3      	str	r3, [r4, #24]
 800ace0:	e7d2      	b.n	800ac88 <__sinit+0xc>
 800ace2:	bf00      	nop
 800ace4:	0800bd20 	.word	0x0800bd20
 800ace8:	0800ac15 	.word	0x0800ac15

0800acec <__sfp>:
 800acec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acee:	4607      	mov	r7, r0
 800acf0:	f7ff ffac 	bl	800ac4c <__sfp_lock_acquire>
 800acf4:	4b1e      	ldr	r3, [pc, #120]	; (800ad70 <__sfp+0x84>)
 800acf6:	681e      	ldr	r6, [r3, #0]
 800acf8:	69b3      	ldr	r3, [r6, #24]
 800acfa:	b913      	cbnz	r3, 800ad02 <__sfp+0x16>
 800acfc:	4630      	mov	r0, r6
 800acfe:	f7ff ffbd 	bl	800ac7c <__sinit>
 800ad02:	3648      	adds	r6, #72	; 0x48
 800ad04:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ad08:	3b01      	subs	r3, #1
 800ad0a:	d503      	bpl.n	800ad14 <__sfp+0x28>
 800ad0c:	6833      	ldr	r3, [r6, #0]
 800ad0e:	b30b      	cbz	r3, 800ad54 <__sfp+0x68>
 800ad10:	6836      	ldr	r6, [r6, #0]
 800ad12:	e7f7      	b.n	800ad04 <__sfp+0x18>
 800ad14:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ad18:	b9d5      	cbnz	r5, 800ad50 <__sfp+0x64>
 800ad1a:	4b16      	ldr	r3, [pc, #88]	; (800ad74 <__sfp+0x88>)
 800ad1c:	60e3      	str	r3, [r4, #12]
 800ad1e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ad22:	6665      	str	r5, [r4, #100]	; 0x64
 800ad24:	f000 f84c 	bl	800adc0 <__retarget_lock_init_recursive>
 800ad28:	f7ff ff96 	bl	800ac58 <__sfp_lock_release>
 800ad2c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ad30:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ad34:	6025      	str	r5, [r4, #0]
 800ad36:	61a5      	str	r5, [r4, #24]
 800ad38:	2208      	movs	r2, #8
 800ad3a:	4629      	mov	r1, r5
 800ad3c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ad40:	f7fe fa48 	bl	80091d4 <memset>
 800ad44:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ad48:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ad4c:	4620      	mov	r0, r4
 800ad4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad50:	3468      	adds	r4, #104	; 0x68
 800ad52:	e7d9      	b.n	800ad08 <__sfp+0x1c>
 800ad54:	2104      	movs	r1, #4
 800ad56:	4638      	mov	r0, r7
 800ad58:	f7ff ff62 	bl	800ac20 <__sfmoreglue>
 800ad5c:	4604      	mov	r4, r0
 800ad5e:	6030      	str	r0, [r6, #0]
 800ad60:	2800      	cmp	r0, #0
 800ad62:	d1d5      	bne.n	800ad10 <__sfp+0x24>
 800ad64:	f7ff ff78 	bl	800ac58 <__sfp_lock_release>
 800ad68:	230c      	movs	r3, #12
 800ad6a:	603b      	str	r3, [r7, #0]
 800ad6c:	e7ee      	b.n	800ad4c <__sfp+0x60>
 800ad6e:	bf00      	nop
 800ad70:	0800bd20 	.word	0x0800bd20
 800ad74:	ffff0001 	.word	0xffff0001

0800ad78 <_fwalk_reent>:
 800ad78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad7c:	4606      	mov	r6, r0
 800ad7e:	4688      	mov	r8, r1
 800ad80:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ad84:	2700      	movs	r7, #0
 800ad86:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ad8a:	f1b9 0901 	subs.w	r9, r9, #1
 800ad8e:	d505      	bpl.n	800ad9c <_fwalk_reent+0x24>
 800ad90:	6824      	ldr	r4, [r4, #0]
 800ad92:	2c00      	cmp	r4, #0
 800ad94:	d1f7      	bne.n	800ad86 <_fwalk_reent+0xe>
 800ad96:	4638      	mov	r0, r7
 800ad98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad9c:	89ab      	ldrh	r3, [r5, #12]
 800ad9e:	2b01      	cmp	r3, #1
 800ada0:	d907      	bls.n	800adb2 <_fwalk_reent+0x3a>
 800ada2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ada6:	3301      	adds	r3, #1
 800ada8:	d003      	beq.n	800adb2 <_fwalk_reent+0x3a>
 800adaa:	4629      	mov	r1, r5
 800adac:	4630      	mov	r0, r6
 800adae:	47c0      	blx	r8
 800adb0:	4307      	orrs	r7, r0
 800adb2:	3568      	adds	r5, #104	; 0x68
 800adb4:	e7e9      	b.n	800ad8a <_fwalk_reent+0x12>
	...

0800adb8 <_localeconv_r>:
 800adb8:	4800      	ldr	r0, [pc, #0]	; (800adbc <_localeconv_r+0x4>)
 800adba:	4770      	bx	lr
 800adbc:	20000190 	.word	0x20000190

0800adc0 <__retarget_lock_init_recursive>:
 800adc0:	4770      	bx	lr

0800adc2 <__retarget_lock_acquire_recursive>:
 800adc2:	4770      	bx	lr

0800adc4 <__retarget_lock_release_recursive>:
 800adc4:	4770      	bx	lr

0800adc6 <__swhatbuf_r>:
 800adc6:	b570      	push	{r4, r5, r6, lr}
 800adc8:	460e      	mov	r6, r1
 800adca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adce:	2900      	cmp	r1, #0
 800add0:	b096      	sub	sp, #88	; 0x58
 800add2:	4614      	mov	r4, r2
 800add4:	461d      	mov	r5, r3
 800add6:	da07      	bge.n	800ade8 <__swhatbuf_r+0x22>
 800add8:	2300      	movs	r3, #0
 800adda:	602b      	str	r3, [r5, #0]
 800addc:	89b3      	ldrh	r3, [r6, #12]
 800adde:	061a      	lsls	r2, r3, #24
 800ade0:	d410      	bmi.n	800ae04 <__swhatbuf_r+0x3e>
 800ade2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ade6:	e00e      	b.n	800ae06 <__swhatbuf_r+0x40>
 800ade8:	466a      	mov	r2, sp
 800adea:	f000 fe91 	bl	800bb10 <_fstat_r>
 800adee:	2800      	cmp	r0, #0
 800adf0:	dbf2      	blt.n	800add8 <__swhatbuf_r+0x12>
 800adf2:	9a01      	ldr	r2, [sp, #4]
 800adf4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800adf8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800adfc:	425a      	negs	r2, r3
 800adfe:	415a      	adcs	r2, r3
 800ae00:	602a      	str	r2, [r5, #0]
 800ae02:	e7ee      	b.n	800ade2 <__swhatbuf_r+0x1c>
 800ae04:	2340      	movs	r3, #64	; 0x40
 800ae06:	2000      	movs	r0, #0
 800ae08:	6023      	str	r3, [r4, #0]
 800ae0a:	b016      	add	sp, #88	; 0x58
 800ae0c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ae10 <__smakebuf_r>:
 800ae10:	898b      	ldrh	r3, [r1, #12]
 800ae12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ae14:	079d      	lsls	r5, r3, #30
 800ae16:	4606      	mov	r6, r0
 800ae18:	460c      	mov	r4, r1
 800ae1a:	d507      	bpl.n	800ae2c <__smakebuf_r+0x1c>
 800ae1c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ae20:	6023      	str	r3, [r4, #0]
 800ae22:	6123      	str	r3, [r4, #16]
 800ae24:	2301      	movs	r3, #1
 800ae26:	6163      	str	r3, [r4, #20]
 800ae28:	b002      	add	sp, #8
 800ae2a:	bd70      	pop	{r4, r5, r6, pc}
 800ae2c:	ab01      	add	r3, sp, #4
 800ae2e:	466a      	mov	r2, sp
 800ae30:	f7ff ffc9 	bl	800adc6 <__swhatbuf_r>
 800ae34:	9900      	ldr	r1, [sp, #0]
 800ae36:	4605      	mov	r5, r0
 800ae38:	4630      	mov	r0, r6
 800ae3a:	f000 fc0f 	bl	800b65c <_malloc_r>
 800ae3e:	b948      	cbnz	r0, 800ae54 <__smakebuf_r+0x44>
 800ae40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae44:	059a      	lsls	r2, r3, #22
 800ae46:	d4ef      	bmi.n	800ae28 <__smakebuf_r+0x18>
 800ae48:	f023 0303 	bic.w	r3, r3, #3
 800ae4c:	f043 0302 	orr.w	r3, r3, #2
 800ae50:	81a3      	strh	r3, [r4, #12]
 800ae52:	e7e3      	b.n	800ae1c <__smakebuf_r+0xc>
 800ae54:	4b0d      	ldr	r3, [pc, #52]	; (800ae8c <__smakebuf_r+0x7c>)
 800ae56:	62b3      	str	r3, [r6, #40]	; 0x28
 800ae58:	89a3      	ldrh	r3, [r4, #12]
 800ae5a:	6020      	str	r0, [r4, #0]
 800ae5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae60:	81a3      	strh	r3, [r4, #12]
 800ae62:	9b00      	ldr	r3, [sp, #0]
 800ae64:	6163      	str	r3, [r4, #20]
 800ae66:	9b01      	ldr	r3, [sp, #4]
 800ae68:	6120      	str	r0, [r4, #16]
 800ae6a:	b15b      	cbz	r3, 800ae84 <__smakebuf_r+0x74>
 800ae6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae70:	4630      	mov	r0, r6
 800ae72:	f000 fe5f 	bl	800bb34 <_isatty_r>
 800ae76:	b128      	cbz	r0, 800ae84 <__smakebuf_r+0x74>
 800ae78:	89a3      	ldrh	r3, [r4, #12]
 800ae7a:	f023 0303 	bic.w	r3, r3, #3
 800ae7e:	f043 0301 	orr.w	r3, r3, #1
 800ae82:	81a3      	strh	r3, [r4, #12]
 800ae84:	89a0      	ldrh	r0, [r4, #12]
 800ae86:	4305      	orrs	r5, r0
 800ae88:	81a5      	strh	r5, [r4, #12]
 800ae8a:	e7cd      	b.n	800ae28 <__smakebuf_r+0x18>
 800ae8c:	0800ac15 	.word	0x0800ac15

0800ae90 <malloc>:
 800ae90:	4b02      	ldr	r3, [pc, #8]	; (800ae9c <malloc+0xc>)
 800ae92:	4601      	mov	r1, r0
 800ae94:	6818      	ldr	r0, [r3, #0]
 800ae96:	f000 bbe1 	b.w	800b65c <_malloc_r>
 800ae9a:	bf00      	nop
 800ae9c:	2000003c 	.word	0x2000003c

0800aea0 <_Balloc>:
 800aea0:	b570      	push	{r4, r5, r6, lr}
 800aea2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800aea4:	4604      	mov	r4, r0
 800aea6:	460d      	mov	r5, r1
 800aea8:	b976      	cbnz	r6, 800aec8 <_Balloc+0x28>
 800aeaa:	2010      	movs	r0, #16
 800aeac:	f7ff fff0 	bl	800ae90 <malloc>
 800aeb0:	4602      	mov	r2, r0
 800aeb2:	6260      	str	r0, [r4, #36]	; 0x24
 800aeb4:	b920      	cbnz	r0, 800aec0 <_Balloc+0x20>
 800aeb6:	4b18      	ldr	r3, [pc, #96]	; (800af18 <_Balloc+0x78>)
 800aeb8:	4818      	ldr	r0, [pc, #96]	; (800af1c <_Balloc+0x7c>)
 800aeba:	2166      	movs	r1, #102	; 0x66
 800aebc:	f000 fde8 	bl	800ba90 <__assert_func>
 800aec0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aec4:	6006      	str	r6, [r0, #0]
 800aec6:	60c6      	str	r6, [r0, #12]
 800aec8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800aeca:	68f3      	ldr	r3, [r6, #12]
 800aecc:	b183      	cbz	r3, 800aef0 <_Balloc+0x50>
 800aece:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aed0:	68db      	ldr	r3, [r3, #12]
 800aed2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800aed6:	b9b8      	cbnz	r0, 800af08 <_Balloc+0x68>
 800aed8:	2101      	movs	r1, #1
 800aeda:	fa01 f605 	lsl.w	r6, r1, r5
 800aede:	1d72      	adds	r2, r6, #5
 800aee0:	0092      	lsls	r2, r2, #2
 800aee2:	4620      	mov	r0, r4
 800aee4:	f000 fb5a 	bl	800b59c <_calloc_r>
 800aee8:	b160      	cbz	r0, 800af04 <_Balloc+0x64>
 800aeea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800aeee:	e00e      	b.n	800af0e <_Balloc+0x6e>
 800aef0:	2221      	movs	r2, #33	; 0x21
 800aef2:	2104      	movs	r1, #4
 800aef4:	4620      	mov	r0, r4
 800aef6:	f000 fb51 	bl	800b59c <_calloc_r>
 800aefa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aefc:	60f0      	str	r0, [r6, #12]
 800aefe:	68db      	ldr	r3, [r3, #12]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d1e4      	bne.n	800aece <_Balloc+0x2e>
 800af04:	2000      	movs	r0, #0
 800af06:	bd70      	pop	{r4, r5, r6, pc}
 800af08:	6802      	ldr	r2, [r0, #0]
 800af0a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800af0e:	2300      	movs	r3, #0
 800af10:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800af14:	e7f7      	b.n	800af06 <_Balloc+0x66>
 800af16:	bf00      	nop
 800af18:	0800bd65 	.word	0x0800bd65
 800af1c:	0800be4c 	.word	0x0800be4c

0800af20 <_Bfree>:
 800af20:	b570      	push	{r4, r5, r6, lr}
 800af22:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800af24:	4605      	mov	r5, r0
 800af26:	460c      	mov	r4, r1
 800af28:	b976      	cbnz	r6, 800af48 <_Bfree+0x28>
 800af2a:	2010      	movs	r0, #16
 800af2c:	f7ff ffb0 	bl	800ae90 <malloc>
 800af30:	4602      	mov	r2, r0
 800af32:	6268      	str	r0, [r5, #36]	; 0x24
 800af34:	b920      	cbnz	r0, 800af40 <_Bfree+0x20>
 800af36:	4b09      	ldr	r3, [pc, #36]	; (800af5c <_Bfree+0x3c>)
 800af38:	4809      	ldr	r0, [pc, #36]	; (800af60 <_Bfree+0x40>)
 800af3a:	218a      	movs	r1, #138	; 0x8a
 800af3c:	f000 fda8 	bl	800ba90 <__assert_func>
 800af40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800af44:	6006      	str	r6, [r0, #0]
 800af46:	60c6      	str	r6, [r0, #12]
 800af48:	b13c      	cbz	r4, 800af5a <_Bfree+0x3a>
 800af4a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800af4c:	6862      	ldr	r2, [r4, #4]
 800af4e:	68db      	ldr	r3, [r3, #12]
 800af50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800af54:	6021      	str	r1, [r4, #0]
 800af56:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800af5a:	bd70      	pop	{r4, r5, r6, pc}
 800af5c:	0800bd65 	.word	0x0800bd65
 800af60:	0800be4c 	.word	0x0800be4c

0800af64 <__multadd>:
 800af64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af68:	690e      	ldr	r6, [r1, #16]
 800af6a:	4607      	mov	r7, r0
 800af6c:	4698      	mov	r8, r3
 800af6e:	460c      	mov	r4, r1
 800af70:	f101 0014 	add.w	r0, r1, #20
 800af74:	2300      	movs	r3, #0
 800af76:	6805      	ldr	r5, [r0, #0]
 800af78:	b2a9      	uxth	r1, r5
 800af7a:	fb02 8101 	mla	r1, r2, r1, r8
 800af7e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800af82:	0c2d      	lsrs	r5, r5, #16
 800af84:	fb02 c505 	mla	r5, r2, r5, ip
 800af88:	b289      	uxth	r1, r1
 800af8a:	3301      	adds	r3, #1
 800af8c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800af90:	429e      	cmp	r6, r3
 800af92:	f840 1b04 	str.w	r1, [r0], #4
 800af96:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800af9a:	dcec      	bgt.n	800af76 <__multadd+0x12>
 800af9c:	f1b8 0f00 	cmp.w	r8, #0
 800afa0:	d022      	beq.n	800afe8 <__multadd+0x84>
 800afa2:	68a3      	ldr	r3, [r4, #8]
 800afa4:	42b3      	cmp	r3, r6
 800afa6:	dc19      	bgt.n	800afdc <__multadd+0x78>
 800afa8:	6861      	ldr	r1, [r4, #4]
 800afaa:	4638      	mov	r0, r7
 800afac:	3101      	adds	r1, #1
 800afae:	f7ff ff77 	bl	800aea0 <_Balloc>
 800afb2:	4605      	mov	r5, r0
 800afb4:	b928      	cbnz	r0, 800afc2 <__multadd+0x5e>
 800afb6:	4602      	mov	r2, r0
 800afb8:	4b0d      	ldr	r3, [pc, #52]	; (800aff0 <__multadd+0x8c>)
 800afba:	480e      	ldr	r0, [pc, #56]	; (800aff4 <__multadd+0x90>)
 800afbc:	21b5      	movs	r1, #181	; 0xb5
 800afbe:	f000 fd67 	bl	800ba90 <__assert_func>
 800afc2:	6922      	ldr	r2, [r4, #16]
 800afc4:	3202      	adds	r2, #2
 800afc6:	f104 010c 	add.w	r1, r4, #12
 800afca:	0092      	lsls	r2, r2, #2
 800afcc:	300c      	adds	r0, #12
 800afce:	f7fe f8f3 	bl	80091b8 <memcpy>
 800afd2:	4621      	mov	r1, r4
 800afd4:	4638      	mov	r0, r7
 800afd6:	f7ff ffa3 	bl	800af20 <_Bfree>
 800afda:	462c      	mov	r4, r5
 800afdc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800afe0:	3601      	adds	r6, #1
 800afe2:	f8c3 8014 	str.w	r8, [r3, #20]
 800afe6:	6126      	str	r6, [r4, #16]
 800afe8:	4620      	mov	r0, r4
 800afea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afee:	bf00      	nop
 800aff0:	0800bddb 	.word	0x0800bddb
 800aff4:	0800be4c 	.word	0x0800be4c

0800aff8 <__hi0bits>:
 800aff8:	0c03      	lsrs	r3, r0, #16
 800affa:	041b      	lsls	r3, r3, #16
 800affc:	b9d3      	cbnz	r3, 800b034 <__hi0bits+0x3c>
 800affe:	0400      	lsls	r0, r0, #16
 800b000:	2310      	movs	r3, #16
 800b002:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b006:	bf04      	itt	eq
 800b008:	0200      	lsleq	r0, r0, #8
 800b00a:	3308      	addeq	r3, #8
 800b00c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b010:	bf04      	itt	eq
 800b012:	0100      	lsleq	r0, r0, #4
 800b014:	3304      	addeq	r3, #4
 800b016:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b01a:	bf04      	itt	eq
 800b01c:	0080      	lsleq	r0, r0, #2
 800b01e:	3302      	addeq	r3, #2
 800b020:	2800      	cmp	r0, #0
 800b022:	db05      	blt.n	800b030 <__hi0bits+0x38>
 800b024:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b028:	f103 0301 	add.w	r3, r3, #1
 800b02c:	bf08      	it	eq
 800b02e:	2320      	moveq	r3, #32
 800b030:	4618      	mov	r0, r3
 800b032:	4770      	bx	lr
 800b034:	2300      	movs	r3, #0
 800b036:	e7e4      	b.n	800b002 <__hi0bits+0xa>

0800b038 <__lo0bits>:
 800b038:	6803      	ldr	r3, [r0, #0]
 800b03a:	f013 0207 	ands.w	r2, r3, #7
 800b03e:	4601      	mov	r1, r0
 800b040:	d00b      	beq.n	800b05a <__lo0bits+0x22>
 800b042:	07da      	lsls	r2, r3, #31
 800b044:	d424      	bmi.n	800b090 <__lo0bits+0x58>
 800b046:	0798      	lsls	r0, r3, #30
 800b048:	bf49      	itett	mi
 800b04a:	085b      	lsrmi	r3, r3, #1
 800b04c:	089b      	lsrpl	r3, r3, #2
 800b04e:	2001      	movmi	r0, #1
 800b050:	600b      	strmi	r3, [r1, #0]
 800b052:	bf5c      	itt	pl
 800b054:	600b      	strpl	r3, [r1, #0]
 800b056:	2002      	movpl	r0, #2
 800b058:	4770      	bx	lr
 800b05a:	b298      	uxth	r0, r3
 800b05c:	b9b0      	cbnz	r0, 800b08c <__lo0bits+0x54>
 800b05e:	0c1b      	lsrs	r3, r3, #16
 800b060:	2010      	movs	r0, #16
 800b062:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b066:	bf04      	itt	eq
 800b068:	0a1b      	lsreq	r3, r3, #8
 800b06a:	3008      	addeq	r0, #8
 800b06c:	071a      	lsls	r2, r3, #28
 800b06e:	bf04      	itt	eq
 800b070:	091b      	lsreq	r3, r3, #4
 800b072:	3004      	addeq	r0, #4
 800b074:	079a      	lsls	r2, r3, #30
 800b076:	bf04      	itt	eq
 800b078:	089b      	lsreq	r3, r3, #2
 800b07a:	3002      	addeq	r0, #2
 800b07c:	07da      	lsls	r2, r3, #31
 800b07e:	d403      	bmi.n	800b088 <__lo0bits+0x50>
 800b080:	085b      	lsrs	r3, r3, #1
 800b082:	f100 0001 	add.w	r0, r0, #1
 800b086:	d005      	beq.n	800b094 <__lo0bits+0x5c>
 800b088:	600b      	str	r3, [r1, #0]
 800b08a:	4770      	bx	lr
 800b08c:	4610      	mov	r0, r2
 800b08e:	e7e8      	b.n	800b062 <__lo0bits+0x2a>
 800b090:	2000      	movs	r0, #0
 800b092:	4770      	bx	lr
 800b094:	2020      	movs	r0, #32
 800b096:	4770      	bx	lr

0800b098 <__i2b>:
 800b098:	b510      	push	{r4, lr}
 800b09a:	460c      	mov	r4, r1
 800b09c:	2101      	movs	r1, #1
 800b09e:	f7ff feff 	bl	800aea0 <_Balloc>
 800b0a2:	4602      	mov	r2, r0
 800b0a4:	b928      	cbnz	r0, 800b0b2 <__i2b+0x1a>
 800b0a6:	4b05      	ldr	r3, [pc, #20]	; (800b0bc <__i2b+0x24>)
 800b0a8:	4805      	ldr	r0, [pc, #20]	; (800b0c0 <__i2b+0x28>)
 800b0aa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b0ae:	f000 fcef 	bl	800ba90 <__assert_func>
 800b0b2:	2301      	movs	r3, #1
 800b0b4:	6144      	str	r4, [r0, #20]
 800b0b6:	6103      	str	r3, [r0, #16]
 800b0b8:	bd10      	pop	{r4, pc}
 800b0ba:	bf00      	nop
 800b0bc:	0800bddb 	.word	0x0800bddb
 800b0c0:	0800be4c 	.word	0x0800be4c

0800b0c4 <__multiply>:
 800b0c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0c8:	4614      	mov	r4, r2
 800b0ca:	690a      	ldr	r2, [r1, #16]
 800b0cc:	6923      	ldr	r3, [r4, #16]
 800b0ce:	429a      	cmp	r2, r3
 800b0d0:	bfb8      	it	lt
 800b0d2:	460b      	movlt	r3, r1
 800b0d4:	460d      	mov	r5, r1
 800b0d6:	bfbc      	itt	lt
 800b0d8:	4625      	movlt	r5, r4
 800b0da:	461c      	movlt	r4, r3
 800b0dc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800b0e0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b0e4:	68ab      	ldr	r3, [r5, #8]
 800b0e6:	6869      	ldr	r1, [r5, #4]
 800b0e8:	eb0a 0709 	add.w	r7, sl, r9
 800b0ec:	42bb      	cmp	r3, r7
 800b0ee:	b085      	sub	sp, #20
 800b0f0:	bfb8      	it	lt
 800b0f2:	3101      	addlt	r1, #1
 800b0f4:	f7ff fed4 	bl	800aea0 <_Balloc>
 800b0f8:	b930      	cbnz	r0, 800b108 <__multiply+0x44>
 800b0fa:	4602      	mov	r2, r0
 800b0fc:	4b42      	ldr	r3, [pc, #264]	; (800b208 <__multiply+0x144>)
 800b0fe:	4843      	ldr	r0, [pc, #268]	; (800b20c <__multiply+0x148>)
 800b100:	f240 115d 	movw	r1, #349	; 0x15d
 800b104:	f000 fcc4 	bl	800ba90 <__assert_func>
 800b108:	f100 0614 	add.w	r6, r0, #20
 800b10c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800b110:	4633      	mov	r3, r6
 800b112:	2200      	movs	r2, #0
 800b114:	4543      	cmp	r3, r8
 800b116:	d31e      	bcc.n	800b156 <__multiply+0x92>
 800b118:	f105 0c14 	add.w	ip, r5, #20
 800b11c:	f104 0314 	add.w	r3, r4, #20
 800b120:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800b124:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800b128:	9202      	str	r2, [sp, #8]
 800b12a:	ebac 0205 	sub.w	r2, ip, r5
 800b12e:	3a15      	subs	r2, #21
 800b130:	f022 0203 	bic.w	r2, r2, #3
 800b134:	3204      	adds	r2, #4
 800b136:	f105 0115 	add.w	r1, r5, #21
 800b13a:	458c      	cmp	ip, r1
 800b13c:	bf38      	it	cc
 800b13e:	2204      	movcc	r2, #4
 800b140:	9201      	str	r2, [sp, #4]
 800b142:	9a02      	ldr	r2, [sp, #8]
 800b144:	9303      	str	r3, [sp, #12]
 800b146:	429a      	cmp	r2, r3
 800b148:	d808      	bhi.n	800b15c <__multiply+0x98>
 800b14a:	2f00      	cmp	r7, #0
 800b14c:	dc55      	bgt.n	800b1fa <__multiply+0x136>
 800b14e:	6107      	str	r7, [r0, #16]
 800b150:	b005      	add	sp, #20
 800b152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b156:	f843 2b04 	str.w	r2, [r3], #4
 800b15a:	e7db      	b.n	800b114 <__multiply+0x50>
 800b15c:	f8b3 a000 	ldrh.w	sl, [r3]
 800b160:	f1ba 0f00 	cmp.w	sl, #0
 800b164:	d020      	beq.n	800b1a8 <__multiply+0xe4>
 800b166:	f105 0e14 	add.w	lr, r5, #20
 800b16a:	46b1      	mov	r9, r6
 800b16c:	2200      	movs	r2, #0
 800b16e:	f85e 4b04 	ldr.w	r4, [lr], #4
 800b172:	f8d9 b000 	ldr.w	fp, [r9]
 800b176:	b2a1      	uxth	r1, r4
 800b178:	fa1f fb8b 	uxth.w	fp, fp
 800b17c:	fb0a b101 	mla	r1, sl, r1, fp
 800b180:	4411      	add	r1, r2
 800b182:	f8d9 2000 	ldr.w	r2, [r9]
 800b186:	0c24      	lsrs	r4, r4, #16
 800b188:	0c12      	lsrs	r2, r2, #16
 800b18a:	fb0a 2404 	mla	r4, sl, r4, r2
 800b18e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800b192:	b289      	uxth	r1, r1
 800b194:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b198:	45f4      	cmp	ip, lr
 800b19a:	f849 1b04 	str.w	r1, [r9], #4
 800b19e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800b1a2:	d8e4      	bhi.n	800b16e <__multiply+0xaa>
 800b1a4:	9901      	ldr	r1, [sp, #4]
 800b1a6:	5072      	str	r2, [r6, r1]
 800b1a8:	9a03      	ldr	r2, [sp, #12]
 800b1aa:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b1ae:	3304      	adds	r3, #4
 800b1b0:	f1b9 0f00 	cmp.w	r9, #0
 800b1b4:	d01f      	beq.n	800b1f6 <__multiply+0x132>
 800b1b6:	6834      	ldr	r4, [r6, #0]
 800b1b8:	f105 0114 	add.w	r1, r5, #20
 800b1bc:	46b6      	mov	lr, r6
 800b1be:	f04f 0a00 	mov.w	sl, #0
 800b1c2:	880a      	ldrh	r2, [r1, #0]
 800b1c4:	f8be b002 	ldrh.w	fp, [lr, #2]
 800b1c8:	fb09 b202 	mla	r2, r9, r2, fp
 800b1cc:	4492      	add	sl, r2
 800b1ce:	b2a4      	uxth	r4, r4
 800b1d0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800b1d4:	f84e 4b04 	str.w	r4, [lr], #4
 800b1d8:	f851 4b04 	ldr.w	r4, [r1], #4
 800b1dc:	f8be 2000 	ldrh.w	r2, [lr]
 800b1e0:	0c24      	lsrs	r4, r4, #16
 800b1e2:	fb09 2404 	mla	r4, r9, r4, r2
 800b1e6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800b1ea:	458c      	cmp	ip, r1
 800b1ec:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b1f0:	d8e7      	bhi.n	800b1c2 <__multiply+0xfe>
 800b1f2:	9a01      	ldr	r2, [sp, #4]
 800b1f4:	50b4      	str	r4, [r6, r2]
 800b1f6:	3604      	adds	r6, #4
 800b1f8:	e7a3      	b.n	800b142 <__multiply+0x7e>
 800b1fa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d1a5      	bne.n	800b14e <__multiply+0x8a>
 800b202:	3f01      	subs	r7, #1
 800b204:	e7a1      	b.n	800b14a <__multiply+0x86>
 800b206:	bf00      	nop
 800b208:	0800bddb 	.word	0x0800bddb
 800b20c:	0800be4c 	.word	0x0800be4c

0800b210 <__pow5mult>:
 800b210:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b214:	4615      	mov	r5, r2
 800b216:	f012 0203 	ands.w	r2, r2, #3
 800b21a:	4606      	mov	r6, r0
 800b21c:	460f      	mov	r7, r1
 800b21e:	d007      	beq.n	800b230 <__pow5mult+0x20>
 800b220:	4c25      	ldr	r4, [pc, #148]	; (800b2b8 <__pow5mult+0xa8>)
 800b222:	3a01      	subs	r2, #1
 800b224:	2300      	movs	r3, #0
 800b226:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b22a:	f7ff fe9b 	bl	800af64 <__multadd>
 800b22e:	4607      	mov	r7, r0
 800b230:	10ad      	asrs	r5, r5, #2
 800b232:	d03d      	beq.n	800b2b0 <__pow5mult+0xa0>
 800b234:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b236:	b97c      	cbnz	r4, 800b258 <__pow5mult+0x48>
 800b238:	2010      	movs	r0, #16
 800b23a:	f7ff fe29 	bl	800ae90 <malloc>
 800b23e:	4602      	mov	r2, r0
 800b240:	6270      	str	r0, [r6, #36]	; 0x24
 800b242:	b928      	cbnz	r0, 800b250 <__pow5mult+0x40>
 800b244:	4b1d      	ldr	r3, [pc, #116]	; (800b2bc <__pow5mult+0xac>)
 800b246:	481e      	ldr	r0, [pc, #120]	; (800b2c0 <__pow5mult+0xb0>)
 800b248:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b24c:	f000 fc20 	bl	800ba90 <__assert_func>
 800b250:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b254:	6004      	str	r4, [r0, #0]
 800b256:	60c4      	str	r4, [r0, #12]
 800b258:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b25c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b260:	b94c      	cbnz	r4, 800b276 <__pow5mult+0x66>
 800b262:	f240 2171 	movw	r1, #625	; 0x271
 800b266:	4630      	mov	r0, r6
 800b268:	f7ff ff16 	bl	800b098 <__i2b>
 800b26c:	2300      	movs	r3, #0
 800b26e:	f8c8 0008 	str.w	r0, [r8, #8]
 800b272:	4604      	mov	r4, r0
 800b274:	6003      	str	r3, [r0, #0]
 800b276:	f04f 0900 	mov.w	r9, #0
 800b27a:	07eb      	lsls	r3, r5, #31
 800b27c:	d50a      	bpl.n	800b294 <__pow5mult+0x84>
 800b27e:	4639      	mov	r1, r7
 800b280:	4622      	mov	r2, r4
 800b282:	4630      	mov	r0, r6
 800b284:	f7ff ff1e 	bl	800b0c4 <__multiply>
 800b288:	4639      	mov	r1, r7
 800b28a:	4680      	mov	r8, r0
 800b28c:	4630      	mov	r0, r6
 800b28e:	f7ff fe47 	bl	800af20 <_Bfree>
 800b292:	4647      	mov	r7, r8
 800b294:	106d      	asrs	r5, r5, #1
 800b296:	d00b      	beq.n	800b2b0 <__pow5mult+0xa0>
 800b298:	6820      	ldr	r0, [r4, #0]
 800b29a:	b938      	cbnz	r0, 800b2ac <__pow5mult+0x9c>
 800b29c:	4622      	mov	r2, r4
 800b29e:	4621      	mov	r1, r4
 800b2a0:	4630      	mov	r0, r6
 800b2a2:	f7ff ff0f 	bl	800b0c4 <__multiply>
 800b2a6:	6020      	str	r0, [r4, #0]
 800b2a8:	f8c0 9000 	str.w	r9, [r0]
 800b2ac:	4604      	mov	r4, r0
 800b2ae:	e7e4      	b.n	800b27a <__pow5mult+0x6a>
 800b2b0:	4638      	mov	r0, r7
 800b2b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2b6:	bf00      	nop
 800b2b8:	0800bfa0 	.word	0x0800bfa0
 800b2bc:	0800bd65 	.word	0x0800bd65
 800b2c0:	0800be4c 	.word	0x0800be4c

0800b2c4 <__lshift>:
 800b2c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2c8:	460c      	mov	r4, r1
 800b2ca:	6849      	ldr	r1, [r1, #4]
 800b2cc:	6923      	ldr	r3, [r4, #16]
 800b2ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b2d2:	68a3      	ldr	r3, [r4, #8]
 800b2d4:	4607      	mov	r7, r0
 800b2d6:	4691      	mov	r9, r2
 800b2d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b2dc:	f108 0601 	add.w	r6, r8, #1
 800b2e0:	42b3      	cmp	r3, r6
 800b2e2:	db0b      	blt.n	800b2fc <__lshift+0x38>
 800b2e4:	4638      	mov	r0, r7
 800b2e6:	f7ff fddb 	bl	800aea0 <_Balloc>
 800b2ea:	4605      	mov	r5, r0
 800b2ec:	b948      	cbnz	r0, 800b302 <__lshift+0x3e>
 800b2ee:	4602      	mov	r2, r0
 800b2f0:	4b28      	ldr	r3, [pc, #160]	; (800b394 <__lshift+0xd0>)
 800b2f2:	4829      	ldr	r0, [pc, #164]	; (800b398 <__lshift+0xd4>)
 800b2f4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b2f8:	f000 fbca 	bl	800ba90 <__assert_func>
 800b2fc:	3101      	adds	r1, #1
 800b2fe:	005b      	lsls	r3, r3, #1
 800b300:	e7ee      	b.n	800b2e0 <__lshift+0x1c>
 800b302:	2300      	movs	r3, #0
 800b304:	f100 0114 	add.w	r1, r0, #20
 800b308:	f100 0210 	add.w	r2, r0, #16
 800b30c:	4618      	mov	r0, r3
 800b30e:	4553      	cmp	r3, sl
 800b310:	db33      	blt.n	800b37a <__lshift+0xb6>
 800b312:	6920      	ldr	r0, [r4, #16]
 800b314:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b318:	f104 0314 	add.w	r3, r4, #20
 800b31c:	f019 091f 	ands.w	r9, r9, #31
 800b320:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b324:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b328:	d02b      	beq.n	800b382 <__lshift+0xbe>
 800b32a:	f1c9 0e20 	rsb	lr, r9, #32
 800b32e:	468a      	mov	sl, r1
 800b330:	2200      	movs	r2, #0
 800b332:	6818      	ldr	r0, [r3, #0]
 800b334:	fa00 f009 	lsl.w	r0, r0, r9
 800b338:	4302      	orrs	r2, r0
 800b33a:	f84a 2b04 	str.w	r2, [sl], #4
 800b33e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b342:	459c      	cmp	ip, r3
 800b344:	fa22 f20e 	lsr.w	r2, r2, lr
 800b348:	d8f3      	bhi.n	800b332 <__lshift+0x6e>
 800b34a:	ebac 0304 	sub.w	r3, ip, r4
 800b34e:	3b15      	subs	r3, #21
 800b350:	f023 0303 	bic.w	r3, r3, #3
 800b354:	3304      	adds	r3, #4
 800b356:	f104 0015 	add.w	r0, r4, #21
 800b35a:	4584      	cmp	ip, r0
 800b35c:	bf38      	it	cc
 800b35e:	2304      	movcc	r3, #4
 800b360:	50ca      	str	r2, [r1, r3]
 800b362:	b10a      	cbz	r2, 800b368 <__lshift+0xa4>
 800b364:	f108 0602 	add.w	r6, r8, #2
 800b368:	3e01      	subs	r6, #1
 800b36a:	4638      	mov	r0, r7
 800b36c:	612e      	str	r6, [r5, #16]
 800b36e:	4621      	mov	r1, r4
 800b370:	f7ff fdd6 	bl	800af20 <_Bfree>
 800b374:	4628      	mov	r0, r5
 800b376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b37a:	f842 0f04 	str.w	r0, [r2, #4]!
 800b37e:	3301      	adds	r3, #1
 800b380:	e7c5      	b.n	800b30e <__lshift+0x4a>
 800b382:	3904      	subs	r1, #4
 800b384:	f853 2b04 	ldr.w	r2, [r3], #4
 800b388:	f841 2f04 	str.w	r2, [r1, #4]!
 800b38c:	459c      	cmp	ip, r3
 800b38e:	d8f9      	bhi.n	800b384 <__lshift+0xc0>
 800b390:	e7ea      	b.n	800b368 <__lshift+0xa4>
 800b392:	bf00      	nop
 800b394:	0800bddb 	.word	0x0800bddb
 800b398:	0800be4c 	.word	0x0800be4c

0800b39c <__mcmp>:
 800b39c:	b530      	push	{r4, r5, lr}
 800b39e:	6902      	ldr	r2, [r0, #16]
 800b3a0:	690c      	ldr	r4, [r1, #16]
 800b3a2:	1b12      	subs	r2, r2, r4
 800b3a4:	d10e      	bne.n	800b3c4 <__mcmp+0x28>
 800b3a6:	f100 0314 	add.w	r3, r0, #20
 800b3aa:	3114      	adds	r1, #20
 800b3ac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b3b0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b3b4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b3b8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b3bc:	42a5      	cmp	r5, r4
 800b3be:	d003      	beq.n	800b3c8 <__mcmp+0x2c>
 800b3c0:	d305      	bcc.n	800b3ce <__mcmp+0x32>
 800b3c2:	2201      	movs	r2, #1
 800b3c4:	4610      	mov	r0, r2
 800b3c6:	bd30      	pop	{r4, r5, pc}
 800b3c8:	4283      	cmp	r3, r0
 800b3ca:	d3f3      	bcc.n	800b3b4 <__mcmp+0x18>
 800b3cc:	e7fa      	b.n	800b3c4 <__mcmp+0x28>
 800b3ce:	f04f 32ff 	mov.w	r2, #4294967295
 800b3d2:	e7f7      	b.n	800b3c4 <__mcmp+0x28>

0800b3d4 <__mdiff>:
 800b3d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3d8:	460c      	mov	r4, r1
 800b3da:	4606      	mov	r6, r0
 800b3dc:	4611      	mov	r1, r2
 800b3de:	4620      	mov	r0, r4
 800b3e0:	4617      	mov	r7, r2
 800b3e2:	f7ff ffdb 	bl	800b39c <__mcmp>
 800b3e6:	1e05      	subs	r5, r0, #0
 800b3e8:	d110      	bne.n	800b40c <__mdiff+0x38>
 800b3ea:	4629      	mov	r1, r5
 800b3ec:	4630      	mov	r0, r6
 800b3ee:	f7ff fd57 	bl	800aea0 <_Balloc>
 800b3f2:	b930      	cbnz	r0, 800b402 <__mdiff+0x2e>
 800b3f4:	4b39      	ldr	r3, [pc, #228]	; (800b4dc <__mdiff+0x108>)
 800b3f6:	4602      	mov	r2, r0
 800b3f8:	f240 2132 	movw	r1, #562	; 0x232
 800b3fc:	4838      	ldr	r0, [pc, #224]	; (800b4e0 <__mdiff+0x10c>)
 800b3fe:	f000 fb47 	bl	800ba90 <__assert_func>
 800b402:	2301      	movs	r3, #1
 800b404:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b408:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b40c:	bfa4      	itt	ge
 800b40e:	463b      	movge	r3, r7
 800b410:	4627      	movge	r7, r4
 800b412:	4630      	mov	r0, r6
 800b414:	6879      	ldr	r1, [r7, #4]
 800b416:	bfa6      	itte	ge
 800b418:	461c      	movge	r4, r3
 800b41a:	2500      	movge	r5, #0
 800b41c:	2501      	movlt	r5, #1
 800b41e:	f7ff fd3f 	bl	800aea0 <_Balloc>
 800b422:	b920      	cbnz	r0, 800b42e <__mdiff+0x5a>
 800b424:	4b2d      	ldr	r3, [pc, #180]	; (800b4dc <__mdiff+0x108>)
 800b426:	4602      	mov	r2, r0
 800b428:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b42c:	e7e6      	b.n	800b3fc <__mdiff+0x28>
 800b42e:	693e      	ldr	r6, [r7, #16]
 800b430:	60c5      	str	r5, [r0, #12]
 800b432:	6925      	ldr	r5, [r4, #16]
 800b434:	f107 0114 	add.w	r1, r7, #20
 800b438:	f104 0914 	add.w	r9, r4, #20
 800b43c:	f100 0e14 	add.w	lr, r0, #20
 800b440:	f107 0210 	add.w	r2, r7, #16
 800b444:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800b448:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800b44c:	46f2      	mov	sl, lr
 800b44e:	2700      	movs	r7, #0
 800b450:	f859 3b04 	ldr.w	r3, [r9], #4
 800b454:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b458:	fa1f f883 	uxth.w	r8, r3
 800b45c:	fa17 f78b 	uxtah	r7, r7, fp
 800b460:	0c1b      	lsrs	r3, r3, #16
 800b462:	eba7 0808 	sub.w	r8, r7, r8
 800b466:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b46a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b46e:	fa1f f888 	uxth.w	r8, r8
 800b472:	141f      	asrs	r7, r3, #16
 800b474:	454d      	cmp	r5, r9
 800b476:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b47a:	f84a 3b04 	str.w	r3, [sl], #4
 800b47e:	d8e7      	bhi.n	800b450 <__mdiff+0x7c>
 800b480:	1b2b      	subs	r3, r5, r4
 800b482:	3b15      	subs	r3, #21
 800b484:	f023 0303 	bic.w	r3, r3, #3
 800b488:	3304      	adds	r3, #4
 800b48a:	3415      	adds	r4, #21
 800b48c:	42a5      	cmp	r5, r4
 800b48e:	bf38      	it	cc
 800b490:	2304      	movcc	r3, #4
 800b492:	4419      	add	r1, r3
 800b494:	4473      	add	r3, lr
 800b496:	469e      	mov	lr, r3
 800b498:	460d      	mov	r5, r1
 800b49a:	4565      	cmp	r5, ip
 800b49c:	d30e      	bcc.n	800b4bc <__mdiff+0xe8>
 800b49e:	f10c 0203 	add.w	r2, ip, #3
 800b4a2:	1a52      	subs	r2, r2, r1
 800b4a4:	f022 0203 	bic.w	r2, r2, #3
 800b4a8:	3903      	subs	r1, #3
 800b4aa:	458c      	cmp	ip, r1
 800b4ac:	bf38      	it	cc
 800b4ae:	2200      	movcc	r2, #0
 800b4b0:	441a      	add	r2, r3
 800b4b2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b4b6:	b17b      	cbz	r3, 800b4d8 <__mdiff+0x104>
 800b4b8:	6106      	str	r6, [r0, #16]
 800b4ba:	e7a5      	b.n	800b408 <__mdiff+0x34>
 800b4bc:	f855 8b04 	ldr.w	r8, [r5], #4
 800b4c0:	fa17 f488 	uxtah	r4, r7, r8
 800b4c4:	1422      	asrs	r2, r4, #16
 800b4c6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800b4ca:	b2a4      	uxth	r4, r4
 800b4cc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800b4d0:	f84e 4b04 	str.w	r4, [lr], #4
 800b4d4:	1417      	asrs	r7, r2, #16
 800b4d6:	e7e0      	b.n	800b49a <__mdiff+0xc6>
 800b4d8:	3e01      	subs	r6, #1
 800b4da:	e7ea      	b.n	800b4b2 <__mdiff+0xde>
 800b4dc:	0800bddb 	.word	0x0800bddb
 800b4e0:	0800be4c 	.word	0x0800be4c

0800b4e4 <__d2b>:
 800b4e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b4e8:	4689      	mov	r9, r1
 800b4ea:	2101      	movs	r1, #1
 800b4ec:	ec57 6b10 	vmov	r6, r7, d0
 800b4f0:	4690      	mov	r8, r2
 800b4f2:	f7ff fcd5 	bl	800aea0 <_Balloc>
 800b4f6:	4604      	mov	r4, r0
 800b4f8:	b930      	cbnz	r0, 800b508 <__d2b+0x24>
 800b4fa:	4602      	mov	r2, r0
 800b4fc:	4b25      	ldr	r3, [pc, #148]	; (800b594 <__d2b+0xb0>)
 800b4fe:	4826      	ldr	r0, [pc, #152]	; (800b598 <__d2b+0xb4>)
 800b500:	f240 310a 	movw	r1, #778	; 0x30a
 800b504:	f000 fac4 	bl	800ba90 <__assert_func>
 800b508:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b50c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b510:	bb35      	cbnz	r5, 800b560 <__d2b+0x7c>
 800b512:	2e00      	cmp	r6, #0
 800b514:	9301      	str	r3, [sp, #4]
 800b516:	d028      	beq.n	800b56a <__d2b+0x86>
 800b518:	4668      	mov	r0, sp
 800b51a:	9600      	str	r6, [sp, #0]
 800b51c:	f7ff fd8c 	bl	800b038 <__lo0bits>
 800b520:	9900      	ldr	r1, [sp, #0]
 800b522:	b300      	cbz	r0, 800b566 <__d2b+0x82>
 800b524:	9a01      	ldr	r2, [sp, #4]
 800b526:	f1c0 0320 	rsb	r3, r0, #32
 800b52a:	fa02 f303 	lsl.w	r3, r2, r3
 800b52e:	430b      	orrs	r3, r1
 800b530:	40c2      	lsrs	r2, r0
 800b532:	6163      	str	r3, [r4, #20]
 800b534:	9201      	str	r2, [sp, #4]
 800b536:	9b01      	ldr	r3, [sp, #4]
 800b538:	61a3      	str	r3, [r4, #24]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	bf14      	ite	ne
 800b53e:	2202      	movne	r2, #2
 800b540:	2201      	moveq	r2, #1
 800b542:	6122      	str	r2, [r4, #16]
 800b544:	b1d5      	cbz	r5, 800b57c <__d2b+0x98>
 800b546:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b54a:	4405      	add	r5, r0
 800b54c:	f8c9 5000 	str.w	r5, [r9]
 800b550:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b554:	f8c8 0000 	str.w	r0, [r8]
 800b558:	4620      	mov	r0, r4
 800b55a:	b003      	add	sp, #12
 800b55c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b560:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b564:	e7d5      	b.n	800b512 <__d2b+0x2e>
 800b566:	6161      	str	r1, [r4, #20]
 800b568:	e7e5      	b.n	800b536 <__d2b+0x52>
 800b56a:	a801      	add	r0, sp, #4
 800b56c:	f7ff fd64 	bl	800b038 <__lo0bits>
 800b570:	9b01      	ldr	r3, [sp, #4]
 800b572:	6163      	str	r3, [r4, #20]
 800b574:	2201      	movs	r2, #1
 800b576:	6122      	str	r2, [r4, #16]
 800b578:	3020      	adds	r0, #32
 800b57a:	e7e3      	b.n	800b544 <__d2b+0x60>
 800b57c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b580:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b584:	f8c9 0000 	str.w	r0, [r9]
 800b588:	6918      	ldr	r0, [r3, #16]
 800b58a:	f7ff fd35 	bl	800aff8 <__hi0bits>
 800b58e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b592:	e7df      	b.n	800b554 <__d2b+0x70>
 800b594:	0800bddb 	.word	0x0800bddb
 800b598:	0800be4c 	.word	0x0800be4c

0800b59c <_calloc_r>:
 800b59c:	b513      	push	{r0, r1, r4, lr}
 800b59e:	434a      	muls	r2, r1
 800b5a0:	4611      	mov	r1, r2
 800b5a2:	9201      	str	r2, [sp, #4]
 800b5a4:	f000 f85a 	bl	800b65c <_malloc_r>
 800b5a8:	4604      	mov	r4, r0
 800b5aa:	b118      	cbz	r0, 800b5b4 <_calloc_r+0x18>
 800b5ac:	9a01      	ldr	r2, [sp, #4]
 800b5ae:	2100      	movs	r1, #0
 800b5b0:	f7fd fe10 	bl	80091d4 <memset>
 800b5b4:	4620      	mov	r0, r4
 800b5b6:	b002      	add	sp, #8
 800b5b8:	bd10      	pop	{r4, pc}
	...

0800b5bc <_free_r>:
 800b5bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b5be:	2900      	cmp	r1, #0
 800b5c0:	d048      	beq.n	800b654 <_free_r+0x98>
 800b5c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b5c6:	9001      	str	r0, [sp, #4]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	f1a1 0404 	sub.w	r4, r1, #4
 800b5ce:	bfb8      	it	lt
 800b5d0:	18e4      	addlt	r4, r4, r3
 800b5d2:	f000 fae3 	bl	800bb9c <__malloc_lock>
 800b5d6:	4a20      	ldr	r2, [pc, #128]	; (800b658 <_free_r+0x9c>)
 800b5d8:	9801      	ldr	r0, [sp, #4]
 800b5da:	6813      	ldr	r3, [r2, #0]
 800b5dc:	4615      	mov	r5, r2
 800b5de:	b933      	cbnz	r3, 800b5ee <_free_r+0x32>
 800b5e0:	6063      	str	r3, [r4, #4]
 800b5e2:	6014      	str	r4, [r2, #0]
 800b5e4:	b003      	add	sp, #12
 800b5e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b5ea:	f000 badd 	b.w	800bba8 <__malloc_unlock>
 800b5ee:	42a3      	cmp	r3, r4
 800b5f0:	d90b      	bls.n	800b60a <_free_r+0x4e>
 800b5f2:	6821      	ldr	r1, [r4, #0]
 800b5f4:	1862      	adds	r2, r4, r1
 800b5f6:	4293      	cmp	r3, r2
 800b5f8:	bf04      	itt	eq
 800b5fa:	681a      	ldreq	r2, [r3, #0]
 800b5fc:	685b      	ldreq	r3, [r3, #4]
 800b5fe:	6063      	str	r3, [r4, #4]
 800b600:	bf04      	itt	eq
 800b602:	1852      	addeq	r2, r2, r1
 800b604:	6022      	streq	r2, [r4, #0]
 800b606:	602c      	str	r4, [r5, #0]
 800b608:	e7ec      	b.n	800b5e4 <_free_r+0x28>
 800b60a:	461a      	mov	r2, r3
 800b60c:	685b      	ldr	r3, [r3, #4]
 800b60e:	b10b      	cbz	r3, 800b614 <_free_r+0x58>
 800b610:	42a3      	cmp	r3, r4
 800b612:	d9fa      	bls.n	800b60a <_free_r+0x4e>
 800b614:	6811      	ldr	r1, [r2, #0]
 800b616:	1855      	adds	r5, r2, r1
 800b618:	42a5      	cmp	r5, r4
 800b61a:	d10b      	bne.n	800b634 <_free_r+0x78>
 800b61c:	6824      	ldr	r4, [r4, #0]
 800b61e:	4421      	add	r1, r4
 800b620:	1854      	adds	r4, r2, r1
 800b622:	42a3      	cmp	r3, r4
 800b624:	6011      	str	r1, [r2, #0]
 800b626:	d1dd      	bne.n	800b5e4 <_free_r+0x28>
 800b628:	681c      	ldr	r4, [r3, #0]
 800b62a:	685b      	ldr	r3, [r3, #4]
 800b62c:	6053      	str	r3, [r2, #4]
 800b62e:	4421      	add	r1, r4
 800b630:	6011      	str	r1, [r2, #0]
 800b632:	e7d7      	b.n	800b5e4 <_free_r+0x28>
 800b634:	d902      	bls.n	800b63c <_free_r+0x80>
 800b636:	230c      	movs	r3, #12
 800b638:	6003      	str	r3, [r0, #0]
 800b63a:	e7d3      	b.n	800b5e4 <_free_r+0x28>
 800b63c:	6825      	ldr	r5, [r4, #0]
 800b63e:	1961      	adds	r1, r4, r5
 800b640:	428b      	cmp	r3, r1
 800b642:	bf04      	itt	eq
 800b644:	6819      	ldreq	r1, [r3, #0]
 800b646:	685b      	ldreq	r3, [r3, #4]
 800b648:	6063      	str	r3, [r4, #4]
 800b64a:	bf04      	itt	eq
 800b64c:	1949      	addeq	r1, r1, r5
 800b64e:	6021      	streq	r1, [r4, #0]
 800b650:	6054      	str	r4, [r2, #4]
 800b652:	e7c7      	b.n	800b5e4 <_free_r+0x28>
 800b654:	b003      	add	sp, #12
 800b656:	bd30      	pop	{r4, r5, pc}
 800b658:	20000660 	.word	0x20000660

0800b65c <_malloc_r>:
 800b65c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b65e:	1ccd      	adds	r5, r1, #3
 800b660:	f025 0503 	bic.w	r5, r5, #3
 800b664:	3508      	adds	r5, #8
 800b666:	2d0c      	cmp	r5, #12
 800b668:	bf38      	it	cc
 800b66a:	250c      	movcc	r5, #12
 800b66c:	2d00      	cmp	r5, #0
 800b66e:	4606      	mov	r6, r0
 800b670:	db01      	blt.n	800b676 <_malloc_r+0x1a>
 800b672:	42a9      	cmp	r1, r5
 800b674:	d903      	bls.n	800b67e <_malloc_r+0x22>
 800b676:	230c      	movs	r3, #12
 800b678:	6033      	str	r3, [r6, #0]
 800b67a:	2000      	movs	r0, #0
 800b67c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b67e:	f000 fa8d 	bl	800bb9c <__malloc_lock>
 800b682:	4921      	ldr	r1, [pc, #132]	; (800b708 <_malloc_r+0xac>)
 800b684:	680a      	ldr	r2, [r1, #0]
 800b686:	4614      	mov	r4, r2
 800b688:	b99c      	cbnz	r4, 800b6b2 <_malloc_r+0x56>
 800b68a:	4f20      	ldr	r7, [pc, #128]	; (800b70c <_malloc_r+0xb0>)
 800b68c:	683b      	ldr	r3, [r7, #0]
 800b68e:	b923      	cbnz	r3, 800b69a <_malloc_r+0x3e>
 800b690:	4621      	mov	r1, r4
 800b692:	4630      	mov	r0, r6
 800b694:	f000 f996 	bl	800b9c4 <_sbrk_r>
 800b698:	6038      	str	r0, [r7, #0]
 800b69a:	4629      	mov	r1, r5
 800b69c:	4630      	mov	r0, r6
 800b69e:	f000 f991 	bl	800b9c4 <_sbrk_r>
 800b6a2:	1c43      	adds	r3, r0, #1
 800b6a4:	d123      	bne.n	800b6ee <_malloc_r+0x92>
 800b6a6:	230c      	movs	r3, #12
 800b6a8:	6033      	str	r3, [r6, #0]
 800b6aa:	4630      	mov	r0, r6
 800b6ac:	f000 fa7c 	bl	800bba8 <__malloc_unlock>
 800b6b0:	e7e3      	b.n	800b67a <_malloc_r+0x1e>
 800b6b2:	6823      	ldr	r3, [r4, #0]
 800b6b4:	1b5b      	subs	r3, r3, r5
 800b6b6:	d417      	bmi.n	800b6e8 <_malloc_r+0x8c>
 800b6b8:	2b0b      	cmp	r3, #11
 800b6ba:	d903      	bls.n	800b6c4 <_malloc_r+0x68>
 800b6bc:	6023      	str	r3, [r4, #0]
 800b6be:	441c      	add	r4, r3
 800b6c0:	6025      	str	r5, [r4, #0]
 800b6c2:	e004      	b.n	800b6ce <_malloc_r+0x72>
 800b6c4:	6863      	ldr	r3, [r4, #4]
 800b6c6:	42a2      	cmp	r2, r4
 800b6c8:	bf0c      	ite	eq
 800b6ca:	600b      	streq	r3, [r1, #0]
 800b6cc:	6053      	strne	r3, [r2, #4]
 800b6ce:	4630      	mov	r0, r6
 800b6d0:	f000 fa6a 	bl	800bba8 <__malloc_unlock>
 800b6d4:	f104 000b 	add.w	r0, r4, #11
 800b6d8:	1d23      	adds	r3, r4, #4
 800b6da:	f020 0007 	bic.w	r0, r0, #7
 800b6de:	1ac2      	subs	r2, r0, r3
 800b6e0:	d0cc      	beq.n	800b67c <_malloc_r+0x20>
 800b6e2:	1a1b      	subs	r3, r3, r0
 800b6e4:	50a3      	str	r3, [r4, r2]
 800b6e6:	e7c9      	b.n	800b67c <_malloc_r+0x20>
 800b6e8:	4622      	mov	r2, r4
 800b6ea:	6864      	ldr	r4, [r4, #4]
 800b6ec:	e7cc      	b.n	800b688 <_malloc_r+0x2c>
 800b6ee:	1cc4      	adds	r4, r0, #3
 800b6f0:	f024 0403 	bic.w	r4, r4, #3
 800b6f4:	42a0      	cmp	r0, r4
 800b6f6:	d0e3      	beq.n	800b6c0 <_malloc_r+0x64>
 800b6f8:	1a21      	subs	r1, r4, r0
 800b6fa:	4630      	mov	r0, r6
 800b6fc:	f000 f962 	bl	800b9c4 <_sbrk_r>
 800b700:	3001      	adds	r0, #1
 800b702:	d1dd      	bne.n	800b6c0 <_malloc_r+0x64>
 800b704:	e7cf      	b.n	800b6a6 <_malloc_r+0x4a>
 800b706:	bf00      	nop
 800b708:	20000660 	.word	0x20000660
 800b70c:	20000664 	.word	0x20000664

0800b710 <__sfputc_r>:
 800b710:	6893      	ldr	r3, [r2, #8]
 800b712:	3b01      	subs	r3, #1
 800b714:	2b00      	cmp	r3, #0
 800b716:	b410      	push	{r4}
 800b718:	6093      	str	r3, [r2, #8]
 800b71a:	da08      	bge.n	800b72e <__sfputc_r+0x1e>
 800b71c:	6994      	ldr	r4, [r2, #24]
 800b71e:	42a3      	cmp	r3, r4
 800b720:	db01      	blt.n	800b726 <__sfputc_r+0x16>
 800b722:	290a      	cmp	r1, #10
 800b724:	d103      	bne.n	800b72e <__sfputc_r+0x1e>
 800b726:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b72a:	f7fe ba53 	b.w	8009bd4 <__swbuf_r>
 800b72e:	6813      	ldr	r3, [r2, #0]
 800b730:	1c58      	adds	r0, r3, #1
 800b732:	6010      	str	r0, [r2, #0]
 800b734:	7019      	strb	r1, [r3, #0]
 800b736:	4608      	mov	r0, r1
 800b738:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b73c:	4770      	bx	lr

0800b73e <__sfputs_r>:
 800b73e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b740:	4606      	mov	r6, r0
 800b742:	460f      	mov	r7, r1
 800b744:	4614      	mov	r4, r2
 800b746:	18d5      	adds	r5, r2, r3
 800b748:	42ac      	cmp	r4, r5
 800b74a:	d101      	bne.n	800b750 <__sfputs_r+0x12>
 800b74c:	2000      	movs	r0, #0
 800b74e:	e007      	b.n	800b760 <__sfputs_r+0x22>
 800b750:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b754:	463a      	mov	r2, r7
 800b756:	4630      	mov	r0, r6
 800b758:	f7ff ffda 	bl	800b710 <__sfputc_r>
 800b75c:	1c43      	adds	r3, r0, #1
 800b75e:	d1f3      	bne.n	800b748 <__sfputs_r+0xa>
 800b760:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b764 <_vfiprintf_r>:
 800b764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b768:	460d      	mov	r5, r1
 800b76a:	b09d      	sub	sp, #116	; 0x74
 800b76c:	4614      	mov	r4, r2
 800b76e:	4698      	mov	r8, r3
 800b770:	4606      	mov	r6, r0
 800b772:	b118      	cbz	r0, 800b77c <_vfiprintf_r+0x18>
 800b774:	6983      	ldr	r3, [r0, #24]
 800b776:	b90b      	cbnz	r3, 800b77c <_vfiprintf_r+0x18>
 800b778:	f7ff fa80 	bl	800ac7c <__sinit>
 800b77c:	4b89      	ldr	r3, [pc, #548]	; (800b9a4 <_vfiprintf_r+0x240>)
 800b77e:	429d      	cmp	r5, r3
 800b780:	d11b      	bne.n	800b7ba <_vfiprintf_r+0x56>
 800b782:	6875      	ldr	r5, [r6, #4]
 800b784:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b786:	07d9      	lsls	r1, r3, #31
 800b788:	d405      	bmi.n	800b796 <_vfiprintf_r+0x32>
 800b78a:	89ab      	ldrh	r3, [r5, #12]
 800b78c:	059a      	lsls	r2, r3, #22
 800b78e:	d402      	bmi.n	800b796 <_vfiprintf_r+0x32>
 800b790:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b792:	f7ff fb16 	bl	800adc2 <__retarget_lock_acquire_recursive>
 800b796:	89ab      	ldrh	r3, [r5, #12]
 800b798:	071b      	lsls	r3, r3, #28
 800b79a:	d501      	bpl.n	800b7a0 <_vfiprintf_r+0x3c>
 800b79c:	692b      	ldr	r3, [r5, #16]
 800b79e:	b9eb      	cbnz	r3, 800b7dc <_vfiprintf_r+0x78>
 800b7a0:	4629      	mov	r1, r5
 800b7a2:	4630      	mov	r0, r6
 800b7a4:	f7fe fa68 	bl	8009c78 <__swsetup_r>
 800b7a8:	b1c0      	cbz	r0, 800b7dc <_vfiprintf_r+0x78>
 800b7aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b7ac:	07dc      	lsls	r4, r3, #31
 800b7ae:	d50e      	bpl.n	800b7ce <_vfiprintf_r+0x6a>
 800b7b0:	f04f 30ff 	mov.w	r0, #4294967295
 800b7b4:	b01d      	add	sp, #116	; 0x74
 800b7b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7ba:	4b7b      	ldr	r3, [pc, #492]	; (800b9a8 <_vfiprintf_r+0x244>)
 800b7bc:	429d      	cmp	r5, r3
 800b7be:	d101      	bne.n	800b7c4 <_vfiprintf_r+0x60>
 800b7c0:	68b5      	ldr	r5, [r6, #8]
 800b7c2:	e7df      	b.n	800b784 <_vfiprintf_r+0x20>
 800b7c4:	4b79      	ldr	r3, [pc, #484]	; (800b9ac <_vfiprintf_r+0x248>)
 800b7c6:	429d      	cmp	r5, r3
 800b7c8:	bf08      	it	eq
 800b7ca:	68f5      	ldreq	r5, [r6, #12]
 800b7cc:	e7da      	b.n	800b784 <_vfiprintf_r+0x20>
 800b7ce:	89ab      	ldrh	r3, [r5, #12]
 800b7d0:	0598      	lsls	r0, r3, #22
 800b7d2:	d4ed      	bmi.n	800b7b0 <_vfiprintf_r+0x4c>
 800b7d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b7d6:	f7ff faf5 	bl	800adc4 <__retarget_lock_release_recursive>
 800b7da:	e7e9      	b.n	800b7b0 <_vfiprintf_r+0x4c>
 800b7dc:	2300      	movs	r3, #0
 800b7de:	9309      	str	r3, [sp, #36]	; 0x24
 800b7e0:	2320      	movs	r3, #32
 800b7e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b7e6:	f8cd 800c 	str.w	r8, [sp, #12]
 800b7ea:	2330      	movs	r3, #48	; 0x30
 800b7ec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b9b0 <_vfiprintf_r+0x24c>
 800b7f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b7f4:	f04f 0901 	mov.w	r9, #1
 800b7f8:	4623      	mov	r3, r4
 800b7fa:	469a      	mov	sl, r3
 800b7fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b800:	b10a      	cbz	r2, 800b806 <_vfiprintf_r+0xa2>
 800b802:	2a25      	cmp	r2, #37	; 0x25
 800b804:	d1f9      	bne.n	800b7fa <_vfiprintf_r+0x96>
 800b806:	ebba 0b04 	subs.w	fp, sl, r4
 800b80a:	d00b      	beq.n	800b824 <_vfiprintf_r+0xc0>
 800b80c:	465b      	mov	r3, fp
 800b80e:	4622      	mov	r2, r4
 800b810:	4629      	mov	r1, r5
 800b812:	4630      	mov	r0, r6
 800b814:	f7ff ff93 	bl	800b73e <__sfputs_r>
 800b818:	3001      	adds	r0, #1
 800b81a:	f000 80aa 	beq.w	800b972 <_vfiprintf_r+0x20e>
 800b81e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b820:	445a      	add	r2, fp
 800b822:	9209      	str	r2, [sp, #36]	; 0x24
 800b824:	f89a 3000 	ldrb.w	r3, [sl]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	f000 80a2 	beq.w	800b972 <_vfiprintf_r+0x20e>
 800b82e:	2300      	movs	r3, #0
 800b830:	f04f 32ff 	mov.w	r2, #4294967295
 800b834:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b838:	f10a 0a01 	add.w	sl, sl, #1
 800b83c:	9304      	str	r3, [sp, #16]
 800b83e:	9307      	str	r3, [sp, #28]
 800b840:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b844:	931a      	str	r3, [sp, #104]	; 0x68
 800b846:	4654      	mov	r4, sl
 800b848:	2205      	movs	r2, #5
 800b84a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b84e:	4858      	ldr	r0, [pc, #352]	; (800b9b0 <_vfiprintf_r+0x24c>)
 800b850:	f7f4 fcc6 	bl	80001e0 <memchr>
 800b854:	9a04      	ldr	r2, [sp, #16]
 800b856:	b9d8      	cbnz	r0, 800b890 <_vfiprintf_r+0x12c>
 800b858:	06d1      	lsls	r1, r2, #27
 800b85a:	bf44      	itt	mi
 800b85c:	2320      	movmi	r3, #32
 800b85e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b862:	0713      	lsls	r3, r2, #28
 800b864:	bf44      	itt	mi
 800b866:	232b      	movmi	r3, #43	; 0x2b
 800b868:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b86c:	f89a 3000 	ldrb.w	r3, [sl]
 800b870:	2b2a      	cmp	r3, #42	; 0x2a
 800b872:	d015      	beq.n	800b8a0 <_vfiprintf_r+0x13c>
 800b874:	9a07      	ldr	r2, [sp, #28]
 800b876:	4654      	mov	r4, sl
 800b878:	2000      	movs	r0, #0
 800b87a:	f04f 0c0a 	mov.w	ip, #10
 800b87e:	4621      	mov	r1, r4
 800b880:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b884:	3b30      	subs	r3, #48	; 0x30
 800b886:	2b09      	cmp	r3, #9
 800b888:	d94e      	bls.n	800b928 <_vfiprintf_r+0x1c4>
 800b88a:	b1b0      	cbz	r0, 800b8ba <_vfiprintf_r+0x156>
 800b88c:	9207      	str	r2, [sp, #28]
 800b88e:	e014      	b.n	800b8ba <_vfiprintf_r+0x156>
 800b890:	eba0 0308 	sub.w	r3, r0, r8
 800b894:	fa09 f303 	lsl.w	r3, r9, r3
 800b898:	4313      	orrs	r3, r2
 800b89a:	9304      	str	r3, [sp, #16]
 800b89c:	46a2      	mov	sl, r4
 800b89e:	e7d2      	b.n	800b846 <_vfiprintf_r+0xe2>
 800b8a0:	9b03      	ldr	r3, [sp, #12]
 800b8a2:	1d19      	adds	r1, r3, #4
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	9103      	str	r1, [sp, #12]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	bfbb      	ittet	lt
 800b8ac:	425b      	neglt	r3, r3
 800b8ae:	f042 0202 	orrlt.w	r2, r2, #2
 800b8b2:	9307      	strge	r3, [sp, #28]
 800b8b4:	9307      	strlt	r3, [sp, #28]
 800b8b6:	bfb8      	it	lt
 800b8b8:	9204      	strlt	r2, [sp, #16]
 800b8ba:	7823      	ldrb	r3, [r4, #0]
 800b8bc:	2b2e      	cmp	r3, #46	; 0x2e
 800b8be:	d10c      	bne.n	800b8da <_vfiprintf_r+0x176>
 800b8c0:	7863      	ldrb	r3, [r4, #1]
 800b8c2:	2b2a      	cmp	r3, #42	; 0x2a
 800b8c4:	d135      	bne.n	800b932 <_vfiprintf_r+0x1ce>
 800b8c6:	9b03      	ldr	r3, [sp, #12]
 800b8c8:	1d1a      	adds	r2, r3, #4
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	9203      	str	r2, [sp, #12]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	bfb8      	it	lt
 800b8d2:	f04f 33ff 	movlt.w	r3, #4294967295
 800b8d6:	3402      	adds	r4, #2
 800b8d8:	9305      	str	r3, [sp, #20]
 800b8da:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b9c0 <_vfiprintf_r+0x25c>
 800b8de:	7821      	ldrb	r1, [r4, #0]
 800b8e0:	2203      	movs	r2, #3
 800b8e2:	4650      	mov	r0, sl
 800b8e4:	f7f4 fc7c 	bl	80001e0 <memchr>
 800b8e8:	b140      	cbz	r0, 800b8fc <_vfiprintf_r+0x198>
 800b8ea:	2340      	movs	r3, #64	; 0x40
 800b8ec:	eba0 000a 	sub.w	r0, r0, sl
 800b8f0:	fa03 f000 	lsl.w	r0, r3, r0
 800b8f4:	9b04      	ldr	r3, [sp, #16]
 800b8f6:	4303      	orrs	r3, r0
 800b8f8:	3401      	adds	r4, #1
 800b8fa:	9304      	str	r3, [sp, #16]
 800b8fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b900:	482c      	ldr	r0, [pc, #176]	; (800b9b4 <_vfiprintf_r+0x250>)
 800b902:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b906:	2206      	movs	r2, #6
 800b908:	f7f4 fc6a 	bl	80001e0 <memchr>
 800b90c:	2800      	cmp	r0, #0
 800b90e:	d03f      	beq.n	800b990 <_vfiprintf_r+0x22c>
 800b910:	4b29      	ldr	r3, [pc, #164]	; (800b9b8 <_vfiprintf_r+0x254>)
 800b912:	bb1b      	cbnz	r3, 800b95c <_vfiprintf_r+0x1f8>
 800b914:	9b03      	ldr	r3, [sp, #12]
 800b916:	3307      	adds	r3, #7
 800b918:	f023 0307 	bic.w	r3, r3, #7
 800b91c:	3308      	adds	r3, #8
 800b91e:	9303      	str	r3, [sp, #12]
 800b920:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b922:	443b      	add	r3, r7
 800b924:	9309      	str	r3, [sp, #36]	; 0x24
 800b926:	e767      	b.n	800b7f8 <_vfiprintf_r+0x94>
 800b928:	fb0c 3202 	mla	r2, ip, r2, r3
 800b92c:	460c      	mov	r4, r1
 800b92e:	2001      	movs	r0, #1
 800b930:	e7a5      	b.n	800b87e <_vfiprintf_r+0x11a>
 800b932:	2300      	movs	r3, #0
 800b934:	3401      	adds	r4, #1
 800b936:	9305      	str	r3, [sp, #20]
 800b938:	4619      	mov	r1, r3
 800b93a:	f04f 0c0a 	mov.w	ip, #10
 800b93e:	4620      	mov	r0, r4
 800b940:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b944:	3a30      	subs	r2, #48	; 0x30
 800b946:	2a09      	cmp	r2, #9
 800b948:	d903      	bls.n	800b952 <_vfiprintf_r+0x1ee>
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d0c5      	beq.n	800b8da <_vfiprintf_r+0x176>
 800b94e:	9105      	str	r1, [sp, #20]
 800b950:	e7c3      	b.n	800b8da <_vfiprintf_r+0x176>
 800b952:	fb0c 2101 	mla	r1, ip, r1, r2
 800b956:	4604      	mov	r4, r0
 800b958:	2301      	movs	r3, #1
 800b95a:	e7f0      	b.n	800b93e <_vfiprintf_r+0x1da>
 800b95c:	ab03      	add	r3, sp, #12
 800b95e:	9300      	str	r3, [sp, #0]
 800b960:	462a      	mov	r2, r5
 800b962:	4b16      	ldr	r3, [pc, #88]	; (800b9bc <_vfiprintf_r+0x258>)
 800b964:	a904      	add	r1, sp, #16
 800b966:	4630      	mov	r0, r6
 800b968:	f7fd fcdc 	bl	8009324 <_printf_float>
 800b96c:	4607      	mov	r7, r0
 800b96e:	1c78      	adds	r0, r7, #1
 800b970:	d1d6      	bne.n	800b920 <_vfiprintf_r+0x1bc>
 800b972:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b974:	07d9      	lsls	r1, r3, #31
 800b976:	d405      	bmi.n	800b984 <_vfiprintf_r+0x220>
 800b978:	89ab      	ldrh	r3, [r5, #12]
 800b97a:	059a      	lsls	r2, r3, #22
 800b97c:	d402      	bmi.n	800b984 <_vfiprintf_r+0x220>
 800b97e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b980:	f7ff fa20 	bl	800adc4 <__retarget_lock_release_recursive>
 800b984:	89ab      	ldrh	r3, [r5, #12]
 800b986:	065b      	lsls	r3, r3, #25
 800b988:	f53f af12 	bmi.w	800b7b0 <_vfiprintf_r+0x4c>
 800b98c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b98e:	e711      	b.n	800b7b4 <_vfiprintf_r+0x50>
 800b990:	ab03      	add	r3, sp, #12
 800b992:	9300      	str	r3, [sp, #0]
 800b994:	462a      	mov	r2, r5
 800b996:	4b09      	ldr	r3, [pc, #36]	; (800b9bc <_vfiprintf_r+0x258>)
 800b998:	a904      	add	r1, sp, #16
 800b99a:	4630      	mov	r0, r6
 800b99c:	f7fd ff66 	bl	800986c <_printf_i>
 800b9a0:	e7e4      	b.n	800b96c <_vfiprintf_r+0x208>
 800b9a2:	bf00      	nop
 800b9a4:	0800be0c 	.word	0x0800be0c
 800b9a8:	0800be2c 	.word	0x0800be2c
 800b9ac:	0800bdec 	.word	0x0800bdec
 800b9b0:	0800bfac 	.word	0x0800bfac
 800b9b4:	0800bfb6 	.word	0x0800bfb6
 800b9b8:	08009325 	.word	0x08009325
 800b9bc:	0800b73f 	.word	0x0800b73f
 800b9c0:	0800bfb2 	.word	0x0800bfb2

0800b9c4 <_sbrk_r>:
 800b9c4:	b538      	push	{r3, r4, r5, lr}
 800b9c6:	4d06      	ldr	r5, [pc, #24]	; (800b9e0 <_sbrk_r+0x1c>)
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	4604      	mov	r4, r0
 800b9cc:	4608      	mov	r0, r1
 800b9ce:	602b      	str	r3, [r5, #0]
 800b9d0:	f7f8 f924 	bl	8003c1c <_sbrk>
 800b9d4:	1c43      	adds	r3, r0, #1
 800b9d6:	d102      	bne.n	800b9de <_sbrk_r+0x1a>
 800b9d8:	682b      	ldr	r3, [r5, #0]
 800b9da:	b103      	cbz	r3, 800b9de <_sbrk_r+0x1a>
 800b9dc:	6023      	str	r3, [r4, #0]
 800b9de:	bd38      	pop	{r3, r4, r5, pc}
 800b9e0:	20000dc8 	.word	0x20000dc8

0800b9e4 <__sread>:
 800b9e4:	b510      	push	{r4, lr}
 800b9e6:	460c      	mov	r4, r1
 800b9e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9ec:	f000 f8e2 	bl	800bbb4 <_read_r>
 800b9f0:	2800      	cmp	r0, #0
 800b9f2:	bfab      	itete	ge
 800b9f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b9f6:	89a3      	ldrhlt	r3, [r4, #12]
 800b9f8:	181b      	addge	r3, r3, r0
 800b9fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b9fe:	bfac      	ite	ge
 800ba00:	6563      	strge	r3, [r4, #84]	; 0x54
 800ba02:	81a3      	strhlt	r3, [r4, #12]
 800ba04:	bd10      	pop	{r4, pc}

0800ba06 <__swrite>:
 800ba06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba0a:	461f      	mov	r7, r3
 800ba0c:	898b      	ldrh	r3, [r1, #12]
 800ba0e:	05db      	lsls	r3, r3, #23
 800ba10:	4605      	mov	r5, r0
 800ba12:	460c      	mov	r4, r1
 800ba14:	4616      	mov	r6, r2
 800ba16:	d505      	bpl.n	800ba24 <__swrite+0x1e>
 800ba18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba1c:	2302      	movs	r3, #2
 800ba1e:	2200      	movs	r2, #0
 800ba20:	f000 f898 	bl	800bb54 <_lseek_r>
 800ba24:	89a3      	ldrh	r3, [r4, #12]
 800ba26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ba2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ba2e:	81a3      	strh	r3, [r4, #12]
 800ba30:	4632      	mov	r2, r6
 800ba32:	463b      	mov	r3, r7
 800ba34:	4628      	mov	r0, r5
 800ba36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba3a:	f000 b817 	b.w	800ba6c <_write_r>

0800ba3e <__sseek>:
 800ba3e:	b510      	push	{r4, lr}
 800ba40:	460c      	mov	r4, r1
 800ba42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba46:	f000 f885 	bl	800bb54 <_lseek_r>
 800ba4a:	1c43      	adds	r3, r0, #1
 800ba4c:	89a3      	ldrh	r3, [r4, #12]
 800ba4e:	bf15      	itete	ne
 800ba50:	6560      	strne	r0, [r4, #84]	; 0x54
 800ba52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ba56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ba5a:	81a3      	strheq	r3, [r4, #12]
 800ba5c:	bf18      	it	ne
 800ba5e:	81a3      	strhne	r3, [r4, #12]
 800ba60:	bd10      	pop	{r4, pc}

0800ba62 <__sclose>:
 800ba62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba66:	f000 b831 	b.w	800bacc <_close_r>
	...

0800ba6c <_write_r>:
 800ba6c:	b538      	push	{r3, r4, r5, lr}
 800ba6e:	4d07      	ldr	r5, [pc, #28]	; (800ba8c <_write_r+0x20>)
 800ba70:	4604      	mov	r4, r0
 800ba72:	4608      	mov	r0, r1
 800ba74:	4611      	mov	r1, r2
 800ba76:	2200      	movs	r2, #0
 800ba78:	602a      	str	r2, [r5, #0]
 800ba7a:	461a      	mov	r2, r3
 800ba7c:	f7f8 f87d 	bl	8003b7a <_write>
 800ba80:	1c43      	adds	r3, r0, #1
 800ba82:	d102      	bne.n	800ba8a <_write_r+0x1e>
 800ba84:	682b      	ldr	r3, [r5, #0]
 800ba86:	b103      	cbz	r3, 800ba8a <_write_r+0x1e>
 800ba88:	6023      	str	r3, [r4, #0]
 800ba8a:	bd38      	pop	{r3, r4, r5, pc}
 800ba8c:	20000dc8 	.word	0x20000dc8

0800ba90 <__assert_func>:
 800ba90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ba92:	4614      	mov	r4, r2
 800ba94:	461a      	mov	r2, r3
 800ba96:	4b09      	ldr	r3, [pc, #36]	; (800babc <__assert_func+0x2c>)
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	4605      	mov	r5, r0
 800ba9c:	68d8      	ldr	r0, [r3, #12]
 800ba9e:	b14c      	cbz	r4, 800bab4 <__assert_func+0x24>
 800baa0:	4b07      	ldr	r3, [pc, #28]	; (800bac0 <__assert_func+0x30>)
 800baa2:	9100      	str	r1, [sp, #0]
 800baa4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800baa8:	4906      	ldr	r1, [pc, #24]	; (800bac4 <__assert_func+0x34>)
 800baaa:	462b      	mov	r3, r5
 800baac:	f000 f81e 	bl	800baec <fiprintf>
 800bab0:	f000 f89f 	bl	800bbf2 <abort>
 800bab4:	4b04      	ldr	r3, [pc, #16]	; (800bac8 <__assert_func+0x38>)
 800bab6:	461c      	mov	r4, r3
 800bab8:	e7f3      	b.n	800baa2 <__assert_func+0x12>
 800baba:	bf00      	nop
 800babc:	2000003c 	.word	0x2000003c
 800bac0:	0800bfbd 	.word	0x0800bfbd
 800bac4:	0800bfca 	.word	0x0800bfca
 800bac8:	0800bff8 	.word	0x0800bff8

0800bacc <_close_r>:
 800bacc:	b538      	push	{r3, r4, r5, lr}
 800bace:	4d06      	ldr	r5, [pc, #24]	; (800bae8 <_close_r+0x1c>)
 800bad0:	2300      	movs	r3, #0
 800bad2:	4604      	mov	r4, r0
 800bad4:	4608      	mov	r0, r1
 800bad6:	602b      	str	r3, [r5, #0]
 800bad8:	f7f8 f86b 	bl	8003bb2 <_close>
 800badc:	1c43      	adds	r3, r0, #1
 800bade:	d102      	bne.n	800bae6 <_close_r+0x1a>
 800bae0:	682b      	ldr	r3, [r5, #0]
 800bae2:	b103      	cbz	r3, 800bae6 <_close_r+0x1a>
 800bae4:	6023      	str	r3, [r4, #0]
 800bae6:	bd38      	pop	{r3, r4, r5, pc}
 800bae8:	20000dc8 	.word	0x20000dc8

0800baec <fiprintf>:
 800baec:	b40e      	push	{r1, r2, r3}
 800baee:	b503      	push	{r0, r1, lr}
 800baf0:	4601      	mov	r1, r0
 800baf2:	ab03      	add	r3, sp, #12
 800baf4:	4805      	ldr	r0, [pc, #20]	; (800bb0c <fiprintf+0x20>)
 800baf6:	f853 2b04 	ldr.w	r2, [r3], #4
 800bafa:	6800      	ldr	r0, [r0, #0]
 800bafc:	9301      	str	r3, [sp, #4]
 800bafe:	f7ff fe31 	bl	800b764 <_vfiprintf_r>
 800bb02:	b002      	add	sp, #8
 800bb04:	f85d eb04 	ldr.w	lr, [sp], #4
 800bb08:	b003      	add	sp, #12
 800bb0a:	4770      	bx	lr
 800bb0c:	2000003c 	.word	0x2000003c

0800bb10 <_fstat_r>:
 800bb10:	b538      	push	{r3, r4, r5, lr}
 800bb12:	4d07      	ldr	r5, [pc, #28]	; (800bb30 <_fstat_r+0x20>)
 800bb14:	2300      	movs	r3, #0
 800bb16:	4604      	mov	r4, r0
 800bb18:	4608      	mov	r0, r1
 800bb1a:	4611      	mov	r1, r2
 800bb1c:	602b      	str	r3, [r5, #0]
 800bb1e:	f7f8 f854 	bl	8003bca <_fstat>
 800bb22:	1c43      	adds	r3, r0, #1
 800bb24:	d102      	bne.n	800bb2c <_fstat_r+0x1c>
 800bb26:	682b      	ldr	r3, [r5, #0]
 800bb28:	b103      	cbz	r3, 800bb2c <_fstat_r+0x1c>
 800bb2a:	6023      	str	r3, [r4, #0]
 800bb2c:	bd38      	pop	{r3, r4, r5, pc}
 800bb2e:	bf00      	nop
 800bb30:	20000dc8 	.word	0x20000dc8

0800bb34 <_isatty_r>:
 800bb34:	b538      	push	{r3, r4, r5, lr}
 800bb36:	4d06      	ldr	r5, [pc, #24]	; (800bb50 <_isatty_r+0x1c>)
 800bb38:	2300      	movs	r3, #0
 800bb3a:	4604      	mov	r4, r0
 800bb3c:	4608      	mov	r0, r1
 800bb3e:	602b      	str	r3, [r5, #0]
 800bb40:	f7f8 f853 	bl	8003bea <_isatty>
 800bb44:	1c43      	adds	r3, r0, #1
 800bb46:	d102      	bne.n	800bb4e <_isatty_r+0x1a>
 800bb48:	682b      	ldr	r3, [r5, #0]
 800bb4a:	b103      	cbz	r3, 800bb4e <_isatty_r+0x1a>
 800bb4c:	6023      	str	r3, [r4, #0]
 800bb4e:	bd38      	pop	{r3, r4, r5, pc}
 800bb50:	20000dc8 	.word	0x20000dc8

0800bb54 <_lseek_r>:
 800bb54:	b538      	push	{r3, r4, r5, lr}
 800bb56:	4d07      	ldr	r5, [pc, #28]	; (800bb74 <_lseek_r+0x20>)
 800bb58:	4604      	mov	r4, r0
 800bb5a:	4608      	mov	r0, r1
 800bb5c:	4611      	mov	r1, r2
 800bb5e:	2200      	movs	r2, #0
 800bb60:	602a      	str	r2, [r5, #0]
 800bb62:	461a      	mov	r2, r3
 800bb64:	f7f8 f84c 	bl	8003c00 <_lseek>
 800bb68:	1c43      	adds	r3, r0, #1
 800bb6a:	d102      	bne.n	800bb72 <_lseek_r+0x1e>
 800bb6c:	682b      	ldr	r3, [r5, #0]
 800bb6e:	b103      	cbz	r3, 800bb72 <_lseek_r+0x1e>
 800bb70:	6023      	str	r3, [r4, #0]
 800bb72:	bd38      	pop	{r3, r4, r5, pc}
 800bb74:	20000dc8 	.word	0x20000dc8

0800bb78 <__ascii_mbtowc>:
 800bb78:	b082      	sub	sp, #8
 800bb7a:	b901      	cbnz	r1, 800bb7e <__ascii_mbtowc+0x6>
 800bb7c:	a901      	add	r1, sp, #4
 800bb7e:	b142      	cbz	r2, 800bb92 <__ascii_mbtowc+0x1a>
 800bb80:	b14b      	cbz	r3, 800bb96 <__ascii_mbtowc+0x1e>
 800bb82:	7813      	ldrb	r3, [r2, #0]
 800bb84:	600b      	str	r3, [r1, #0]
 800bb86:	7812      	ldrb	r2, [r2, #0]
 800bb88:	1e10      	subs	r0, r2, #0
 800bb8a:	bf18      	it	ne
 800bb8c:	2001      	movne	r0, #1
 800bb8e:	b002      	add	sp, #8
 800bb90:	4770      	bx	lr
 800bb92:	4610      	mov	r0, r2
 800bb94:	e7fb      	b.n	800bb8e <__ascii_mbtowc+0x16>
 800bb96:	f06f 0001 	mvn.w	r0, #1
 800bb9a:	e7f8      	b.n	800bb8e <__ascii_mbtowc+0x16>

0800bb9c <__malloc_lock>:
 800bb9c:	4801      	ldr	r0, [pc, #4]	; (800bba4 <__malloc_lock+0x8>)
 800bb9e:	f7ff b910 	b.w	800adc2 <__retarget_lock_acquire_recursive>
 800bba2:	bf00      	nop
 800bba4:	20000dbc 	.word	0x20000dbc

0800bba8 <__malloc_unlock>:
 800bba8:	4801      	ldr	r0, [pc, #4]	; (800bbb0 <__malloc_unlock+0x8>)
 800bbaa:	f7ff b90b 	b.w	800adc4 <__retarget_lock_release_recursive>
 800bbae:	bf00      	nop
 800bbb0:	20000dbc 	.word	0x20000dbc

0800bbb4 <_read_r>:
 800bbb4:	b538      	push	{r3, r4, r5, lr}
 800bbb6:	4d07      	ldr	r5, [pc, #28]	; (800bbd4 <_read_r+0x20>)
 800bbb8:	4604      	mov	r4, r0
 800bbba:	4608      	mov	r0, r1
 800bbbc:	4611      	mov	r1, r2
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	602a      	str	r2, [r5, #0]
 800bbc2:	461a      	mov	r2, r3
 800bbc4:	f7f7 ffbc 	bl	8003b40 <_read>
 800bbc8:	1c43      	adds	r3, r0, #1
 800bbca:	d102      	bne.n	800bbd2 <_read_r+0x1e>
 800bbcc:	682b      	ldr	r3, [r5, #0]
 800bbce:	b103      	cbz	r3, 800bbd2 <_read_r+0x1e>
 800bbd0:	6023      	str	r3, [r4, #0]
 800bbd2:	bd38      	pop	{r3, r4, r5, pc}
 800bbd4:	20000dc8 	.word	0x20000dc8

0800bbd8 <__ascii_wctomb>:
 800bbd8:	b149      	cbz	r1, 800bbee <__ascii_wctomb+0x16>
 800bbda:	2aff      	cmp	r2, #255	; 0xff
 800bbdc:	bf85      	ittet	hi
 800bbde:	238a      	movhi	r3, #138	; 0x8a
 800bbe0:	6003      	strhi	r3, [r0, #0]
 800bbe2:	700a      	strbls	r2, [r1, #0]
 800bbe4:	f04f 30ff 	movhi.w	r0, #4294967295
 800bbe8:	bf98      	it	ls
 800bbea:	2001      	movls	r0, #1
 800bbec:	4770      	bx	lr
 800bbee:	4608      	mov	r0, r1
 800bbf0:	4770      	bx	lr

0800bbf2 <abort>:
 800bbf2:	b508      	push	{r3, lr}
 800bbf4:	2006      	movs	r0, #6
 800bbf6:	f000 f82b 	bl	800bc50 <raise>
 800bbfa:	2001      	movs	r0, #1
 800bbfc:	f7f7 ff96 	bl	8003b2c <_exit>

0800bc00 <_raise_r>:
 800bc00:	291f      	cmp	r1, #31
 800bc02:	b538      	push	{r3, r4, r5, lr}
 800bc04:	4604      	mov	r4, r0
 800bc06:	460d      	mov	r5, r1
 800bc08:	d904      	bls.n	800bc14 <_raise_r+0x14>
 800bc0a:	2316      	movs	r3, #22
 800bc0c:	6003      	str	r3, [r0, #0]
 800bc0e:	f04f 30ff 	mov.w	r0, #4294967295
 800bc12:	bd38      	pop	{r3, r4, r5, pc}
 800bc14:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bc16:	b112      	cbz	r2, 800bc1e <_raise_r+0x1e>
 800bc18:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bc1c:	b94b      	cbnz	r3, 800bc32 <_raise_r+0x32>
 800bc1e:	4620      	mov	r0, r4
 800bc20:	f000 f830 	bl	800bc84 <_getpid_r>
 800bc24:	462a      	mov	r2, r5
 800bc26:	4601      	mov	r1, r0
 800bc28:	4620      	mov	r0, r4
 800bc2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc2e:	f000 b817 	b.w	800bc60 <_kill_r>
 800bc32:	2b01      	cmp	r3, #1
 800bc34:	d00a      	beq.n	800bc4c <_raise_r+0x4c>
 800bc36:	1c59      	adds	r1, r3, #1
 800bc38:	d103      	bne.n	800bc42 <_raise_r+0x42>
 800bc3a:	2316      	movs	r3, #22
 800bc3c:	6003      	str	r3, [r0, #0]
 800bc3e:	2001      	movs	r0, #1
 800bc40:	e7e7      	b.n	800bc12 <_raise_r+0x12>
 800bc42:	2400      	movs	r4, #0
 800bc44:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bc48:	4628      	mov	r0, r5
 800bc4a:	4798      	blx	r3
 800bc4c:	2000      	movs	r0, #0
 800bc4e:	e7e0      	b.n	800bc12 <_raise_r+0x12>

0800bc50 <raise>:
 800bc50:	4b02      	ldr	r3, [pc, #8]	; (800bc5c <raise+0xc>)
 800bc52:	4601      	mov	r1, r0
 800bc54:	6818      	ldr	r0, [r3, #0]
 800bc56:	f7ff bfd3 	b.w	800bc00 <_raise_r>
 800bc5a:	bf00      	nop
 800bc5c:	2000003c 	.word	0x2000003c

0800bc60 <_kill_r>:
 800bc60:	b538      	push	{r3, r4, r5, lr}
 800bc62:	4d07      	ldr	r5, [pc, #28]	; (800bc80 <_kill_r+0x20>)
 800bc64:	2300      	movs	r3, #0
 800bc66:	4604      	mov	r4, r0
 800bc68:	4608      	mov	r0, r1
 800bc6a:	4611      	mov	r1, r2
 800bc6c:	602b      	str	r3, [r5, #0]
 800bc6e:	f7f7 ff4d 	bl	8003b0c <_kill>
 800bc72:	1c43      	adds	r3, r0, #1
 800bc74:	d102      	bne.n	800bc7c <_kill_r+0x1c>
 800bc76:	682b      	ldr	r3, [r5, #0]
 800bc78:	b103      	cbz	r3, 800bc7c <_kill_r+0x1c>
 800bc7a:	6023      	str	r3, [r4, #0]
 800bc7c:	bd38      	pop	{r3, r4, r5, pc}
 800bc7e:	bf00      	nop
 800bc80:	20000dc8 	.word	0x20000dc8

0800bc84 <_getpid_r>:
 800bc84:	f7f7 bf3a 	b.w	8003afc <_getpid>

0800bc88 <_init>:
 800bc88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc8a:	bf00      	nop
 800bc8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc8e:	bc08      	pop	{r3}
 800bc90:	469e      	mov	lr, r3
 800bc92:	4770      	bx	lr

0800bc94 <_fini>:
 800bc94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc96:	bf00      	nop
 800bc98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc9a:	bc08      	pop	{r3}
 800bc9c:	469e      	mov	lr, r3
 800bc9e:	4770      	bx	lr
